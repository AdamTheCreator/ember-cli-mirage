import ServerCore from './server-core';
import Pretender from 'pretender';
import assert from './assert';
import { getModels } from './ember-data';
import { hasEmberData } from './utils/ember-data';
import _assign from 'lodash/assign';

/*
  This is really an EmberPretenderBrowserServer:
    - Ember because it knows about Ember Data models
    - Pretender because it wires up Prtender on instnatiation
    - Browser because it depends on imports that only work in the browser

  It's called server.js so its backwards compatible, i.e. so folks doing this

  ```js
  import Server from 'ember-cli-mirage/server';

  new Server();
  ```

  in Ember apps running in the browser will get what they expect.

  We will eventually break that import API and offer these things compositionally.
*/
export default class extends ServerCore {

  /**
   * Creates a new Pretender instance.
   *
   * @method createPretender
   * @return {Object} A new Pretender instance.
   * @public
   */
  createPretender() {
    let server = this;

    return new Pretender(function() {
      this.passthroughRequest = function(verb, path, request) {
        if (server.shouldLog()) {
          // eslint-disable-next-line no-console
          console.log(`Passthrough request: ${verb.toUpperCase()} ${request.url}`);
        }
      };

      this.handledRequest = function(verb, path, request) {
        if (server.shouldLog()) {
          // eslint-disable-next-line no-console
          console.groupCollapsed(
            `Mirage: [${request.status}] ${verb.toUpperCase()} ${request.url}`
          );
          let { requestBody, responseText } = request;
          let loggedRequest, loggedResponse;

          try {
            loggedRequest = JSON.parse(requestBody);
          } catch(e) {
            loggedRequest = requestBody;
          }

          try {
            loggedResponse = JSON.parse(responseText);
          } catch(e) {
            loggedResponse = responseText;
          }

          // eslint-disable-next-line no-console
          console.log({
            request: loggedRequest,
            response: loggedResponse,
            raw: request
          });
          // eslint-disable-next-line no-console
          console.groupEnd();
        }
      };

      this.unhandledRequest = function(verb, path) {
        path = decodeURI(path);
        assert(
          `Your Ember app tried to ${verb} '${path}', but there was no route defined to handle this request. Define a route that matches this path in your mirage/config.js file. Did you forget to add your namespace?`
        );
      };
    }, { trackRequests: server.shouldTrackRequests() });
  }

  // Merge models from autogenerated Ember Data models with user defined models
  autodiscoverModels(config) {
    if (hasEmberData && config.discoverEmberDataModels) {
      let models = {};
      _assign(models, getModels(), config.models || {});
      config.models = models;
    }
  }

}

"use strict"
define("dummy/adapters/-addon-docs",["exports","ember-cli-addon-docs/adapters/-addon-docs"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/adapters/class",["exports","ember-cli-addon-docs/adapters/class"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/adapters/component",["exports","ember-cli-addon-docs/adapters/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/adapters/module",["exports","ember-cli-addon-docs/adapters/module"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/adapters/post",["exports","jquery","ember-data"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t="https://api.github.com/repos/samselikoff/ember-cli-mirage",n=a.default.JSONAPIAdapter.extend({findRecord:function(e,a,n,o){var r="".concat(t,"/issues/").concat(n)
return new Ember.RSVP.Promise(function(e,a){s.default.getJSON(r).then(function(s){var a={data:{id:n,type:"posts",attributes:{title:s.title,body:s.body,"issue-url":s.html_url},relationships:{comments:{links:{related:s.comments_url}}}}}
e(a)},function(e){a(e)})})},findAll:function(e,a){var n=this,o="".concat(t,"/issues?state=closed&labels=Blog%20post")
return new Ember.RSVP.Promise(function(e,a){s.default.getJSON(o).then(function(s){n.hasLoadedAllPosts=!0
var a={data:s.map(function(e){return{id:e.number,type:"posts",attributes:{title:e.title,body:e.body,"issue-url":e.html_url}}})}
e(a)},function(e){a(e)})})},shouldReloadAll:function(e,s){return!this.hasLoadedAllPosts},findHasMany:function(e,a,t,n){return new Ember.RSVP.Promise(function(e,a){s.default.getJSON(t).then(function(s){var a={data:[],included:[]},t={}
s.forEach(function(e){a.data.push({id:e.id,type:"comments",attributes:{body:e.body,permalink:e.html_url,"created-at":e.created_at},relationships:{user:{data:{type:"users",id:e.user.id}}}}),t[e.user.id]=e.user}),Object.keys(t).forEach(function(e){var s=t[e]
a.included.push({type:"users",id:s.id,attributes:{"avatar-url":s.avatar_url,"profile-url":s.html_url,username:s.login}})}),e(a)},function(e){a(e)})})}})
e.default=n}),define("dummy/adapters/project",["exports","ember-cli-addon-docs/adapters/project"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/app",["exports","dummy/resolver","ember-load-initializers","dummy/config/environment"],function(e,s,a,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Application.extend({modulePrefix:t.default.modulePrefix,podModulePrefix:t.default.podModulePrefix,Resolver:s.default});(0,a.default)(n,t.default.modulePrefix)
var o=n
e.default=o}),define("dummy/breakpoints",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={mobile:"(max-width: 767px)",tablet:"(min-width: 768px) and (max-width: 991px)",desktop:"(min-width: 992px) and (max-width: 1200px)",jumbo:"(min-width: 1201px)"}}),define("dummy/components/-lf-get-outlet-state",["exports","liquid-fire/components/-lf-get-outlet-state"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-class",["exports","ember-cli-addon-docs/components/api/x-class/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-component",["exports","ember-cli-addon-docs/components/api/x-component/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-import-path",["exports","ember-cli-addon-docs/components/api/x-import-path/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-meta-panel",["exports","ember-cli-addon-docs/components/api/x-meta-panel/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-meta-panel/header",["exports","ember-cli-addon-docs/components/api/x-meta-panel/header/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-module",["exports","ember-cli-addon-docs/components/api/x-module/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-section",["exports","ember-cli-addon-docs/components/api/x-section/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-sections",["exports","ember-cli-addon-docs/components/api/x-sections/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/api/x-toggles",["exports","ember-cli-addon-docs/components/api/x-toggles/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/code-snippet",["exports","dummy/snippets"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=self.require("highlight.js"),t=Ember.Component.extend({tagName:"pre",classNameBindings:["language"],unindent:!0,_unindent:function(e){if(!this.get("unindent"))return e
for(var s,a,t=e.split("\n").filter(function(e){return""!==e}),n=0;n<t.length;n++)(s=/^[ \t]*/.exec(t[n]))&&(void 0===a||a>s[0].length)&&(a=s[0].length)
return void 0!==a&&a>0&&(e=e.replace(new RegExp("^[ \t]{"+a+"}","gm"),"")),e},source:Ember.computed("name",function(){var e=this.get("name").split("/").reduce(function(e,s){return e&&e[s]},s.default)
return this._unindent((e||"").replace(/^(\s*\n)*/,"").replace(/\s*$/,""))}),didInsertElement:function(){a.highlightBlock(this.get("element"))},language:Ember.computed("name",function(){var e=/\.(\w+)$/i.exec(this.get("name"))
if(e)switch(e[1].toLowerCase()){case"js":return"javascript"
case"coffee":return"coffeescript"
case"hbs":return"htmlbars"
case"css":return"css"
case"scss":return"scss"
case"less":return"less"
case"emblem":return"emblem"
case"ts":return"typescript"}})})
e.default=t}),define("dummy/components/copy-button",["exports","ember-cli-clipboard/components/copy-button"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-demo",["exports","ember-cli-addon-docs/components/docs-demo/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-demo/x-example",["exports","ember-cli-addon-docs/components/docs-demo/x-example/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-demo/x-snippet",["exports","ember-cli-addon-docs/components/docs-demo/x-snippet/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header",["exports","ember-cli-addon-docs/components/docs-header/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header/link",["exports","ember-cli-addon-docs/components/docs-header/link/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header/search-box",["exports","ember-cli-addon-docs/components/docs-header/search-box/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header/search-result",["exports","ember-cli-addon-docs/components/docs-header/search-result/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header/search-results",["exports","ember-cli-addon-docs/components/docs-header/search-results/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-header/version-selector",["exports","ember-cli-addon-docs/components/docs-header/version-selector/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-hero",["exports","ember-cli-addon-docs/components/docs-hero/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})})
define("dummy/components/docs-keyboard-shortcuts",["exports","ember-cli-addon-docs/components/docs-keyboard-shortcuts/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-link",["exports","ember-cli-addon-docs/components/docs-link/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-logo",["exports","ember-cli-addon-docs/components/docs-logo/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-snippet",["exports","ember-cli-addon-docs/components/docs-snippet/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-svg-icon",["exports","ember-cli-addon-docs/components/docs-svg-icon/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer",["exports","ember-cli-addon-docs/components/docs-viewer/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-autogenerated-api-docs",["exports","ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-autogenerated-api-docs/module-nav",["exports","ember-cli-addon-docs/components/docs-viewer/x-autogenerated-api-docs/module-nav/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-current-page-index",["exports","ember-cli-addon-docs/components/docs-viewer/x-current-page-index/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-main",["exports","ember-cli-addon-docs/components/docs-viewer/x-main/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-nav-item",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav-item/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-nav-list",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav-list/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-nav",["exports","ember-cli-addon-docs/components/docs-viewer/x-nav/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/docs-viewer/x-section",["exports","ember-cli-addon-docs/components/docs-viewer/x-section/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog-positioned-container",["exports","ember-modal-dialog/components/positioned-container"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog/-basic-dialog",["exports","ember-modal-dialog/components/basic-dialog"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog/-in-place-dialog",["exports","ember-modal-dialog/components/in-place-dialog"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog/-liquid-dialog",["exports","ember-modal-dialog/components/liquid-dialog"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog/-liquid-tether-dialog",["exports","ember-modal-dialog/components/liquid-tether-dialog"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-modal-dialog/-tether-dialog",["exports","ember-modal-dialog/components/tether-dialog"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-tether",["exports","ember-tether/components/ember-tether"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/ember-wormhole",["exports","ember-wormhole/components/ember-wormhole"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/etw/module-style-detail",["exports","ember-cli-tailwind/utils/classes-for-module-style"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=Ember.Component.extend({etwTailwindStyleguide:Ember.inject.service(),moduleStyle:Ember.computed.reads("etwTailwindStyleguide.selectedModuleStyle"),activeResponsiveClass:"all",activeState:"none",detailStyles:Ember.computed("moduleStyle","activeResponsiveClass","activeState",function(){var e=this.moduleStyle,a=this.activeResponsiveClass,t="all"===a?"":"".concat(a,":"),n=this.activeState,o="none"===n?"":"".concat(n,":")
return(0,s.default)(e).map(function(e){return"".concat(t).concat(o).concat(e)})}),actions:{highlightStyle:function(e){var s=this
this.set("highlightedStyle",e),Ember.run.later(function(){s.set("highlightedStyle",null)},1500)}}})
e.default=a}),define("dummy/components/etw/module-style-example",["exports","ember-cli-tailwind/utils/classes-for-module-style"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=Ember.Component.extend({tagName:"",etwTailwindStyleguide:Ember.inject.service(),moduleStyle:null,classesForModuleStyle:Ember.computed("moduleStyle",function(){return(0,s.default)(this.moduleStyle)}),actions:{selectModuleStyle:function(){this.etwTailwindStyleguide.set("selectedModuleStyle",this.moduleStyle)}}})
e.default=a}),define("dummy/components/illiquid-model",["exports","liquid-fire/components/illiquid-model"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-bind",["exports","liquid-fire/components/liquid-bind"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-child",["exports","liquid-fire/components/liquid-child"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-container",["exports","liquid-fire/components/liquid-container"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-if",["exports","liquid-fire/components/liquid-if"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-measured",["exports","liquid-fire/components/liquid-measured"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"measure",{enumerable:!0,get:function(){return s.measure}})})
define("dummy/components/liquid-outlet",["exports","liquid-fire/components/liquid-outlet"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-spacer",["exports","liquid-fire/components/liquid-spacer"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-sync",["exports","liquid-fire/components/liquid-sync"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-unless",["exports","liquid-fire/components/liquid-unless"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/liquid-versions",["exports","liquid-fire/components/liquid-versions"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/components/modal-dialog",["exports","ember-cli-addon-docs/components/modal-dialog/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/controllers/application-tailwind",["exports","dummy/tailwind/config/colors","dummy/tailwind/config/screens","dummy/tailwind/config/fonts","dummy/tailwind/config/text-sizes","dummy/tailwind/config/font-weights","dummy/tailwind/config/line-height","dummy/tailwind/config/letter-spacing","dummy/tailwind/config/border-widths","dummy/tailwind/config/border-radius","dummy/tailwind/config/width","dummy/tailwind/config/height","dummy/tailwind/config/min-width","dummy/tailwind/config/min-height","dummy/tailwind/config/max-width","dummy/tailwind/config/max-height","dummy/tailwind/config/padding","dummy/tailwind/config/margin","dummy/tailwind/config/negative-margin","dummy/tailwind/config/shadows","dummy/tailwind/config/z-index","dummy/tailwind/config/opacity","dummy/tailwind/config/svg-fill","dummy/tailwind/config/svg-stroke"],function(e,s,a,t,n,o,r,l,i,d,c,p,h,u,m,f,y,g,j,b,w,v,k,_){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var x={colors:s.default,screens:a.default,fonts:t.default,textSizes:n.default,fontWeights:o.default,leading:r.default,tracking:l.default,borderWidths:i.default,borderRadius:d.default,width:c.default,height:p.default,minWidth:h.default,minHeight:u.default,maxWidth:m.default,maxHeight:f.default,padding:y.default,margin:g.default,negativeMargin:j.default,shadows:b.default,zIndex:w.default,opacity:v.default,svgFill:k.default,svgStroke:_.default},M=Ember.Controller.extend({moduleStyles:Ember.computed(function(){return Object.keys(x).reduce(function(e,s){var a=x[s]
return e[s]=Object.keys(a).map(function(e){return{module:Ember.String.dasherize(s),name:e,value:a[e]}}),e},{})})})
e.default=M}),define("dummy/controllers/application",["exports","ember-cli-addon-docs/controllers/application"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/controllers/docs/api/class",["exports","ember-cli-addon-docs/controllers/docs/api/class"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/and",["exports","ember-truth-helpers/helpers/and"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"and",{enumerable:!0,get:function(){return s.and}})}),define("dummy/helpers/app-version",["exports","dummy/config/environment","ember-cli-app-version/utils/regexp"],function(e,s,a){function t(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=s.default.APP.version,o=t.versionOnly||t.hideSha,r=t.shaOnly||t.hideVersion,l=null
return o&&(t.showExtended&&(l=n.match(a.versionExtendedRegExp)),l||(l=n.match(a.versionRegExp))),r&&(l=n.match(a.shaRegExp)),l?l[0]:n}Object.defineProperty(e,"__esModule",{value:!0}),e.appVersion=t,e.default=void 0
var n=Ember.Helper.helper(t)
e.default=n}),define("dummy/helpers/append",["exports","ember-composable-helpers/helpers/append"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"append",{enumerable:!0,get:function(){return s.append}})}),define("dummy/helpers/array",["exports","ember-composable-helpers/helpers/array"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"array",{enumerable:!0,get:function(){return s.array}})}),define("dummy/helpers/break-on",["exports","ember-cli-addon-docs/helpers/break-on"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/camelize",["exports","ember-cli-string-helpers/helpers/camelize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"camelize",{enumerable:!0,get:function(){return s.camelize}})}),define("dummy/helpers/cancel-all",["exports","ember-concurrency/helpers/cancel-all"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/capitalize",["exports","ember-cli-string-helpers/helpers/capitalize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"capitalize",{enumerable:!0,get:function(){return s.capitalize}})}),define("dummy/helpers/chunk",["exports","ember-composable-helpers/helpers/chunk"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"chunk",{enumerable:!0,get:function(){return s.chunk}})}),define("dummy/helpers/classify",["exports","ember-cli-string-helpers/helpers/classify"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"classify",{enumerable:!0,get:function(){return s.classify}})}),define("dummy/helpers/compact",["exports","ember-composable-helpers/helpers/compact"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/compute",["exports","ember-composable-helpers/helpers/compute"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"compute",{enumerable:!0,get:function(){return s.compute}})}),define("dummy/helpers/contains",["exports","ember-composable-helpers/helpers/contains"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"contains",{enumerable:!0,get:function(){return s.contains}})}),define("dummy/helpers/dasherize",["exports","ember-cli-string-helpers/helpers/dasherize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"dasherize",{enumerable:!0,get:function(){return s.dasherize}})}),define("dummy/helpers/dec",["exports","ember-composable-helpers/helpers/dec"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"dec",{enumerable:!0,get:function(){return s.dec}})}),define("dummy/helpers/drop",["exports","ember-composable-helpers/helpers/drop"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/eq",["exports","ember-truth-helpers/helpers/equal"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"equal",{enumerable:!0,get:function(){return s.equal}})}),define("dummy/helpers/filter-by",["exports","ember-composable-helpers/helpers/filter-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/filter",["exports","ember-composable-helpers/helpers/filter"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/find-by",["exports","ember-composable-helpers/helpers/find-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/flatten",["exports","ember-composable-helpers/helpers/flatten"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"flatten",{enumerable:!0,get:function(){return s.flatten}})})
define("dummy/helpers/group-by",["exports","ember-composable-helpers/helpers/group-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/gt",["exports","ember-truth-helpers/helpers/gt"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"gt",{enumerable:!0,get:function(){return s.gt}})}),define("dummy/helpers/gte",["exports","ember-truth-helpers/helpers/gte"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"gte",{enumerable:!0,get:function(){return s.gte}})}),define("dummy/helpers/has-next",["exports","ember-composable-helpers/helpers/has-next"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"hasNext",{enumerable:!0,get:function(){return s.hasNext}})}),define("dummy/helpers/has-previous",["exports","ember-composable-helpers/helpers/has-previous"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"hasPrevious",{enumerable:!0,get:function(){return s.hasPrevious}})}),define("dummy/helpers/href-to",["exports","ember-href-to/helpers/href-to"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"hrefTo",{enumerable:!0,get:function(){return s.hrefTo}})}),define("dummy/helpers/html-safe",["exports","ember-cli-string-helpers/helpers/html-safe"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"htmlSafe",{enumerable:!0,get:function(){return s.htmlSafe}})}),define("dummy/helpers/humanize",["exports","ember-cli-string-helpers/helpers/humanize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"humanize",{enumerable:!0,get:function(){return s.humanize}})}),define("dummy/helpers/ignore-children",["exports","ember-ignore-children-helper/helpers/ignore-children"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"ignoreChildren",{enumerable:!0,get:function(){return s.ignoreChildren}})}),define("dummy/helpers/inc",["exports","ember-composable-helpers/helpers/inc"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"inc",{enumerable:!0,get:function(){return s.inc}})}),define("dummy/helpers/intersect",["exports","ember-composable-helpers/helpers/intersect"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/invoke",["exports","ember-composable-helpers/helpers/invoke"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"invoke",{enumerable:!0,get:function(){return s.invoke}})}),define("dummy/helpers/is-after",["exports","ember-moment/helpers/is-after"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-array",["exports","ember-truth-helpers/helpers/is-array"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"isArray",{enumerable:!0,get:function(){return s.isArray}})}),define("dummy/helpers/is-before",["exports","ember-moment/helpers/is-before"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-between",["exports","ember-moment/helpers/is-between"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-clipboard-supported",["exports","ember-cli-clipboard/helpers/is-clipboard-supported"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"isClipboardSupported",{enumerable:!0,get:function(){return s.isClipboardSupported}})}),define("dummy/helpers/is-empty",["exports","ember-truth-helpers/helpers/is-empty"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-equal",["exports","ember-truth-helpers/helpers/is-equal"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"isEqual",{enumerable:!0,get:function(){return s.isEqual}})}),define("dummy/helpers/is-same-or-after",["exports","ember-moment/helpers/is-same-or-after"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-same-or-before",["exports","ember-moment/helpers/is-same-or-before"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/is-same",["exports","ember-moment/helpers/is-same"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/join",["exports","ember-composable-helpers/helpers/join"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/lf-lock-model",["exports","liquid-fire/helpers/lf-lock-model"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"lfLockModel",{enumerable:!0,get:function(){return s.lfLockModel}})}),define("dummy/helpers/lf-or",["exports","liquid-fire/helpers/lf-or"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"lfOr",{enumerable:!0,get:function(){return s.lfOr}})}),define("dummy/helpers/lowercase",["exports","ember-cli-string-helpers/helpers/lowercase"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"lowercase",{enumerable:!0,get:function(){return s.lowercase}})}),define("dummy/helpers/lt",["exports","ember-truth-helpers/helpers/lt"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"lt",{enumerable:!0,get:function(){return s.lt}})}),define("dummy/helpers/lte",["exports","ember-truth-helpers/helpers/lte"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"lte",{enumerable:!0,get:function(){return s.lte}})}),define("dummy/helpers/map-by",["exports","ember-composable-helpers/helpers/map-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/map",["exports","ember-composable-helpers/helpers/map"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})})
define("dummy/helpers/media",["exports","ember-responsive/helpers/media"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"media",{enumerable:!0,get:function(){return s.media}})}),define("dummy/helpers/moment-add",["exports","ember-moment/helpers/moment-add"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-calendar",["exports","ember-moment/helpers/moment-calendar"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-diff",["exports","ember-moment/helpers/moment-diff"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-duration",["exports","ember-moment/helpers/moment-duration"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-format",["exports","ember-moment/helpers/moment-format"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-from-now",["exports","ember-moment/helpers/moment-from-now"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-from",["exports","ember-moment/helpers/moment-from"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-subtract",["exports","ember-moment/helpers/moment-subtract"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-to-date",["exports","ember-moment/helpers/moment-to-date"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-to-now",["exports","ember-moment/helpers/moment-to-now"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-to",["exports","ember-moment/helpers/moment-to"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment-unix",["exports","ember-moment/helpers/unix"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/moment",["exports","ember-moment/helpers/moment"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/next",["exports","ember-composable-helpers/helpers/next"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"next",{enumerable:!0,get:function(){return s.next}})}),define("dummy/helpers/not-eq",["exports","ember-truth-helpers/helpers/not-equal"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"notEq",{enumerable:!0,get:function(){return s.notEq}})}),define("dummy/helpers/not",["exports","ember-truth-helpers/helpers/not"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"not",{enumerable:!0,get:function(){return s.not}})}),define("dummy/helpers/now",["exports","ember-moment/helpers/now"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/object-at",["exports","ember-composable-helpers/helpers/object-at"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"objectAt",{enumerable:!0,get:function(){return s.objectAt}})}),define("dummy/helpers/optional",["exports","ember-composable-helpers/helpers/optional"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"optional",{enumerable:!0,get:function(){return s.optional}})}),define("dummy/helpers/or",["exports","ember-truth-helpers/helpers/or"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"or",{enumerable:!0,get:function(){return s.or}})}),define("dummy/helpers/perform",["exports","ember-concurrency/helpers/perform"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/pipe-action",["exports","ember-composable-helpers/helpers/pipe-action"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/pipe",["exports","ember-composable-helpers/helpers/pipe"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"pipe",{enumerable:!0,get:function(){return s.pipe}})}),define("dummy/helpers/pluralize",["exports","ember-inflector/lib/helpers/pluralize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/helpers/previous",["exports","ember-composable-helpers/helpers/previous"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"previous",{enumerable:!0,get:function(){return s.previous}})}),define("dummy/helpers/queue",["exports","ember-composable-helpers/helpers/queue"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"queue",{enumerable:!0,get:function(){return s.queue}})}),define("dummy/helpers/range",["exports","ember-composable-helpers/helpers/range"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"range",{enumerable:!0,get:function(){return s.range}})}),define("dummy/helpers/reduce",["exports","ember-composable-helpers/helpers/reduce"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/reject-by",["exports","ember-composable-helpers/helpers/reject-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})})
define("dummy/helpers/repeat",["exports","ember-composable-helpers/helpers/repeat"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"repeat",{enumerable:!0,get:function(){return s.repeat}})}),define("dummy/helpers/reverse",["exports","ember-composable-helpers/helpers/reverse"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/shuffle",["exports","ember-composable-helpers/helpers/shuffle"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"shuffle",{enumerable:!0,get:function(){return s.shuffle}})}),define("dummy/helpers/singularize",["exports","ember-inflector/lib/helpers/singularize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/helpers/slice",["exports","ember-composable-helpers/helpers/slice"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/sort-by",["exports","ember-composable-helpers/helpers/sort-by"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/svg-jar",["exports","ember-svg-jar/utils/make-helper","ember-svg-jar/utils/make-svg"],function(e,s,a){function t(e){try{return require("ember-svg-jar/inlined/".concat(e)).default}catch(s){return null}}function n(e,s){return(0,a.default)(e,s,t)}Object.defineProperty(e,"__esModule",{value:!0}),e.svgJar=n,e.default=void 0
var o=(0,s.default)(n)
e.default=o}),define("dummy/helpers/take",["exports","ember-composable-helpers/helpers/take"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/task",["exports","ember-concurrency/helpers/task"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/titleize",["exports","ember-cli-string-helpers/helpers/titleize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"titleize",{enumerable:!0,get:function(){return s.titleize}})}),define("dummy/helpers/toggle-action",["exports","ember-composable-helpers/helpers/toggle-action"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/toggle",["exports","ember-composable-helpers/helpers/toggle"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"toggle",{enumerable:!0,get:function(){return s.toggle}})}),define("dummy/helpers/trim",["exports","ember-cli-string-helpers/helpers/trim"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"trim",{enumerable:!0,get:function(){return s.trim}})}),define("dummy/helpers/truncate",["exports","ember-cli-string-helpers/helpers/truncate"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"truncate",{enumerable:!0,get:function(){return s.truncate}})}),define("dummy/helpers/type-signature",["exports","ember-cli-addon-docs/helpers/type-signature"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/underscore",["exports","ember-cli-string-helpers/helpers/underscore"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"underscore",{enumerable:!0,get:function(){return s.underscore}})}),define("dummy/helpers/union",["exports","ember-composable-helpers/helpers/union"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/unix",["exports","ember-moment/helpers/unix"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/helpers/uppercase",["exports","ember-cli-string-helpers/helpers/uppercase"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"uppercase",{enumerable:!0,get:function(){return s.uppercase}})}),define("dummy/helpers/utc",["exports","ember-moment/helpers/utc"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"utc",{enumerable:!0,get:function(){return s.utc}})}),define("dummy/helpers/w",["exports","ember-cli-string-helpers/helpers/w"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"w",{enumerable:!0,get:function(){return s.w}})}),define("dummy/helpers/without",["exports","ember-composable-helpers/helpers/without"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"without",{enumerable:!0,get:function(){return s.without}})}),define("dummy/helpers/xor",["exports","ember-truth-helpers/helpers/xor"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"xor",{enumerable:!0,get:function(){return s.xor}})}),define("dummy/initializers/active-model-adapter",["exports","active-model-adapter","active-model-adapter/active-model-serializer"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t={name:"active-model-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("adapter:-active-model",s.default),e.register("serializer:-active-model",a.default)}}
e.default=t}),define("dummy/initializers/add-modals-container",["exports","ember-modal-dialog/initializers/add-modals-container"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a={name:"add-modals-container",initialize:s.default}
e.default=a}),define("dummy/initializers/app-version",["exports","ember-cli-app-version/initializer-factory","dummy/config/environment"],function(e,s,a){var t,n
Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,a.default.APP&&(t=a.default.APP.name,n=a.default.APP.version)
var o={name:"App Version",initialize:(0,s.default)(t,n)}
e.default=o}),define("dummy/initializers/component-styles",["exports","ember-component-css/initializers/component-styles","dummy/mixins/style-namespacing-extras"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return s.initialize}}),Ember.Component.reopen(a.default)}),define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",s.default),e.inject("container-debug-adapter:main","namespace","application:main")}}
e.default=a}),define("dummy/initializers/ember-cli-mirage",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={name:"ember-cli-mirage",initialize:function(){}}}),define("dummy/initializers/ember-concurrency",["exports","ember-concurrency/initializers/ember-concurrency"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})})
define("dummy/initializers/ember-data",["exports","ember-data/setup-container","ember-data"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t={name:"ember-data",initialize:s.default}
e.default=t}),define("dummy/initializers/ember-keyboard-first-responder-inputs",["exports","ember-keyboard/initializers/ember-keyboard-first-responder-inputs"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return s.initialize}})}),define("dummy/initializers/ember-responsive-breakpoints",["exports","ember-responsive/initializers/responsive"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/initializers/es2015-polyfills",["exports"],function(e){function s(){var e,s,a,t
Array.from||(Array.from=(e=Object.prototype.toString,s=function(s){return"function"==typeof s||"[object Function]"===e.call(s)},a=Math.pow(2,53)-1,t=function(e){var s=function(e){var s=Number(e)
return isNaN(s)?0:0!==s&&isFinite(s)?(s>0?1:-1)*Math.floor(Math.abs(s)):s}(e)
return Math.min(Math.max(s,0),a)},function(e){var a,n,o=Object(e)
if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined")
var r=arguments.length>1?arguments[1]:void 0
if(void 0!==r){if(!s(r))throw new TypeError("Array.from: when provided, the second argument must be a function")
arguments.length>2&&(a=arguments[2])}for(var l=t(o.length),i=s(this)?Object(new this(l)):new Array(l),d=0;d<l;)n=o[d],i[d]=r?void 0===a?r(n,d):r.call(a,n,d):n,d+=1
return i.length=l,i}))}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=s,e.default=void 0
var a={name:"es2015-polyfills",initialize:s}
e.default=a}),define("dummy/initializers/export-application-global",["exports","dummy/config/environment"],function(e,s){function a(){var e=arguments[1]||arguments[0]
if(!1!==s.default.exportApplicationGlobal){var a
if("undefined"!=typeof window)a=window
else if("undefined"!=typeof global)a=global
else{if("undefined"==typeof self)return
a=self}var t,n=s.default.exportApplicationGlobal
t="string"==typeof n?n:Ember.String.classify(s.default.modulePrefix),a[t]||(a[t]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete a[t]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=a,e.default=void 0
var t={name:"export-application-global",initialize:a}
e.default=t}),define("dummy/initializers/inject-media",["exports","ember-cli-addon-docs/initializers/inject-media"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return s.initialize}})}),define("dummy/initializers/liquid-fire",["exports","liquid-fire/ember-internals","liquid-fire/velocity-ext"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,(0,s.initialize)()
e.default={name:"liquid-fire",initialize:function(){}}}),define("dummy/instance-initializers/clear-double-boot",["exports","ember-cli-fastboot/instance-initializers/clear-double-boot"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/instance-initializers/ember-data",["exports","ember-data/initialize-store-service"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a={name:"ember-data",initialize:s.default}
e.default=a}),define("dummy/instance-initializers/ember-href-to",["exports","ember-href-to/href-to"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a={name:"ember-href-to",initialize:function(e){if("undefined"==typeof FastBoot){var a=function(a){var t="A"===a.target.tagName?a.target:function(e){if(e.closest)return e.closest("a")
for(e=e.parentElement;e&&"A"!==e.tagName;)e=e.parentElement
return e}(a.target)
t&&new s.default(e,a,t).maybeHandle()}
document.body.addEventListener("click",a),e.reopen({willDestroy:function(){return document.body.removeEventListener("click",a),this._super.apply(this,arguments)}})}}}
e.default=a}),define("dummy/instance-initializers/route-styles",["exports","ember-component-css/instance-initializers/route-styles"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return s.initialize}})}),define("dummy/locations/none",["exports","ember-cli-fastboot/locations/none"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/locations/router-scroll",["exports","ember-router-scroll/locations/router-scroll"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/mixins/style-namespacing-extras",["exports","ember-component-css/mixins/style-namespacing-extras"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/models/class",["exports","ember-cli-addon-docs/models/class"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/models/comment",["exports","ember-data","ember-cli-addon-docs/utils/compile-markdown"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=s.default.Model.extend({user:s.default.belongsTo(),body:s.default.attr(),permalink:s.default.attr(),createdAt:s.default.attr(),htmlBody:Ember.computed("body",function(){return Ember.String.htmlSafe((0,a.default)(this.body))})})
e.default=t}),define("dummy/models/component",["exports","ember-cli-addon-docs/models/component"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/models/module",["exports","ember-cli-addon-docs/models/module"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/models/post",["exports","ember-data","js-yaml","ember-cli-addon-docs/utils/compile-markdown"],function(e,s,a,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=s.default.Model.extend({comments:s.default.hasMany(),title:s.default.attr(),body:s.default.attr(),issueUrl:s.default.attr(),htmlBody:Ember.computed("body",function(){return Ember.String.htmlSafe((0,t.default)(this.body))}),meta:Ember.computed("body",function(){var e=this.body.split("\n").map(function(e){return e.trim()})
if("\x3c!--"===e[0]){var s=e.indexOf("--\x3e"),t=e.slice(1,s)
return a.default.safeLoad("".concat(t.join("\n")))}}),slugAndId:Ember.computed("slug","id",function(){return"".concat(this.meta.slug,"-").concat(this.id)})})
e.default=n}),define("dummy/models/project",["exports","ember-cli-addon-docs/models/project"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/models/user",["exports","ember-data"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default.Model.extend({avatarUrl:s.default.attr(),profileUrl:s.default.attr(),username:s.default.attr()})
e.default=a}),define("dummy/pods/application/controller",["exports","ember-cli-addon-docs/controllers/application"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default.extend()
e.default=a}),define("dummy/pods/application/route",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Route.extend({beforeModel:function(){var e=window.location.pathname;["v0.0.27","v0.0.28","v0.0.29","v0.1.x","v0.2.x","v0.3.x","v0.4.x"].forEach(function(s){e.match("/docs/".concat(s))&&(window.location=e.replace("/docs/".concat(s),"/versions/".concat(s)))})}})
e.default=s}),define("dummy/pods/application/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"/ucamDAq",block:'{"symbols":["header"],"statements":[[4,"docs-header",null,null,{"statements":[[4,"component",[[29,"-assert-implicit-component-helper-argument",[[24,1,["link"]],"expected `header.link` to be a contextual component but found a string. Did you mean `(component header.link)`? (\'dummy/pods/application/template.hbs\' @ L2:C5) "],null],"blog"],null,{"statements":[[0,"    Blog\\n"]],"parameters":[]},null]],"parameters":[1]},null],[0,"\\n"],[1,[23,"outlet"],false],[0,"\\n\\n"],[1,[23,"docs-keyboard-shortcuts"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/application/template.hbs"}})
e.default=s}),define("dummy/pods/blog/detail/route",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Route.extend({model:function(e){var s=e.post_slug_and_id.match(/\d+$/)
if(!s){var a=document.location.pathname.replace(/^\/|\/$/g,"")
this.transitionTo("not-found",a)}var t=s[0]
return this.store.findRecord("post",t)}})
e.default=s}),define("dummy/pods/blog/detail/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"pr24l5G/",block:'{"symbols":["comment"],"statements":[[7,"div"],[11,"class","blog-detail docs-md"],[9],[0,"\\n"],[4,"link-to",["blog"],[["class"],["blog-detail__back-link"]],{"statements":[[0,"    ← All posts\\n"]],"parameters":[]},null],[0,"\\n  "],[7,"div"],[11,"class","docs-md"],[9],[0,"\\n    "],[7,"time"],[12,"datetime",[25,["model","meta","publishedAt"]]],[9],[0,"\\n      "],[1,[29,"moment-format",[[25,["model","meta","publishedAt"]],"MMMM D, YYYY"],null],false],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"h1"],[11,"class","docs-md__h1"],[9],[0,"\\n      "],[1,[25,["model","title"]],false],[0,"\\n    "],[10],[0,"\\n\\n    "],[1,[25,["model","htmlBody"]],false],[0,"\\n  "],[10],[0,"\\n\\n  "],[7,"hr"],[11,"class","blog-detail__hr"],[9],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","blog-detail__comments"],[9],[0,"\\n    "],[7,"h2"],[9],[0,"Comments"],[10],[0,"\\n\\n"],[4,"each",[[25,["model","comments"]]],null,{"statements":[[0,"      "],[7,"div"],[11,"class","blog-detail__comment"],[9],[0,"\\n        "],[7,"a"],[11,"class","blog-detail__comment-profile-link"],[12,"href",[24,1,["user","profileUrl"]]],[9],[0,"\\n          "],[7,"img"],[11,"class","blog-detail__comment-avatar"],[12,"src",[24,1,["user","avatarUrl"]]],[11,"alt","profile"],[9],[10],[0,"\\n        "],[10],[0,"\\n\\n        "],[7,"div"],[11,"class","blog-detail__comment-body"],[9],[0,"\\n          "],[7,"p"],[11,"class","blog-detail__comment-info"],[9],[0,"\\n            "],[7,"a"],[11,"class","blog-detail__username-link"],[12,"href",[24,1,["user","profileUrl"]]],[9],[0,"\\n              "],[1,[24,1,["user","username"]],false],[0,"\\n            "],[10],[0,"\\n            commented\\n            "],[7,"a"],[11,"class","blog-detail__comment-permalink"],[12,"href",[24,1,["permalink"]]],[9],[0,"\\n              "],[1,[29,"moment-from",[[24,1,["createdAt"]]],null],false],[0,"\\n            "],[10],[0,"\\n          "],[10],[0,"\\n          "],[1,[24,1,["htmlBody"]],false],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n"]],"parameters":[1]},null],[0,"\\n    "],[7,"p"],[11,"class","blog-detail__comments-github-byline"],[9],[0,"\\n      Want to chime in?\\n      "],[7,"a"],[12,"href",[25,["model","issueUrl"]]],[11,"class","blog-detail__comments-github-link"],[9],[0,"\\n"],[0,"        View the thread on GitHub"],[10],[0,".\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/blog/detail/template.hbs"}})
e.default=s}),define("dummy/pods/blog/error/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"MbF1QynP",block:'{"symbols":[],"statements":[[7,"h2"],[9],[0,"We\'re sorry..."],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"\\n  "],[1,[25,["model","responseJSON","message"]],false],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/blog/error/template.hbs"}})
e.default=s}),define("dummy/pods/blog/index/route",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Route.extend({model:function(){return this.store.findAll("post")}})
e.default=s}),define("dummy/pods/blog/index/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"JjZwEa2r",block:'{"symbols":["post"],"statements":[[7,"div"],[11,"class","blog-index"],[9],[0,"\\n  "],[7,"h1"],[9],[0,"Blog"],[10],[0,"\\n\\n"],[4,"each",[[29,"sort-by",["meta.publishedAt:desc",[25,["model"]]],null]],null,{"statements":[[0,"    "],[7,"section"],[9],[0,"\\n      "],[7,"time"],[12,"datetime",[24,1,["meta","publishedAt"]]],[9],[0,"\\n        "],[1,[29,"moment-format",[[24,1,["meta","publishedAt"]],"MMMM D, YYYY"],null],false],[0,"\\n      "],[10],[0,"\\n      "],[7,"h2"],[9],[0,"\\n"],[4,"link-to",["blog.detail",[24,1,["slugAndId"]]],null,{"statements":[[0,"          "],[1,[24,1,["title"]],false],[0,"\\n"]],"parameters":[]},null],[0,"      "],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[1]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/blog/index/template.hbs"}})
e.default=s}),define("dummy/pods/blog/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"jj8QINeY",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","blog"],[9],[0,"\\n  "],[7,"div"],[11,"class","blog__placeholder"],[9],[0,"\\n  "],[10],[0,"\\n  "],[7,"div"],[11,"class","blog__content"],[9],[0,"\\n    "],[1,[23,"outlet"],false],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/blog/template.hbs"}})
e.default=s})
define("dummy/pods/docs-old/advanced/defining-relationships/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"vQpOafur",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","defining-relationships"],[11,"class","docs-md__h1"],[9],[0,"Defining relationships"],[10],[0,"\\n    "],[7,"p"],[9],[0,"In modern versions of Mirage (0.3.3 and later), Mirage\'s relationships are inferred from your Ember Data schema."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you are not using Ember Data or are on an older version of Mirage, you can manually define Mirage\'s Models so that you can take advantage of its many features that rely on the ORM, like Serializers and Factories."],[10],[0,"\\n"],[7,"p"],[9],[0,"To define associations, use the "],[7,"code"],[9],[0,"belongsTo"],[10],[0," and "],[7,"code"],[9],[0,"hasMany"],[10],[0," helpers. Each helper adds some dynamic methods to your model."],[10],[0,"\\n"],[7,"p"],[9],[7,"em"],[9],[0,"belongsTo"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/blog-post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This adds an "],[7,"code"],[9],[0,"authorId"],[10],[0," property to your "],[7,"code"],[9],[0,"blogPost"],[10],[0," model, as well as some methods for working with the associated "],[7,"code"],[9],[0,"author"],[10],[0," model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"blogPost.authorId;                "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// 1"],[10],[0,"\\nblogPost.authorId = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,";            "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// updates the relationship"],[10],[0,"\\nblogPost.author;                  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Author instance"],[10],[0,"\\nblogPost.author = anotherAuthor;\\nblogPost.newAuthor(attrs);        "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// new unsaved author"],[10],[0,"\\nblogPost.createAuthor(attrs);     "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// new saved author (updates blogPost.authorId in memory only)"],[10],[10],[10],[0,""],[7,"p"],[9],[0,"Note that when a child calls "],[7,"code"],[9],[0,"child.createParent"],[10],[0,", the new parent is immediately saved to the "],[7,"code"],[9],[0,"db"],[10],[0,", but the child\'s foreign key is updated "],[7,"em"],[9],[0,"on this instance only"],[10],[0,", and is not immediately persisted to the database."],[10],[0,"\\n"],[7,"p"],[9],[0,"In other words, "],[7,"code"],[9],[0,"blogPost.createAuthor"],[10],[0," will create a new "],[7,"code"],[9],[0,"author"],[10],[0," record, insert it into the "],[7,"code"],[9],[0,"db"],[10],[0,", and update the "],[7,"code"],[9],[0,"blogPost.authorId"],[10],[0," in memory, but if you were to fetch the "],[7,"code"],[9],[0,"blogPost"],[10],[0," from the "],[7,"code"],[9],[0,"db"],[10],[0," again, the relationship would not be persisted."],[10],[0,"\\n"],[7,"p"],[9],[0,"To persist the new foreign key, you would call "],[7,"code"],[9],[0,"blogPost.save()"],[10],[0," after creating the new author."],[10],[0,"\\n"],[7,"p"],[9],[7,"em"],[9],[0,"hasMany"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/blog-post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"comments"],[10],[0,": hasMany()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This adds a "],[7,"code"],[9],[0,"commentIds"],[10],[0," property to the "],[7,"code"],[9],[0,"blogPost"],[10],[0," model, as well as some methods for working with the associated "],[7,"code"],[9],[0,"comments"],[10],[0," collection:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"blogPost.commentIds;                      "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// [1, 2, 3]"],[10],[0,"\\nblogPost.commentIds = ["],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,"];             "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// updates the relationship"],[10],[0,"\\nblogPost.comments;                        "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// array of related comments"],[10],[0,"\\nblogPost.comments = [comment1, comment2]; "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// updates the relationship"],[10],[0,"\\nblogPost.newComment(attrs);               "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// new unsaved comment"],[10],[0,"\\nblogPost.createComment(attrs);            "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// new saved comment (comment.blogPostId is set)"],[10],[10],[10],[0,"\\n      "],[7,"h3"],[11,"id","association-options"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#association-options"],[11,"class","heading-anchor"],[9],[0,"Association options"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"em"],[9],[0,"modelName"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"If your associations model has a different name than the association itself, you can specify the "],[7,"code"],[9],[0,"modelName"],[10],[0," on the association."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example,"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/blog-post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,"),\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"comments"],[10],[0,": hasMany("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'annotation\'"],[10],[0,")\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"would add all the named "],[7,"code"],[9],[0,"author"],[10],[0," and "],[7,"code"],[9],[0,"comment"],[10],[0," methods as listed above, but use "],[7,"code"],[9],[0,"user"],[10],[0," and "],[7,"code"],[9],[0,"annotation"],[10],[0," models for the actual relationships."],[10],[0,"\\n"],[7,"p"],[9],[7,"em"],[9],[0,"inverse"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"Sometimes a "],[7,"code"],[9],[0,"hasMany"],[10],[0," relationship can point to a model with multiple associations of the same type. You can use the "],[7,"code"],[9],[0,"inverse"],[10],[0," option to specify which property on the related model is the inverse of the given relationship:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/talk.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"primaryEvent"],[10],[0,": belongsTo("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'event\'"],[10],[0,"),\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"secondaryEvent"],[10],[0,": belongsTo("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'event\'"],[10],[0,"),\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/event.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"talks"],[10],[0,": hasMany("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'talk\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"inverse"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'primaryEvent\'"],[10],[0," }),\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"em"],[9],[0,"polymorphic"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"You can specify whether an association is a polymorphic association by passing "],[7,"code"],[9],[0,"{ polymorphic: true }"],[10],[0," as an option."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, say you have a "],[7,"code"],[9],[0,"Comment"],[10],[0," that can belong to a "],[7,"code"],[9],[0,"BlogPost"],[10],[0," or a "],[7,"code"],[9],[0,"Picture"],[10],[0,". Here\'s how the model definitions would look:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/comment.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"commentable"],[10],[0,": belongsTo({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"polymorphic"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," })\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/blog-post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"comments"],[10],[0,": hasMany()\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/picture.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"comments"],[10],[0,": hasMany()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that "],[7,"code"],[9],[0,"commentable"],[10],[0," doesn\'t need a type (there\'s no validation done on which types of models can exist on that association)."],[10],[0,"\\n"],[7,"p"],[9],[0,"Polymorphic associations have slightly different method signatures for their foreign keys and build/create methods."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," comment = schema.comments.create({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"text"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"foo\\""],[10],[0," });\\n\\ncomment.buildCommentable("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem Ipsum\'"],[10],[0," });\\ncomment.createCommentable("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem Ipsum\'"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// getter"],[10],[0,"\\ncomment.commentableId; "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// { id: 1, type: \'blog-post\' }"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// setter"],[10],[0,"\\ncomment.commentableId = { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'picture\'"],[10],[0," };"],[10],[10],[0,""],[7,"p"],[9],[0,"Has-many asssociations can also be polymorphic:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"things"],[10],[0,": hasMany({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"polymorphic"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," })\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/car.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// app/models/watch.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," user = schema.users.create({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"Sam\\""],[10],[0," });\\n\\nuser.buildThing("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'car\'"],[10],[0,", { attrs });\\nuser.createThing("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'watch\'"],[10],[0,", { attrs });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// getter"],[10],[0,"\\nuser.thingIds; "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// [ { id: 1, type: \'car\' }, { id: 3, type: \'watch\' }, ... ]"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// setter"],[10],[0,"\\nuser.thingIds = [ { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'watch\'"],[10],[0," }, ... ];"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/defining-relationships/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/environment-options/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"ebEtLR6j",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","environment-options"],[11,"class","docs-md__h1"],[9],[0,"Environment options"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Set these options via the "],[7,"code"],[9],[0,"ENV[\'ember-cli-mirage\']"],[10],[0," variable in your "],[7,"code"],[9],[0,"config/environment.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// config/environment.js"],[10],[0,"\\n...\\nif (environment === "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'production\'"],[10],[0,") {\\n  ENV["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,"] = {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"enabled"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n  };\\n}"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","enabled"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#enabled"],[11,"class","heading-anchor"],[9],[0,"enabled"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"By default, your Mirage server will run in test mode, and in development mode as long as the "],[7,"code"],[9],[0,"--proxy"],[10],[0," option isn\'t passed. To change this default behavior, set "],[7,"code"],[9],[0,"enabled"],[10],[0," to either true or false in your ENV config."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, to enable in production (e.g. to share a working prototype before your server is ready):"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// config/environment.js"],[10],[0,"\\n...\\nif (environment === "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'production\'"],[10],[0,") {\\n  ENV["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,"] = {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"enabled"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n  };\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"To disable in development,"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// config/environment.js"],[10],[0,"\\n...\\nif (environment === "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'development\'"],[10],[0,") {\\n  ENV["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,"] = {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"enabled"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0,"\\n  };\\n}"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","excludefilesfrombuild"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#excludefilesfrombuild"],[11,"class","heading-anchor"],[9],[0,"excludeFilesFromBuild"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Defaults to "],[7,"code"],[9],[0,"false"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"By default, Mirage\'s files are included in your Ember app\'s build in non-production environments. This is in case you want to use Mirage via "],[7,"code"],[9],[0,"ember serve"],[10],[0," by visiting "],[7,"code"],[9],[0,"/tests"],[10],[0,", since that\'s an app with a build-time environment of "],[7,"code"],[9],[0,"development"],[10],[0," but a run-time environment of "],[7,"code"],[9],[0,"test"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can explicilty exclude Mirage\'s files from your Ember app\'s build by setting "],[7,"code"],[9],[0,"excludeFilesFromBuild"],[10],[0," to "],[7,"code"],[9],[0,"true"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","usedefaultpassthroughs"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#usedefaultpassthroughs"],[11,"class","heading-anchor"],[9],[0,"useDefaultPassthroughs"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Defaults to "],[7,"code"],[9],[0,"true"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"If true, Mirage will add some default passthrough routes to your server. Currently we add a single route"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"http://localhost:0/chromecheckurl"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"which is used by iOS for URL verification."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","directory"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#directory"],[11,"class","heading-anchor"],[9],[0,"directory"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Configure which directory contains your Mirage server definition. The default directory is "],[7,"code"],[9],[0,"/mirage"],[10],[0," (from the root of your project)."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, to have your server definition under "],[7,"code"],[9],[0,"/app/mirage"],[10],[0,","],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// config/environment.js"],[10],[0,"\\n...\\nENV["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,"] = {\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directory"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'app/mirage\'"],[10],[0,"\\n};"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/environment-options/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/factories/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"pmO+yvaz",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","factories"],[11,"class","docs-md__h1"],[9],[0,"Factories"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Factories are used to seed your database, either during development or within tests. Whenever you generate an object via a factory, it will automatically get added to the database, and thus get an autogenerated "],[7,"code"],[9],[0,"id"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"You define factories by using the "],[7,"code"],[9],[0,"ember g mirage-factory [name]"],[10],[0," command, or creating files under the "],[7,"code"],[9],[0,"mirage/factories"],[10],[0," directory. The name of the factory is determined by the filename."],[10],[0,"\\n"],[7,"p"],[9],[0,"Factories have attributes, and you create objects from factory definitions using the "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0," methods."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","defining-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#defining-factories"],[11,"class","heading-anchor"],[9],[0,"Defining factories"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Attributes can be static (strings, numbers or booleans) or dynamic (a function). Here\'s a factory with some static attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"563"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"evil"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0,",\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Functions receive the sequence number "],[7,"em"],[9],[0,"i"],[10],[0," as an argument, which is useful to create dynamic attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  name(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'User \'"],[10],[0," + i\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The first user generated (per test) would have a name of "],[7,"code"],[9],[0,"User 0"],[10],[0,", the second a name of "],[7,"code"],[9],[0,"User 1"],[10],[0,", and so on."],[10],[0,"\\n"],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"Referencing other attributes from within dynamic attributes is only available in 2.4 and later."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Finally, you can also reference attributes from within a dynamic attribute via "],[7,"code"],[9],[0,"this"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/contact.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"18"],[10],[0,",\\n\\n  isAdmin(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".age > "],[7,"span"],[11,"class","hljs-number"],[9],[0,"30"],[10],[0,";\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This even works with other dynamic attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/contact.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  email(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`email"],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"@acme.com`"],[10],[0,";\\n  },\\n\\n  isAdmin(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".email === "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'email1@acme.com\'"],[10],[0,";\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You\'ll get an error if you create an invalid cycle of dynamic attributes."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also customize the objects created by your factory using the\\n"],[7,"code"],[9],[0,"afterCreate()"],[10],[0," hook. This hook fires after the object is built (so all the\\nattributes you\'ve defined will be populated) but before that object is returned."],[10],[0,"\\n"],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"afterCreate()"],[10],[0," method is given two arguments: the newly created object, and\\na reference to the server. This makes it useful if you want your factory-created\\nobjects to be aware of the rest of the state of your Mirage database, or build\\nrelationships (as we\'ll see in a moment):"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/contact.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  isAdmin(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".random() > "],[7,"span"],[11,"class","hljs-number"],[9],[0,"0.5"],[10],[0,";\\n  },\\n\\n  afterCreate(contact, server) {\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Only allow a max of 5 admins to be created"],[10],[0,"\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (server.schema.contacts.where({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isAdmin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," }).models.length >= "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,") {\\n      contact.update({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isAdmin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0," });\\n    }\\n  }\\n\\n});"],[10],[10],[0,""],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"You should define the attributes of your factory as the \\"base case\\" for your objects, and override them within your tests. We\'ll discuss how do to this in the Creating Objects section."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","working-with-relationships"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#working-with-relationships"],[11,"class","heading-anchor"],[9],[0,"Working with relationships"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"When building objects using factories, you may want to create related objects automatically. To build related objects for "],[7,"code"],[9],[0,"belongsTo"],[10],[0," relationships, you can use "],[7,"code"],[9],[0,"association"],[10],[0," helper."],[10],[0,"\\n"],[7,"p"],[9],[0,"Start with defining relationships in your models so that they can be introspected for the details like relationship name:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/article.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n});"],[10],[10],[0,""],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend();"],[10],[10],[0,""],[7,"p"],[9],[0,"And simply indicate which attributes are "],[7,"code"],[9],[0,"association"],[10],[0,"s:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/article.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, association } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage rockzzz\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": association()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also pass a list of traits and overrides as arguments to "],[7,"code"],[9],[0,"association"],[10],[0," helper:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"withNames"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Yehuda\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"lastName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Katz\'"],[10],[0,"\\n  })\\n});"],[10],[10],[0,""],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/article.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, association } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage rockzzz\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": association("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'withNames\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"lastName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dale\'"],[10],[0," })\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also use the "],[7,"code"],[9],[0,"afterCreate()"],[10],[0," hook (for both "],[7,"code"],[9],[0,"hasMany"],[10],[0," and "],[7,"code"],[9],[0,"belongsTo"],[10],[0," relationships):"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  firstName(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Author "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  },\\n\\n  afterCreate(author, server) {\\n    server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", { author });\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Because the "],[7,"code"],[9],[0,"afterCreate()"],[10],[0," hook is called with the newly created object and a reference to the server, you can construct complex object graphs to associate with your newly created object."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","traits"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#traits"],[11,"class","heading-anchor"],[9],[0,"Traits"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Factory traits make it easy to group related attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"published"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isPublished"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"publishedAt"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2010-01-01 10:00:00\'"],[10],[0,"\\n  })\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can pass anything into "],[7,"code"],[9],[0,"trait"],[10],[0," that you can into the base factory."],[10],[0,"\\n"],[7,"p"],[9],[0,"To use a trait, pass the trait name in as string argument to "],[7,"code"],[9],[0,"server.create"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also compose multiple traits together:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"published"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isPublished"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"publishedAt"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2010-01-01 10:00:00\'"],[10],[0,"\\n  }),\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"official"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isOfficial"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n  })\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Use"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," officialPost = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'official\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," officialPublishedPost = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'official\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"As always, you can pass in an "],[7,"code"],[9],[0,"attrs"],[10],[0," hash as the last argument for attribute overrides:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0," });"],[10],[10],[0,""],[7,"p"],[9],[0,"When combined with the "],[7,"code"],[9],[0,"afterCreate()"],[10],[0," hook, traits simplify the process of setting up related object graphs. Here we create 10 posts each having 3 associated comments:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"published"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isPublished"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"publishedAt"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2010-01-01 10:00:00\'"],[10],[0,"\\n  }),\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"withComments"],[10],[0,": trait({\\n    afterCreate(post, server) {\\n      server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'comment\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", { post });\\n    }\\n  })\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Use"],[10],[0,"\\nserver.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'withComments\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Traits improve your test suite by pulling unnecessary knowledge about data setup out of your tests. If you\'re writing a test module to verify the behavior of a comment box on a blog post page, each test will need a post to exist as part of its setup. If a post requires a user, and that user requires a session and perhaps a subscription, you don\'t want to repeat this knowledge in each of your comment tests. Instead, create a trait that has meaning within your domain - say, a published post - to simplify the data setup needed to write each of your comment tests. This leads to a more concise, expressive test suite, which will help future developers who come into your codebase better understand the expected behavior of your application."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","using-faker-js"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-faker-js"],[11,"class","heading-anchor"],[9],[0,"Using Faker.js"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The "],[7,"a"],[11,"href","https://github.com/marak/Faker.js/"],[11,"class","docs-md__a"],[9],[0,"Faker.js"],[10],[0," library pairs nicely with with Mirage factories. It used to be directly included with Mirage, since import npm libraries was a hassle, but with the advent of "],[7,"a"],[11,"href","https://github.com/ef4/ember-auto-import/issues"],[11,"class","docs-md__a"],[9],[0,"Ember Auto Import"],[10],[0," it is easier than ever for apps and addons to include it on their own."],[10],[0,"\\n"],[7,"p"],[9],[0,"To use Faker, make sure your app or addon has Auto Import installed, then install "],[7,"code"],[9],[0,"faker"],[10],[0," from npm:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"ember install ember-auto-import\\nyarn add -D faker"],[10],[10],[0,""],[7,"p"],[9],[0,"Now you can use Faker\'s methods in your Mirage factories:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," faker "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'faker\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  firstName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n  lastName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.lastName();\\n  },\\n  avatar() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.internet.avatar();\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You of course can use alternatives to Faker, like "],[7,"a"],[11,"href","https://chancejs.com/"],[11,"class","docs-md__a"],[9],[0,"Chance.js"],[10],[0,", in a similar way."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","extending-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#extending-factories"],[11,"class","heading-anchor"],[9],[0,"Extending factories"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can extend factories:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/human.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"species"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'homo sapiens\'"],[10],[0,"\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/man.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," Human "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./human\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Human.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"gender"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'male\'"],[10],[0,"\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","creating-objects"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#creating-objects"],[11,"class","heading-anchor"],[9],[0,"Creating objects"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Once you\'ve defined a factory for a model, you can generate data for that model using "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0,", either from within "],[7,"code"],[9],[0,"mirage/scenarios/default.js"],[10],[0," for development, or from within your acceptance tests."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"name","create"],[11,"href","#create"],[9],[0,"#"],[10],[0," server."],[7,"b"],[9],[0,"create"],[10],[0,"("],[7,"i"],[9],[0,"type"],[10],[0," [, "],[7,"i"],[9],[0,"attrs"],[10],[0,"])"],[10],[0,"\\n"],[7,"p"],[9],[0,"Generates a single model of type "],[7,"em"],[9],[0,"type"],[10],[0,", inserts it into the database (giving it an id), and returns the data that was\\nadded."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view a contact\'s details\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," contact = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/\'"],[10],[0," + contact.id);\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1\'"],[10],[0,").text(), "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'The contact is Link\'"],[10],[0,");\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can override the attributes from the factory definition with a\\nhash passed in as the second parameter. For example, if we had this factory"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"we could override the name like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the contacts\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,"});\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'p\'"],[10],[0,").text(), "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"a"],[11,"name","createList"],[11,"href","#createList"],[9],[0,"#"],[10],[0," server."],[7,"b"],[9],[0,"createList"],[10],[0,"("],[7,"i"],[9],[0,"type"],[10],[0,", "],[7,"i"],[9],[0,"amount"],[10],[0," [, "],[7,"i"],[9],[0,"attrs"],[10],[0,"])"],[10],[0,"\\n"],[7,"p"],[9],[0,"Creates "],[7,"em"],[9],[0,"amount"],[10],[0," models of type "],[7,"em"],[9],[0,"type"],[10],[0,", optionally overriding the attributes from the factory with "],[7,"em"],[9],[0,"attrs"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Returns the array of records that were added to the database."],[10],[0,"\\n"],[7,"p"],[9],[0,"Here\'s an example from a test:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the contacts\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," youngContacts = server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"15"],[10],[0,"});\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    equal(currentRouteName(), "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'index\'"],[10],[0,");\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'p\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"And one from setting up your development database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," contact = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,");\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'address\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"contactId"],[10],[0,": contact.id});\\n}"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/factories/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/fixtures/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"gAch+Dix",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","fixtures"],[11,"class","docs-md__h1"],[9],[0,"Fixtures"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Fixtures are data files that can be used to seed your database, either during development or within tests. In general Mirage recommends using factories over fixtures, though there are times where fixtures are suitable."],[10],[0,"\\n"],[7,"p"],[9],[0,"To add data to a database table "],[7,"code"],[9],[0,"countries"],[10],[0,", for instance, first create the file "],[7,"code"],[9],[0,"mirage/fixtures/countries.js"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/fixtures/countries.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," [\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'United States\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Canada\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Mexido\'"],[10],[0,"},\\n  ...\\n];"],[10],[10],[0,""],[7,"p"],[9],[0,"Fixture filenames are always plural, and export arrays of POJOs."],[10],[0,"\\n"],[7,"p"],[9],[0,"To load this fixture file into our database during development, we can use the "],[7,"code"],[9],[0,"loadFixtures"],[10],[0," API in our "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.loadFixtures("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'countries\'"],[10],[0,");\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"We can also call "],[7,"code"],[9],[0,"server.loadFixtures()"],[10],[0," (with no arguments) to have all defined fixture files loaded into the database."],[10],[0,"\\n"],[7,"p"],[9],[0,"Similarly, we can call "],[7,"code"],[9],[0,"loadFixtures"],[10],[0," from within a test to load this data into our database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the countries\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.loadFixtures("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'countries\'"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'select.countries option\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"100"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"See the "],[7,"code"],[9],[0,"server.loadFixtures"],[10],[0," API docs for more information."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/fixtures/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/identity-managers/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"Mmb+AMsk",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","identity-managers"],[11,"class","docs-md__h1"],[9],[0,"Identity managers"],[10],[0,"\\n    "],[7,"p"],[9],[0,"By default Mirage uses auto incremental numbers starting with "],[7,"code"],[9],[0,"1"],[10],[0," as IDs for records. This could be customized by implementing "],[7,"em"],[9],[0,"identity managers"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"An identity manager is a class generating unique identifiers. You could provide a custom identity manager per application and per model."],[10],[0,"\\n"],[7,"p"],[9],[0,"A custom identity manager must implement these methods:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"code"],[9],[0,"fetch"],[10],[0,", which must return an identifier not used yet."],[10],[0,"\\n"],[7,"li"],[9],[7,"code"],[9],[0,"set"],[10],[0,", which is called with an "],[7,"code"],[9],[0,"id"],[10],[0," of a record being insert in mirage\'s database."],[10],[0,"\\n"],[7,"li"],[9],[7,"code"],[9],[0,"reset"],[10],[0,", which should reset database to initial state."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage provides a blueprint to generate custom identity managers: "],[7,"code"],[9],[0,"ember generate mirage-identity-manager <application|modelName>"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"For example an identity manager mocking UUIDs would look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { v4 "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"as"],[10],[0," getUuid } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"ember-uuid\\""],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-class"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"class"],[10],[0," "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"constructor"],[10],[0,"() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Set"],[10],[0,"();\\n  }\\n\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"/**\\n   * Returns an unique identifier.\\n   *\\n   * @method fetch\\n   * @param {Object} data Records attributes hash\\n   * @return {String} Unique identifier\\n   * @public\\n   */"],[10],[0,"\\n  fetch() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," uuid = getUuid();\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"while"],[10],[0," ("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids.has(uuid)) {\\n      uuid = getUuid();\\n    }\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids.add(uuid);\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," uuid;\\n  }\\n\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"/**\\n   * Register an identifier.\\n   * Must throw if identifier is already used.\\n   *\\n   * @method set\\n   * @param {String|Number} id\\n   * @public\\n   */"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"set"],[10],[0,"(id) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," ("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids.has(id)) {\\n      "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"throw"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Error"],[10],[0,"("],[7,"span"],[11,"class","hljs-string"],[9],[0,"`ID "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${id}"],[10],[0," is inuse.`"],[10],[0,");\\n    }\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids.add(id);\\n  }\\n\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"/**\\n   * Reset identity manager.\\n   *\\n   * @method reset\\n   * @public\\n   */"],[10],[0,"\\n  reset() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".ids.clear();\\n  }\\n}"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/identity-managers/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/route-handlers/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"D7Pd6Mqr",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","route-handlers"],[11,"class","docs-md__h1"],[9],[0,"Route handlers"],[10],[0,"\\n    "],[7,"p"],[9],[0,"You define route handlers using the verb methods ("],[7,"code"],[9],[0,"get"],[10],[0,", "],[7,"code"],[9],[0,"post"],[10],[0,", "],[7,"code"],[9],[0,"put"],[10],[0,"/"],[7,"code"],[9],[0,"patch"],[10],[0,", and "],[7,"code"],[9],[0,"del"],[10],[0,"). All handlers have the following signature:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".verb(path, handler[, responseCode, options={}]);"],[10],[10],[0,""],[7,"p"],[9],[0,"There are three types of route handlers: "],[7,"a"],[11,"href","#shorthands"],[11,"class","docs-md__a"],[9],[0,"shorthand"],[10],[0,", "],[7,"a"],[11,"href","#object-handler"],[11,"class","docs-md__a"],[9],[0,"object"],[10],[0,", and "],[7,"a"],[11,"href","#function-handler"],[11,"class","docs-md__a"],[9],[0,"function"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"The status code for all three types defaults to the following, based on the verb being used for the route:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"GET is 200"],[10],[0,"\\n"],[7,"li"],[9],[0,"PUT/PATCH is 204"],[10],[0,"\\n"],[7,"li"],[9],[0,"POST is 201"],[10],[0,"\\n"],[7,"li"],[9],[0,"DEL is 204"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"PUT/PATCH and POST change to 200 if there is a response body."],[10],[0,"\\n"],[7,"p"],[9],[0,"The optional "],[7,"code"],[9],[0,"options"],[10],[0," hash passed as the last parameter has "],[7,"code"],[9],[0,"timing"],[10],[0," and "],[7,"code"],[9],[0,"coalesce"],[10],[0," options."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"name","timing"],[11,"href","#timing"],[9],[0,"#"],[10],[0," options."],[7,"b"],[9],[0,"timing"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"Set the timing parameter of the response for this particular route. Default is a 400ms delay during development and 0 delay in testing (so your tests run fast)."],[10],[0,"\\n"],[7,"p"],[9],[0,"Note you can set a "],[7,"a"],[11,"href","/docs/api/modules/ember-cli-mirage/server~Server#timing"],[11,"class","docs-md__a"],[9],[0,"global timing parameter"],[10],[0," for all routes. Individual timing parameters override the global setting."],[10],[0,"\\n"],[7,"p"],[9],[0,"Example:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"timing"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1500"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/complex_query\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," ["],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"4"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,"];\\n}, { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"timing"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3000"],[10],[0," });"],[10],[10],[0,""],[7,"p"],[9],[0,"If you want to add delays to a particular test\'s routes, you can override the timing for individual tests by putting the timing parameter in your test"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Call this route with a delay\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.timing = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10000"],[10],[0,";\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Or for all tests in a particular module"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"module"],[10],[0,"("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Add delayed route calls to multiple tests\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.timing = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10000"],[10],[0,";\\n\\n  test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'It slowly calls a route\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n  });\\n\\n  test ("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'It slow calls another route\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Because the server is restarted after each test, you don\'t have to worry about this leaking into other tests."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"name","coalesce"],[11,"href","#coalesce"],[9],[0,"#"],[10],[0," options."],[7,"b"],[9],[0,"coalesce"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"This option only affects the "],[7,"a"],[11,"href","../shorthands/#get-shorthands"],[11,"class","docs-md__a"],[9],[7,"em"],[9],[0,"Array of Objects"],[10],[0," version of the GET shorthand"],[10],[0,". It is ignored by all other route handlers."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#shorthands"],[11,"class","heading-anchor"],[9],[0,"Shorthands"],[10],[10],[0,"\\n    "],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".verb(path, shorthand[, responseCode]);"],[10],[10],[0,""],[7,"p"],[9],[7,"em"],[9],[0,"shorthand"],[10],[0," can either be a string, an array, or "],[7,"code"],[9],[0,"undefined"],[10],[0,", depending on which shorthand you\'re using. View "],[7,"a"],[11,"href","../shorthands"],[11,"class","docs-md__a"],[9],[0,"the reference"],[10],[0," for all available shorthands."],[10],[0,"\\n"],[7,"p"],[9],[0,"Examples:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/authors\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/authors/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,");"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","object-handler"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#object-handler"],[11,"class","heading-anchor"],[9],[0,"Object handler"],[10],[10],[0,"\\n    "],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".verb(path, object[, responseCode]);"],[10],[10],[0,""],[7,"p"],[9],[7,"em"],[9],[0,"object"],[10],[0," is a POJO that\'s returned for this route."],[10],[0,"\\n"],[7,"p"],[9],[0,"Example:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/authors/current\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,"});\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/some/secret\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"message"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'unauthorized\'"],[10],[0,"}, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"404"],[10],[0,");"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","function-handler"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#function-handler"],[11,"class","heading-anchor"],[9],[0,"Function handler"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Write a custom function to handle this route."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".verb(path, (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// your code"],[10],[0,"\\n}[, responseCode]);"],[10],[10],[0,""],[7,"p"],[9],[0,"The function handler you define takes two parameters, "],[7,"strong"],[9],[0,"schema"],[10],[0," (your Mirage server\'s ORM) and "],[7,"strong"],[9],[0,"request"],[10],[0," (the Pretender request object). Consult "],[7,"a"],[11,"href","/docs/api/modules/ember-cli-mirage/orm/schema~Schema"],[11,"class","docs-md__a"],[9],[0,"the schema\'s API"],[10],[0," for how to interact with your models (or the database directly) and "],[7,"a"],[11,"href","https://github.com/trek/pretender"],[11,"class","docs-md__a"],[9],[0,"Pretender\'s docs"],[10],[0," for more info on the request object."],[10],[0,"\\n"],[7,"p"],[9],[0,"If the data returned from your handler is a JavaScript object or array, it will be stringified and sent as the response body of your request:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/events\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," events = [];\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"for"],[10],[0," ("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," i = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"0"],[10],[0,"; i < "],[7,"span"],[11,"class","hljs-number"],[9],[0,"100"],[10],[0,"; i++) {\\n    events.push({\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": i,\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"value"],[10],[0,": "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".random() * "],[7,"span"],[11,"class","hljs-number"],[9],[0,"100"],[10],[0,"\\n    });\\n  };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," events; "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// will be JSON.stringified by Mirage"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Returning a Model or Collection (from "],[7,"code"],[9],[0,"schema"],[10],[0,") lets you take advantage of the serializer layer."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/users/:id\'"],[10],[0,", ({ users }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," users.find(request.params.id);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This handler returns a User model, which will pass through the UserSerializer if one exists, or the ApplicationSerializer otherwise."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also return an instance of "],[7,"code"],[9],[0,"Response"],[10],[0," to dynamically set headers and the status code:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," Response "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage/response\'"],[10],[0,";"],[10],[10],[0,""],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/messages\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," params = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody);\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (!params.title) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," Response("],[7,"span"],[11,"class","hljs-number"],[9],[0,"422"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"some"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'header\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Content-Type\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'application/json\'"],[10],[0,"}, {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"errors"],[10],[0,": [{\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"status"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"422"],[10],[0,",\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'email is invalid\'"],[10],[0,",\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"description"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'email cannot be blank\'"],[10],[0,"\\n      }]\\n    });\\n  } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"else"],[10],[0," {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.messages.create(params);\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"If you return a string, it will not be "],[7,"code"],[9],[0,"JSON.stringified"],[10],[0,", so you can return responses other than JSON."],[10],[0,"\\n"],[7,"p"],[9],[0,"You may optionally return a promise resolving to any of the above, e.g.:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Promise"],[10],[0,"("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"resolve"],[10],[0," =>"],[10],[0," {\\n    resolve("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," Response("],[7,"span"],[11,"class","hljs-number"],[9],[0,"200"],[10],[0,", { "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Content-Type\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'text/csv\'"],[10],[0," }, "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'firstname,lastname\\\\nbob,dylan\'"],[10],[0,"));\\n  });\\n});"],[10],[10],[0,"\\n      "],[7,"h3"],[11,"id","helpers"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#helpers"],[11,"class","heading-anchor"],[9],[0,"Helpers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The following helpers are available in your function handlers."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"name","serialize"],[11,"href","#serialize"],[9],[0,"#"],[10],[0," this."],[7,"b"],[9],[0,"serialize"],[10],[0,"("],[7,"em"],[9],[0,"modelOrCollection"],[10],[0,"[, "],[7,"em"],[9],[0,"serializerName"],[10],[0,"])"],[10],[0,"\\n"],[7,"p"],[9],[0,"This helper returns the serialized JSON for the given "],[7,"em"],[9],[0,"modelOrCollection"],[10],[0,". It\'s useful if you want to do some final munging on the serialized JSON before returning it."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ authors }"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," json = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".serialize(authors.all());\\n\\n  json.meta = { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"page"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," json;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"By default this method uses the named serializer for the given Model or Collection. You can pass in a specific serializer via "],[7,"code"],[9],[0,"serializerName"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ authors }"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," json = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".serialize(authors.all(), "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'sparse-author\'"],[10],[0,");\\n\\n  json.meta = { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"page"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," json;\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"a"],[11,"name","normalizedRequestAttrs"],[11,"href","#normalizedRequestAttrs"],[9],[0,"#"],[10],[0," this."],[7,"b"],[9],[0,"normalizedRequestAttrs"],[10],[0,"("],[7,"em"],[9],[0,"[ modelName ]"],[10],[0,")"],[10],[0,"\\n"],[7,"p"],[9],[0,"This helper will return the body of a request in a normalized form, suitable for working with and creating records."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, if your Ember app makes a POST request with this data"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"POST /users\\n\\n{\\n  data: {\\n    type: \'users\',\\n    attributes: {\\n      \'first-name\': \'Conan\',\\n      \'middle-name\': \'the\',\\n      \'last-name\': \'Barbarian\'\\n    },\\n    relationships: {\\n      team: {\\n        data: {\\n          type: \'teams\',\\n          id: 1\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[7,"p"],[9],[0,"then "],[7,"code"],[9],[0,"normalizedRequestAttrs()"],[10],[0," could be used like this"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"/*\\n    attrs = {\\n      firstName: \'Conan\',\\n      middleName: \'the\',\\n      lastName: \'Barbarian\',\\n      teamId: \'1\'\\n    }\\n  */"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.users.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that attribute keys were camelCased, and the "],[7,"code"],[9],[0,"team"],[10],[0," foreign key was extracted. This is because a "],[7,"code"],[9],[0,"user"],[10],[0," owns the "],[7,"code"],[9],[0,"team"],[10],[0," foreign key; if another relationship were included in the request but the "],[7,"code"],[9],[0,"user"],[10],[0," did not own its foreign key, it would not have been extracted."],[10],[0,"\\n"],[7,"p"],[9],[0,"Note that this helper method leverages your serializer\'s "],[7,"code"],[9],[0,"normalize"],[10],[0," function. In the example above, it\'s assumed that the app was using the "],[7,"code"],[9],[0,"JSONAPISerializer"],[10],[0,", which comes with the "],[7,"code"],[9],[0,"#normalize"],[10],[0," method already written. If you\'re not using one of the bundled serializers, you\'ll need to implement "],[7,"code"],[9],[0,"#normalize"],[10],[0," and have it return a JSON:API document to take advantage of this method."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, you\'ll need to use a full "],[7,"code"],[9],[0,"function"],[10],[0," here, as opposed to an ES6 arrow function (e.g "],[7,"code"],[9],[0,"() => { ... }"],[10],[0,"). This is because "],[7,"code"],[9],[0,"normalizeRequestAttrs"],[10],[0," requires the "],[7,"code"],[9],[0,"this"],[10],[0," context from the function handler, and an arrow function would bind this from the outer scope."],[10],[0,"\\n"],[7,"p"],[9],[7,"code"],[9],[0,"normalizedRequestAttrs()"],[10],[0," relies on a "],[7,"code"],[9],[0,"modelName"],[10],[0," to work and attempts to automatically detect it based on the URL of the request. If you use conventional URLs – for example, PATCH /users/1 – the helper should work. If you are using something custom – for example, PATCH /users/edit/1 – you’ll need to provide the "],[7,"code"],[9],[0,"modelName"],[10],[0," to the helper:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users/edit/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");\\n  ...\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","external-origins"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#external-origins"],[11,"class","heading-anchor"],[9],[0,"External origins"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can use Mirage to simulate other-origin requests. By default, a route like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ...)"],[10],[10],[0,""],[7,"p"],[9],[0,"will hit the same origin that\'s serving your Ember app. To handle a different origin, use the fully qualified domain name:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'http://api.twitter.com/v1\'"],[10],[0,", ...)"],[10],[10],[0,""],[7,"p"],[9],[0,"If your entire Ember app uses an external (other-origin) API, you can globally configure the domain via "],[7,"code"],[9],[0,"urlPrefix"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".urlPrefix = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'https://my.api.com\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// This route will handle requests to https://my.api.com/contacts"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ...)"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/route-handlers/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/advanced/shorthands/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"Lh1xGQS8",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","shorthand-reference"],[11,"class","docs-md__h1"],[9],[0,"Shorthand reference"],[10],[0,"\\n    "],[7,"p"],[9],[0,"A "],[7,"em"],[9],[0,"shorthand"],[10],[0," is a simple way to define a route handler for common API scenarios. Here\'s a reference of each shorthand, along with the raw route handler that the shorthand represents."],[10],[0,"\\n"],[7,"p"],[9],[0,"In Mirage 0.1, shorthands responded with objects and arrays directly from the database. In 0.2, shorthands return Models and Collections, meaning you can customize the format of the response in the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"serializer layer"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Shorthands use default status codes, based on the HTTP verb:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"GET, PUT and DEL are 200"],[10],[0,"\\n"],[7,"li"],[9],[0,"POST is 201"],[10],[0,"\\n"],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","get-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#get-shorthands"],[11,"class","heading-anchor"],[9],[0,"GET shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"em"],[9],[0,"Collection"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the collection as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ({ contacts }) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," contacts.all(); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// users in the second case"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"em"],[9],[0,"Model"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"// shorthand\\nthis.get(\'/contacts/:id\');         // finds type by singularizing url\\nthis.get(\'/contacts/:id\', \'user\'); // optionally specify the type as second param\\n\\n// equivalent\\nthis.get(\'/contacts/:id\', ({ contacts }, request) => {\\n  let id = request.params.id;\\n\\n  return contacts.find(id); // users in the second case\\n});"],[10],[10],[7,"p"],[9],[7,"em"],[9],[0,"Array of Models"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, "],[7,"code"],[9],[0,"GET /contacts?ids=1,3"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"coalesce"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"coalesce"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ({ contacts }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," ids = request.queryParams.ids;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," contacts.find(ids); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// users in the second case"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[7,"em"],[9],[0,"Note: there used to be a *Single record with related records *shorthand. You should now use serializers and relationships to solve this problem."],[10],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","post-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#post-shorthands"],[11,"class","heading-anchor"],[9],[0,"POST shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"em"],[9],[0,"Creating a resource"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ contacts }, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," contacts.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"For this POST shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See "],[7,"a"],[11,"href","../serializers/#normalizejson"],[11,"class","docs-md__a"],[9],[0,"the note on normalize"],[10],[0," in the Serializer docs for more information."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","put-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#put-shorthands"],[11,"class","heading-anchor"],[9],[0,"PUT shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"em"],[9],[0,"Update a resource"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ contacts }, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," contacts.find(id).update(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"For this PUT shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See the note on normalize in the Serializer docs for more information."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","delete-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#delete-shorthands"],[11,"class","heading-anchor"],[9],[0,"DELETE shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"em"],[9],[0,"Remove a resource"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", ({ contacts }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  contacts.find(id).destroy();\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"em"],[9],[0,"Remove a resource and related models"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"To use this shorthand, make sure you have the appropriate "],[7,"code"],[9],[0,"hasMany"],[10],[0,"/"],[7,"code"],[9],[0,"belongsTo"],[10],[0," relationships defined on your models."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'addresses\'"],[10],[0,"]);\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", ({ contacts }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," contact = contacts.find(id);\\n\\n  contact.addresses.destroy();\\n  contact.destroy();\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","resource-helper"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#resource-helper"],[11,"class","heading-anchor"],[9],[0,"Resource helper"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"For handling generic CRUD, you can use "],[7,"em"],[9],[0,"resource"],[10],[0," helper which will take care of defining all shorthands. The following examples are equivalent:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// available in 0.2.2+"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also whitelist which route handlers will be defined using "],[7,"em"],[9],[0,"only"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"only"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'index\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'show\'"],[10],[0,"] });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"or which route handlers shouldn\'t be defined using "],[7,"em"],[9],[0,"except"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"except"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'update\'"],[10],[0,"] });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"If your route path and collection names do not match, you can define a relative or absolute path using the "],[7,"em"],[9],[0,"path"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"path"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Here is the full reference of actions\' names you can pass to "],[7,"em"],[9],[0,"only"],[10],[0," / "],[7,"em"],[9],[0,"except"],[10],[0," options and the shorthands they stand for:"],[10],[0,"\\n"],[7,"table"],[9],[0,"\\n"],[7,"thead"],[9],[0,"\\n"],[7,"tr"],[9],[0,"\\n"],[7,"th"],[11,"align","left"],[9],[0,"Action"],[10],[0,"\\n"],[7,"th"],[11,"align","left"],[9],[0,"Shorthand"],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"tbody"],[9],[7,"tr"],[9],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[0,"index"],[10],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[7,"code"],[9],[0,"this.get(\'/contacts\')"],[10],[10],[0,"\\n"],[10],[0,"\\n"],[7,"tr"],[9],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[0,"show"],[10],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[7,"code"],[9],[0,"this.get(\'/contacts/:id\')"],[10],[10],[0,"\\n"],[10],[0,"\\n"],[7,"tr"],[9],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[0,"create"],[10],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[7,"code"],[9],[0,"this.post(\'/contacts\')"],[10],[10],[0,"\\n"],[10],[0,"\\n"],[7,"tr"],[9],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[0,"update"],[10],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[7,"code"],[9],[0,"this.patch(\'contacts/:id\')"],[10],[0," (or "],[7,"code"],[9],[0,"this.put"],[10],[0,")"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"tr"],[9],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[0,"delete"],[10],[0,"\\n"],[7,"td"],[11,"align","left"],[9],[7,"code"],[9],[0,"this.del(\'/contacts/:id\')"],[10],[10],[0,"\\n"],[10],[0,"\\n"],[10],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/advanced/shorthands/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/cookbook/manually-starting-mirage/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"21MaK/pu",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","manually-starting-mirage"],[11,"class","docs-md__h1"],[9],[0,"Manually starting Mirage"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage currently starts automatically (when not disabled in your application config) "],[7,"strong"],[9],[0,"in acceptance tests only"],[10],[0,". This is because Mirage\'s server boots up in an Ember initializer."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can still start a Mirage server "],[7,"strong"],[9],[0,"for your integration and unit tests"],[10],[0," with the following workaround:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// tests/integration/components/your-test.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { startMirage } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'yourapp/initializers/ember-cli-mirage\'"],[10],[0,";\\n\\nmoduleForComponent("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'your-component\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Integration | Component | your component\'"],[10],[0,", {\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"integration"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n  beforeEach() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server = startMirage();\\n  },\\n  afterEach() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server.shutdown();\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Some notes:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"In an Ember addon, you\'ll need to change the import path to "],[7,"code"],[9],[0,"dummy/initializers/ember-cli-mirage"],[10],[0,"."],[10],[0,"\\n"],[7,"li"],[9],[0,"The Mirage configuration of "],[7,"code"],[9],[0,"urlPrefix"],[10],[0," and "],[7,"code"],[9],[0,"namespace"],[10],[0," may require to be adapted when used with integration or unit tests."],[10],[0,"\\n"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/cookbook/manually-starting-mirage/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/cookbook/overriding-dependencies/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"+UEFEOWz",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","overriding-dependencies"],[11,"class","docs-md__h1"],[9],[0,"Overriding dependencies"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage has several dependencies it relies on to function, including "],[7,"a"],[11,"href","https://github.com/pretenderjs/pretender"],[11,"class","docs-md__a"],[9],[0,"Pretender.js"],[10],[0,", a "],[7,"a"],[11,"href","https://github.com/github/fetch"],[11,"class","docs-md__a"],[9],[0,"fetch polyfill"],[10],[0,", and others."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you find yourself in a situation where you need specific features from any of these dependencies, but the version currently bundled with Mirage does not have those features, you have a few options:"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Submit a PR to Mirage upgrading its version of that dependency, and wait until that PR gets merged."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Add the version of the dependency you want to your own project\'s "],[7,"code"],[9],[0,"package.json"],[10],[0," file, and use "],[7,"a"],[11,"href","https://yarnpkg.com/lang/en/docs/selective-version-resolutions/"],[11,"class","docs-md__a"],[9],[0,"yarn resolutions"],[10],[0," to ensure that only that version of the dependency ends up in your build."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you do this, be aware that Mirage may not function properly if it relies on an API that changed between its bundled version and the version you specified. The only way to know for sure is to test your application using the new bundle."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"If you\'d like to read more about the general problem of overriding transitive dependencies, check out "],[4,"docs-link",["blog.detail","how-to-reliably-override-npm-dependencies-1497"],null,{"statements":[[0,"this blog post"]],"parameters":[]},null],[0,"."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/cookbook/overriding-dependencies/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/cookbook/simulating-cookie-responses/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"7wsAea6Q",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","simulating-cookie-responses"],[11,"class","docs-md__h1"],[9],[0,"Simulating cookie responses"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Although Mirage allows setting headers in a response, the\\nXMLHttpRequest spec explicitly\\n"],[7,"a"],[11,"href","http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method"],[11,"class","docs-md__a"],[9],[0,"forbids access"],[10],[0,"\\nto "],[7,"code"],[9],[0,"Set-Cookie"],[10],[0," and "],[7,"code"],[9],[0,"Set-Cookie2"],[10],[0," headers.  As a result Mirage\\nresponses cannot set cookies via headers."],[10],[0,"\\n"],[7,"p"],[9],[0,"However, you can simulate receiving cookies from an ajax\\ncall at the browser level by setting them in a route\\nfunction handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjavascript"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users/login\'"],[10],[0,", ({ users }) => {\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// log in for 24 hours"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," now = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Date"],[10],[0,"();\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," cookieExpiration = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Date"],[10],[0,"(now.getTime() + ("],[7,"span"],[11,"class","hljs-number"],[9],[0,"24"],[10],[0," * "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3600"],[10],[0," * "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1000"],[10],[0,"));\\n  "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"document"],[10],[0,".cookie="],[7,"span"],[11,"class","hljs-string"],[9],[0,"`remember_me=cookie-content-here; domain=.dev-domain; path=/; expires="],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${cookieExpiration.toUTCString()}"],[10],[0,";`"],[10],[0,";\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," users.find("],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Your Ember client code will now have access to any cookies set\\nusing "],[7,"code"],[9],[0,"document.cookie"],[10],[0,"."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/cookbook/simulating-cookie-responses/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/examples/1-belongs-to/controller",["exports","ember-cli-mirage/server","ember-cli-mirage"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Controller.extend({init:function(){this._super.apply(this,arguments)
var e=new s.default({pretender:!0,models:{author:a.Model.extend(),book:a.Model.extend({author:(0,a.belongsTo)()})}}),t=e.create("author",{name:"Neal Stephenson"})
e.create("book",{author:t,title:"Cryptonomicon"}),this.set("server",e)},dbDump:Ember.computed("server",function(){var e=this.get("server").db.dump()
return JSON.stringify(e,null,2)})})
e.default=t}),define("dummy/pods/docs-old/examples/1-belongs-to/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"RW6UqDXr",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","belongs-to-no-inverse-"],[11,"class","docs-md__h1"],[9],[0,"Belongs to (no inverse)"],[10],[0,"\\n    \\n      "],[7,"h2"],[11,"id","schema"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#schema"],[11,"class","heading-anchor"],[9],[0,"Schema"],[10],[10],[0,"\\n    "],[7,"p"],[9],[1,[29,"docs-snippet",null,[["name"],["1-belongs-to-schema"]]],false],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","setup"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#setup"],[11,"class","heading-anchor"],[9],[0,"Setup"],[10],[10],[0,"\\n    "],[7,"p"],[9],[1,[29,"docs-snippet",null,[["name"],["1-belongs-to"]]],false],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","database"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#database"],[11,"class","heading-anchor"],[9],[0,"Database"],[10],[10],[0,"\\n    "],[7,"pre"],[9],[0,""],[1,[23,"dbDump"],true],[0,""],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/examples/1-belongs-to/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/examples/2-has-many/controller",["exports","ember-cli-mirage/server","ember-cli-mirage"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Controller.extend({init:function(){this._super.apply(this,arguments)
var e=new s.default({pretender:!0,models:{author:a.Model.extend({books:(0,a.hasMany)()}),book:a.Model.extend()}}),t=e.create("book",{title:"Cryptonomicon"})
e.create("author",{name:"Neal Stephenson",books:[t]}),this.set("server",e)},dbDump:Ember.computed("server",function(){var e=this.get("server").db.dump()
return JSON.stringify(e,null,2)})})
e.default=t}),define("dummy/pods/docs-old/examples/2-has-many/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"WYdCBz0M",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","has-many-no-inverse-"],[11,"class","docs-md__h1"],[9],[0,"Has many (no inverse)"],[10],[0,"\\n    \\n      "],[7,"h2"],[11,"id","schema"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#schema"],[11,"class","heading-anchor"],[9],[0,"Schema"],[10],[10],[0,"\\n    "],[7,"p"],[9],[1,[29,"docs-snippet",null,[["name"],["2-has-many-schema"]]],false],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","setup"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#setup"],[11,"class","heading-anchor"],[9],[0,"Setup"],[10],[10],[0,"\\n    "],[7,"p"],[9],[1,[29,"docs-snippet",null,[["name"],["2-has-many"]]],false],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","database"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#database"],[11,"class","heading-anchor"],[9],[0,"Database"],[10],[10],[0,"\\n    "],[7,"pre"],[9],[0,""],[1,[23,"dbDump"],true],[0,""],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/examples/2-has-many/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/examples/index/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"T8rIQ4+s",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","examples"],[11,"class","docs-md__h1"],[9],[0,"Examples"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Here are some examples of different data scenarios you can set up using Mirage."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you are trying to set up a similar scenario in your own app, use "],[7,"code"],[9],[0,"server.db.dump()"],[10],[0," to inspect the database after you have created some data, and ensure the foreign keys match what is expected, using the examples as a reference."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/examples/index/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/getting-started/index/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"nEZ/VhtK",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","overview"],[11,"class","docs-md__h1"],[9],[0,"Overview"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Nearly all Ember apps interact with an API. When you reach the point during development where you need to work with dynamic server data, you have a few options:"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[0,"Proxy your app\'s HTTP requests to a local or hosted version of your actual backend, if it exists"],[10],[0,"\\n"],[7,"li"],[9],[0,"Use a library like "],[7,"a"],[11,"href","https://github.com/trek/pretender"],[11,"class","docs-md__a"],[9],[0,"Pretender"],[10],[0," or "],[7,"a"],[11,"href","https://github.com/jakerella/jquery-mockjax"],[11,"class","docs-md__a"],[9],[0,"jQuery mockjax"],[10],[0," to write a custom script that intercepts your requests in the client"],[10],[0,"\\n"],[7,"li"],[9],[0,"Use Ember CLI\'s HTTP mocks"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Option 1 can work if you already have the API, but often that isn\'t the case. And even if it is, development and testing often requires server state that differs from the live API. Option 2 is flexible, but requires you to start from scratch in each project, leaving it up to you to enforce conventions across your apps. Option 3 has a bit more structure, but requires a node server to be running, and doesn\'t allow you to use your fake server in a CI environment."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage was built to solve these problems. It\'s a fake server that runs in the client, and can be used in both development and testing. It brings along enough conventions to quickly get you up and running."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage borrows concepts from typical backend systems like"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"routes"],[10],[10],[0,"\\n"],[7,"li"],[9],[0,"a "],[7,"strong"],[9],[0,"database"],[10],[0," and "],[7,"strong"],[9],[0,"models"],[10],[0,", for storing data and defining relationships"],[10],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"factories"],[10],[0," and "],[7,"strong"],[9],[0,"fixtures"],[10],[0,", for stubbing data"],[10],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"serializers"],[10],[0,", for formatting responses"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Once you define your server, developing and testing your Ember app is a breeze. Read on to learn more!"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/getting-started/index/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/getting-started/installation/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"mpZJjnVh",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","installation"],[11,"class","docs-md__h1"],[9],[0,"Installation"],[10],[0,"\\n    "],[7,"p"],[9],[0,"To install Mirage, run"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"ember install ember-cli-mirage"],[10],[10],[7,"p"],[9],[0,"Ember should install the addon and add a "],[7,"code"],[9],[0,"/mirage"],[10],[0," directory to the root of your project."],[10],[0,"\\n"],[7,"p"],[9],[0,"Check out the "],[7,"a"],[11,"href","../upgrading"],[11,"class","docs-md__a"],[9],[0,"upgrade guide"],[10],[0," if you\'re coming from Mirage 0.2.x."],[10],[0,"\\n"],[7,"p"],[9],[7,"strong"],[9],[0,"Note for Prettier users"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"There\'s an Ember CLI bug that exposes itself when using Prettier + Mirage. A longer-term fix is in the works, but for now, if you\'re using Prettier and install Mirage, you can either"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"pin "],[7,"code"],[9],[0,"eslint-plugin-prettier"],[10],[0," to 2.6.0, or"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"add the following to "],[7,"code"],[9],[0,".eslintignore"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/mirage"],[10],[10],[0,""],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[7,"strong"],[9],[0,"Note for FastBoot users"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"You might expect Mirage to serve network requests made by your FastBoot app, but because Mirage runs only in the browser, it currently disables itself if your app is being served by FastBoot."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/issues/1411"],[11,"class","docs-md__a"],[9],[0,"FastBoot support"],[10],[0," is a highly requested feature we are working on. In the meantime, you\'ll need to develop your FastBoot pages against a local server."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can always bypass FastBoot page generation locally by running"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"FASTBOOT_DISABLED=true ember serve"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage will then run in the browser as expected, and you can develop your client app as normal."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/getting-started/installation/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/getting-started/quickstart/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"FLYscLhN",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","quickstart"],[11,"class","docs-md__h1"],[9],[0,"Quickstart"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage is all about simulating your API server. You define "],[7,"em"],[9],[0,"route handlers"],[10],[0," to respond to your Ember app\'s AJAX requests."],[10],[0,"\\n"],[7,"p"],[9],[0,"Here\'s a simple example of a handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".namespace = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'api\'"],[10],[0,";\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", () => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"authors"],[10],[0,": [\\n        {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,"},\\n        {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,"},\\n        {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Epona\'"],[10],[0,"},\\n      ]\\n    };\\n  });\\n\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Now whenever your Ember app makes a GET request to "],[7,"code"],[9],[0,"/api/authors"],[10],[0,", Mirage will respond with this data."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","dynamic-data"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#dynamic-data"],[11,"class","heading-anchor"],[9],[0,"Dynamic data"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"This works, and is a common way to simulate HTTP responses - but hard-coded responses like this have a few problems:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They\'re inflexible"],[10],[0,". What if you want to change this route\'s response data in your tests?"],[10],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They contain formatting logic"],[10],[0,". Logic that formats the shape of your JSON payload (e.g., including the root "],[7,"code"],[9],[0,"authors"],[10],[0," key) is now duplicated across all your route handlers."],[10],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They\'re too basic."],[10],[0," Inevitably, when your fake server needs to deal with more complex things like relationships, these simple ad hoc responses start to break down."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage provides primitives that let you write a more flexible server implementation. Let\'s see how they work by replacing our basic stub data above."],[10],[0,"\\n"],[7,"p"],[9],[0,"First, create an "],[7,"code"],[9],[0,"author"],[10],[0," model by running the following in your terminal:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedbash"],[9],[0,"$ ember g mirage-model author"],[10],[10],[0,""],[7,"p"],[9],[0,"This generates the following file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The model will create an "],[7,"code"],[9],[0,"authors"],[10],[0," table in Mirage\'s "],[7,"em"],[9],[0,"in-memory database"],[10],[0,". The database makes our route handlers dynamic—we can change the returned data without rewriting the handler. In this way, we can share the same route definitions in both development and testing, while still having control over their response data."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s update our route handler to be dynamic:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".namespace = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'api\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now this route will respond with all the authors in Mirage\'s database at the time of the request. If we want to change the data this route responds with, we simply need to change the data in the database."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","creating-data"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#creating-data"],[11,"class","heading-anchor"],[9],[0,"Creating data"],[10],[10],[0,"\\n    "],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"You can also use flat fixture files to seed your database. Learn more in the "],[7,"a"],[11,"href","../seeding-your-database"],[9],[0,"database guide"],[10],[0,"."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"To actually seed our database with fake data, we\'ll use "],[7,"em"],[9],[0,"factories"],[10],[0,". Factories are objects that dynamically generate data - think of them as blueprints for your models."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s create a factory for our author with"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[7,"span"],[11,"class","hljs-meta"],[9],[0,"$"],[10],[0," ember g mirage-factory author"],[10],[10],[0,""],[7,"p"],[9],[0,"We can then define some properties on our Factory. They can be simple types like Booleans, Strings or Numbers, or functions that return dynamic data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  name(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Person "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  },\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"28"],[10],[0,",\\n\\n  admin() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".random() > "],[7,"span"],[11,"class","hljs-number"],[9],[0,"0.5"],[10],[0,";\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This factory creates objects like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjavascript"],[9],[0,"[{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Person 1\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"28"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0,"\\n},\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Person 2\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"28"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n}]"],[10],[10],[0,""],[7,"p"],[9],[0,"and so on, which will automatically be inserted into the "],[7,"code"],[9],[0,"authors"],[10],[0," database table. The database will assign each record an "],[7,"code"],[9],[0,"id"],[10],[0,", and now we can interact with this data in our route handlers."],[10],[0,"\\n"],[7,"p"],[9],[0,"To use our new factory, we can call the "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0," methods in development:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n\\n};"],[10],[10],[0,""],[7,"p"],[9],[0,"and in acceptance tests:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// tests/acceptance/authors-test.js"],[10],[0,"\\ntest("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the authors\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," authors = server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    equal(find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'li\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,");\\n    equal(find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'li:first\'"],[10],[0,").text(), authors["],[7,"span"],[11,"class","hljs-number"],[9],[0,"0"],[10],[0,"].name);\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You now have a simple way to set up your fake server\'s initial data, both during development and on a per-test basis."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","associations-and-serializers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#associations-and-serializers"],[11,"class","heading-anchor"],[9],[0,"Associations and serializers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Dealing with associations is always tricky, and faking endpoints that deal with associations is no exception. Fortunately, Mirage ships with an ORM to help keep your routes clean."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s say your author has many blog-posts. You can declare this relationship in your model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"blogPosts"],[10],[0,": hasMany()\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/blog-post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now Mirage knows about the relationship between these two models, which can be useful when writing route handlers:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id/blog-posts\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = schema.authors.find(request.params.id);\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," author.blogPosts;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"and when creating graphs of related data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the posts on the homepage\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,");\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", { author });\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    assert.expect(find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'li\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage\'s serializer layer is also aware of your relationships, which helps when faking endpoints that sideload or embed related data. Models and Collections that are returned from a route handler pass through the serializer layer, where you can customize which attributes and associations to include, as well as override other formatting options:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n  keyForAttribute(attr) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," dasherize(attr);\\n  },\\n\\n  keyForRelationship(attr) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," dasherize(attr);\\n  },\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"include"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blogPosts\'"],[10],[0,"]\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,", (schema, request) => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.find(request.params.id);\\n  });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"With the above config, a GET to "],[7,"code"],[9],[0,"/authors/1"],[10],[0," would return something like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"/*\\n{\\n  author: {\\n    id: 1,\\n    \'first-name\': \'Zelda\'\\n  },\\n  \'blog-posts\': [\\n    {id: 1, \'author-id\': 1, title: \'Lorem ipsum\'},\\n    ...\\n  ]\\n}\\n*/"],[10],[10],[7,"p"],[9],[0,"Mirage ships with two named serializers, JSONAPISerializer and ActiveModelSerializer, to save you the trouble of writing this custom code yourself. See the "],[7,"a"],[11,"href","./api/modules/ember-cli-mirage/serializer~Serializer"],[11,"class","docs-md__a"],[9],[0,"serializer guide"],[10],[0," to learn more."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#shorthands"],[11,"class","heading-anchor"],[9],[0,"Shorthands"],[10],[10],[0,"\\n    "],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"View more "],[7,"a"],[11,"href","./advanced/shorthands"],[9],[0,"shorthands"],[10],[0,"."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Mirage has "],[7,"em"],[9],[0,"shorthands"],[10],[0," to reduce the code needed for conventional API routes. For example, the route handler"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"can be written as"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"There are also shorthands for "],[7,"code"],[9],[0,"put"],[10],[0," (or "],[7,"code"],[9],[0,"patch"],[10],[0,"), "],[7,"code"],[9],[0,"post"],[10],[0," and "],[7,"code"],[9],[0,"del"],[10],[0," methods. Here\'s a full set of resourceful routes for an "],[7,"code"],[9],[0,"author"],[10],[0," resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// or this.patch"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Shorthands make writing your server definition concise, so you should use them whenever possible. You can always fall back to a custom function when you need more control."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","passthrough"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#passthrough"],[11,"class","heading-anchor"],[9],[0,"Passthrough"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage is a great tool to use even if you\'re working on an existing app, or if you don\'t want to fake your entire API. By default, Mirage throws an error if your Ember app makes a request that doesn\'t have a corresponding route handler defined. To avoid this, tell Mirage to let unhandled requests pass through:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".passthrough();"],[10],[10],[0,""],[7,"p"],[9],[0,"Now you can develop as you normally would, for example against an existing API."],[10],[0,"\\n"],[7,"p"],[9],[0,"When it comes time to build a new feature, you don\'t have to wait for the API to be updated. Just define the new route that you need"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/comments\'"],[10],[0,");\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".passthrough();"],[10],[10],[0,""],[7,"p"],[9],[0,"and you can fully develop and test the feature. In this way you can build up your fake server piece by piece - adding some solid acceptance tests along the way."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"That should be enough to get you started! Keep reading to learn more."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/getting-started/quickstart/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/getting-started/upgrading/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"eUUai37x",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","upgrading"],[11,"class","docs-md__h1"],[9],[0,"Upgrading"],[10],[0,"\\n    \\n      "],[7,"h2"],[11,"id","updating-your-version-of-mirage"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#updating-your-version-of-mirage"],[11,"class","heading-anchor"],[9],[0,"Updating your version of Mirage"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To install a new version of Mirage, run"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"yarn install -D ember-cli-mirage@X.X.X"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","changelog"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#changelog"],[11,"class","heading-anchor"],[9],[0,"Changelog"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can view all of Mirage\'s release notes on "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/releases"],[11,"class","docs-md__a"],[9],[0,"our Releases page"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-4-x-1-0-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-4-x-1-0-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.4.x → 1.0 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"A few breaking changes were made in the 1.0 release."],[10],[0,"\\n"],[7,"p"],[9],[7,"strong"],[9],[0,"Faker.js"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"When Mirage was first released, including npm libraries into Ember CLI apps was difficult. You needed to generate a vendor shim and call "],[7,"code"],[9],[0,"app.import"],[10],[0," in order to use the library in your application code."],[10],[0,"\\n"],[7,"p"],[9],[0,"Because of all this ceremony, it was common for addons to do that work for you, and bundle related packages. This is exactly what Mirage did for "],[7,"a"],[11,"href","https://github.com/Marak/faker.js"],[11,"class","docs-md__a"],[9],[0,"Faker.js"],[10],[0,", a useful library to have alongside your Mirage factory definitions."],[10],[0,"\\n"],[7,"p"],[9],[0,"There\'s a few problems with this, most notably that users "],[7,"em"],[9],[0,"had"],[10],[0," to use the version of Faker that was bundled with Mirage. It was frustrating not being able to take advantage of new Faker features until Mirage upgraded its bundled version."],[10],[0,"\\n"],[7,"p"],[9],[0,"Now, thanks to "],[7,"a"],[11,"href","https://github.com/ef4/ember-auto-import"],[11,"class","docs-md__a"],[9],[0,"Ember Auto Import"],[10],[0,", this is no longer the case. Using dependencies directly from npm is painless – just "],[7,"code"],[9],[0,"yarn/npm install"],[10],[0," them and "],[7,"code"],[9],[0,"import"],[10],[0," them directly from your ES6 classes. Thanks to Auto Import, all that ceremony is taken care of for you."],[10],[0,"\\n"],[7,"p"],[9],[0,"This also means that users can easily manage their project\'s version of Faker (and other similar dependencies) independently of the version of Mirage they\'re using."],[10],[0,"\\n"],[7,"p"],[9],[0,"For this reason, in 1.0 we are no longer bundling Faker.js with Mirage. This is a breaking change."],[10],[0,"\\n"],[7,"p"],[9],[0,"Here are the steps you\'ll need to take to fix this:"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Install Ember Auto Import (if it\'s not already installed)"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"ember install ember-auto-import"],[10],[10],[0,""],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Install Faker.js directly from npm:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"yarn add -D faker\\n"],[7,"span"],[11,"class","hljs-meta"],[9],[0,"\\n#"],[10],[0," or npm install --save-dev faker"],[10],[10],[0,""],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Change all imports of "],[7,"code"],[9],[0,"faker"],[10],[0," from the "],[7,"code"],[9],[0,"ember-cli-packge"],[10],[0," to import directly from "],[7,"code"],[9],[0,"faker"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"- import { Factory, faker } from \'ember-cli-mirage\';"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ import { Factory } from \'ember-cli-mirage\';"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ import faker from \'faker\';"],[10],[10],[10],[0,""],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage-faker-codemod/tree/update-transform"],[11,"class","docs-md__a"],[9],[0,"There is a codemod"],[10],[0," that will do this for you, thanks to the gracious work of "],[7,"a"],[11,"href","https://github.com/caseywatts"],[11,"class","docs-md__a"],[9],[0,"Casey Watts"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, when I originally bundled Faker, I monkey-patched it with some methods that I thought would be \\"useful\\" additions. I thought this was a good idea at the time... it wasn\'t. 🙈"],[10],[0,"\\n"],[7,"p"],[9],[0,"You can look at "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/blob/v0.4.15/addon/faker.js"],[11,"class","docs-md__a"],[9],[0,"the module from v0.4.15"],[10],[0," to see that we added the "],[7,"code"],[9],[0,"faker.list.random"],[10],[0,", "],[7,"code"],[9],[0,"faker.list.cycle"],[10],[0," and "],[7,"code"],[9],[0,"faker.random.number.range"],[10],[0," methods, so if you use these methods too, you\'ll need to refactor them."],[10],[0,"\\n"],[7,"p"],[9],[0,"Fortunately, two of them have been added to recent versions of Faker, and one can be replaced with some simple JS:"],[10],[0,"\\n"],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.list.random"],[10],[0,", use "],[7,"code"],[9],[0,"faker.random.arrayElement"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  countries() {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.list.random([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return faker.random.arrayElement([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.list.cycle"],[10],[0,", use the remainder (modulo) operator:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  countries(i) {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.list.cycle([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   let countries = [ \'United States of America\', \'Canada\', \'Mexico\' ];"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   "],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return countries[i % countries.length];"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.random.number.range"],[10],[0,", use "],[7,"code"],[9],[0,"faker.random.number"],[10],[0," with min and max options:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  age() {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.random.number.range(18, 65);"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return faker.random.number({ min: 18, max: 65 });"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"After that, you should be on your own with respect to Faker! Thanks to Auto Import, you can change versions, or even try out other libraries like "],[7,"a"],[11,"href","https://chancejs.com/"],[11,"class","docs-md__a"],[9],[0,"Chance.js"],[10],[0,", and rest easy knowing Mirage is a bit slimmer and one less thing is beyond your control."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-3-x-0-4-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-3-x-0-4-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.3.x → 0.4 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"There is one primary change in 0.4 that could break your 0.3 app."],[10],[0,"\\n"],[7,"p"],[9],[0,"In 0.3.x, Mirage\'s JSONAPISerializer included all related foreign keys whenever serializing a model or collection, even if those relationships were not being "],[7,"code"],[9],[0,"included"],[10],[0," in the payload."],[10],[0,"\\n"],[7,"p"],[9],[0,"This actually goes against JSON:API\'s design. Foreign keys in the payload are known as "],[7,"a"],[11,"href","http://jsonapi.org/format/#document-resource-object-linkage"],[11,"class","docs-md__a"],[9],[0,"Resource Linkage"],[10],[0," and are intended to be used by API clients to link together all resources in a JSON:API compound document. In fact, most server-side JSON:API libraries do not automatically serialize all related foreign keys, and only return linkage data for related resources when they are being included in the current document."],[10],[0,"\\n"],[7,"p"],[9],[0,"By including linkage data for every relationship in 0.3, it was easy to develop Ember apps that would work with Mirage but would behave differently when hooked up to a standard JSON:API server. Since Mirage always included linkage data, an Ember app might automatically be able to fetch related resources using the ids from that linkage data plus its knowledge about the API. For example, if a "],[7,"code"],[9],[0,"post"],[10],[0," came back like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /posts/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'posts\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { ... },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,",\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,"\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"and you forgot to "],[7,"code"],[9],[0,"?include=author"],[10],[0," in your GET request, Ember Data would potentially use the "],[7,"code"],[9],[0,"user:1"],[10],[0," foreign key and lazily fetch the "],[7,"code"],[9],[0,"author"],[10],[0," by making a request to "],[7,"code"],[9],[0,"GET /authors/1"],[10],[0,". This is problematic because"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[0,"This is not how foreign keys are intended to be used"],[10],[0,"\\n"],[7,"li"],[9],[0,"It\'d be better to see no data and fix the problem by going back up to your data-loading code and add "],[7,"code"],[9],[0,"?include=author"],[10],[0," to your GET request, or"],[10],[0,"\\n"],[7,"li"],[9],[0,"If you do want your interface to lazily load the author, use resource "],[7,"code"],[9],[0,"links"],[10],[0," instead of the resource linkage "],[7,"code"],[9],[0,"data"],[10],[0,":"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /posts/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'posts\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { ... },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"links"],[10],[0,": {\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"related"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/users/1\'"],[10],[0,"\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Resource links can be defined on Mirage serializers using the "],[7,"a"],[11,"href","http://www.ember-cli-mirage.com/docs/v0.3.x/serializers/#linksmodel"],[11,"class","docs-md__a"],[9],[0,"links"],[10],[0," method (though "],[7,"code"],[9],[0,"including"],[10],[0," is likely the far more simpler and common approach to fetching related data)."],[10],[0,"\\n"],[7,"p"],[9],[0,"So, Mirage 0.4 changed this behavior and by default, the JSONAPISerializer only includes linkage data for relationships that are being included in the current payload (i.e. within the same compound document)."],[10],[0,"\\n"],[7,"p"],[9],[0,"This behavior is configurable via the "],[7,"code"],[9],[0,"alwaysIncludeLinkageData"],[10],[0," key on your JSONAPISerializers. It is set to "],[7,"code"],[9],[0,"false"],[10],[0," by default, but if you want to opt-in to 0.3 behavior and always include linkage data, set it to "],[7,"code"],[9],[0,"true"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { JSONAPISerializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," JSONAPISerializer.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"alwaysIncludeLinkageData"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"If you do this, I would recommend looking closely at how your real server behaves when serializing resources\' relationships and whether it uses resource "],[7,"code"],[9],[0,"links"],[10],[0," or resource linkage "],[7,"code"],[9],[0,"data"],[10],[0,", and to update your Mirage code accordingly to give you the most faithful representation of your server."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-2-x-0-3-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-2-x-0-3-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.2.x → 0.3 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The main change from 0.2.x to 0.3.x is that relationships are now one-way. This better matches the semantics of both Ember Data and common HTTP transfer protocols like JSON:API."],[10],[0,"\\n"],[7,"p"],[9],[0,"In 0.2, the following model definitions"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"would have generated a \\"schema\\" with a one-to-many relationship between authors and posts: an author has many posts, and a post belongs to an author. Now, this just generates a one-way relationship from "],[7,"code"],[9],[0,"post"],[10],[0," to "],[7,"code"],[9],[0,"author"],[10],[0,". To have a two-way sync\'d relationship, known as an inverse, you\'d need to define both sides of the relationship:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"posts"],[10],[0,": hasMany()\\n\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Practically speaking, to upgrade you\'ll need to go through your code and update relationships that implicitly had inverses (from 0.2.x\'s hasMany and belongsTo behavior) and update them to define both sides."],[10],[0,"\\n"],[7,"p"],[9],[0,"This could also affect your fixture files, if you are using those to seed your database. Instead of just having an authorId on the post above, for example, you\'d also need the author to have a "],[7,"code"],[9],[0,"postIds: []"],[10],[0," array. (In general Factories are better for seeding your database, as they save you from having to manage ids at all.)"],[10],[0,"\\n"],[7,"p"],[9],[0,"Conceptually this change should be straightforward, as its making existing implicit relationships explicit, but if you find yourself having trouble with the upgrade it\'s probably because of something I haven\'t thought of. Please reach out to the community on the #ec-mirage channel on Slack and ask for help!"],[10],[0,"\\n"],[7,"p"],[9],[0,"For more information on the motivation behind change, please read the "],[7,"a"],[11,"href","http://www.ember-cli-mirage.com/blog/2017/01/09/0-3-0-beta-series/"],[11,"class","docs-md__a"],[9],[0,"0-3 beta series release blog post"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-1-x-0-2-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-1-x-0-2-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.1.x → 0.2 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"If you\'re upgrading your Mirage server from v0.1.x to v0.2.x, here\'s what you need to know:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"The default Mirage directory has changed."],[10],[0," The default Mirage directory has moved from "],[7,"code"],[9],[0,"/app/mirage"],[10],[0," to "],[7,"code"],[9],[0,"/mirage"],[10],[0,". When you install 0.2.0, the default blueprint will add the "],[7,"code"],[9],[0,"/mirage"],[10],[0," directory to your project. You can delete it and move your current Mirage files to the new location with something like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"rm -rf mirage\\nmv app/mirage mirage"],[10],[10],[0,""],[7,"p"],[9],[0,"from the root of your project. Mirage\'s directory is also "],[7,"a"],[11,"href","../configuration/#directory"],[11,"class","docs-md__a"],[9],[0,"customizable"],[10],[0," (Although you should move it from the "],[7,"code"],[9],[0,"/app"],[10],[0," directory or else it will not be removed from the build in production mode)."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"All multiword filenames are dasherized."],[10],[0," In Mirage 0.1.x, database collection names were taken from filenames. The idea was, if your API returned snake_case collection keys (e.g. "],[7,"code"],[9],[0,"blog_posts: []"],[10],[0,"), just name your file "],[7,"code"],[9],[0,"fixtures/blog_posts.js"],[10],[0,". This approach turned out to be insufficiently flexib-- what am I saying, it was just a bad idea :P."],[10],[0,"\\n"],[7,"p"],[9],[0,"In Mirage 0.2.x, we follow Ember CLI\'s conventions of dasherized filenames. So, you\'ll just need to go through and change"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/factories/blog_post.js\\n/mirage/fixtures/blog_post.js\\n"],[7,"span"],[11,"class","hljs-meta"],[9],[0,"#"],[10],[0," etc."],[10],[10],[0,""],[7,"p"],[9],[0,"to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/factories/blog-post.js\\n/mirage/fixtures/blog-post.js"],[10],[10],[0,""],[7,"p"],[9],[0,"You will then use the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"new Serializer layer"],[10],[0," to do things like format keys in your json payloads."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"All JavaScript properties are camelCased."],[10],[0," Similar to the previous change, factory properties and database collection names followed the format of your API in Mirage 0.1.x. If you were faking an ActiveModelSerializer backend, multiword keys used snake_case throughout your Mirage code. So, your database table might be "],[7,"code"],[9],[0,"db.blog_posts"],[10],[0,", and your factory keys might be "],[7,"code"],[9],[0,"first_name() {..}"],[10],[0,". Looks pretty cool right?"],[10],[0,"\\n"],[7,"p"],[9],[0,"Wrong. We\'re JavaScript developers here, people. It\'s time to start using camelCase. (Also, the idea of tying these keys to your serialization format was bad, as it left us without any conventions. We need to stick to a single format, so the ORM knows how to find foreign keys.)"],[10],[0,"\\n"],[7,"p"],[9],[0,"You\'ll need to update your route handlers, which may look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," posts = db.blog_posts.filter("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"p"],[10],[0," =>"],[10],[0," p.author_id === "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," posts = db.blogPosts.filter("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"p"],[10],[0," =>"],[10],[0," p.authorId === "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that everything is camelCased, including foreign keys."],[10],[0,"\\n"],[7,"p"],[9],[0,"Similarly, factories that look like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  first_name() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n\\n  last_name() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"should be changed to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  firstName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n\\n  lastName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This goes for all attrs that "],[7,"code"],[9],[0,"server.create"],[10],[0," takes (and returns), etc. For many this will be the most painful part of the upgrade. Please find it in your heart to forgive me."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"Mirage now has its own Model layer (an ORM)."],[10],[0," In Mirage 0.1.x, you had to define either a factory or a fixture file (or both) in order for a database collection to be created, which let you take advantage of the db in your route handlers. In 0.2, we\'ve introduced Mirage Models, which serve as the new canonical source of truth about your database."],[10],[0,"\\n"],[7,"p"],[9],[0,"To create a model, use"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"ember g mirage-model blog-post"],[10],[10],[7,"p"],[9],[0,"This will create a file like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Having that file sets up the "],[7,"code"],[9],[0,"db.blogPosts"],[10],[0," collection, allows you to use the JSON:API serializer, and more. You can still define factories and fixtures - but only if you need them. "],[2," not yet! in 0.6.0 For instance, given the model above, `server.create(\'blog-post\')` would create a blank `blog-post` model. You could then make a factory for models that need more customization. "],[0," Models, factories and fixtures all work together, but now you won\'t be making blank factory or fixture files just to set up your database. The models themselves serve as the source of truth."],[10],[0,"\\n"],[7,"p"],[9],[0,"We needed to add models for "],[7,"a"],[11,"href","../models/#associations"],[11,"class","docs-md__a"],[9],[0,"association support"],[10],[0," (which currently exists) and factory relationships (the first feature to come after the 0.2 release). Read through the "],[7,"a"],[11,"href","../models"],[11,"class","docs-md__a"],[9],[0,"models guide"],[10],[0," and "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"serializers guide"],[10],[0," to see how having models can simplify your Mirage server."],[10],[0,"\\n"],[7,"p"],[9],[0,"We also have a plan to make a separate addon that could ascertain your model definitions and their relationships from your Ember Data models. Adding the ORM paves the way for this important future addition."],[10],[0,"\\n"],[7,"p"],[9],[0,"Currently, Mirage will still work if a factory/fixture file is defined for a particular db collection without a corresponding model. Eventually, we may require all setups to have model definitions for each collection. But for now, to make for an easier upgrade path, you can start generating models and opt-in to the ORM layer in piecemeal."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"The ORM object "],[7,"code"],[9],[0,"schema"],[10],[0," is now injected into route handlers."],[10],[0," In Mirage 0.1.x, the "],[7,"code"],[9],[0,"db"],[10],[0," was the first parameter injected into route handlers:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"db, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// work with db"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now, the "],[7,"code"],[9],[0,"schema"],[10],[0," object is, so you can take advantage of the Model layer. Fortunately, the "],[7,"code"],[9],[0,"db"],[10],[0," hangs directly off of the "],[7,"code"],[9],[0,"schema"],[10],[0,", so you can leave all your old route handler code intact (with the exception of making the change to camelCase), and just use destructuring to change the function signature to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ db }, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// work with db"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"and then start opting-in to the ORM (and using "],[7,"code"],[9],[0,"schema"],[10],[0,") one route handler at a time."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"Specify a Serializer."],[10],[0," If you\'re using shorthands, you\'ll need to pick a serializer in "],[7,"code"],[9],[0,"/mirage/serializers/application.js"],[10],[0,". See the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"serializers guide"],[10],[0," for details."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"You can always view the "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/blob/master/CHANGELOG.md"],[11,"class","docs-md__a"],[9],[0,"full changelog"],[10],[0," to see everything that\'s changed. If you think this guide missed a critical part of the upgrade path, please "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/issues/new"],[11,"class","docs-md__a"],[9],[0,"open an issue"],[10],[0,"!"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/getting-started/upgrading/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"fsZ4Ue1L",block:'{"symbols":["viewer","nav"],"statements":[[4,"docs-viewer",null,null,{"statements":[[0,"\\n"],[4,"component",[[29,"-assert-implicit-component-helper-argument",[[24,1,["nav"]],"expected `viewer.nav` to be a contextual component but found a string. Did you mean `(component viewer.nav)`? (\'dummy/pods/docs-old/template.hbs\' @ L3:C5) "],null]],null,{"statements":[[0,"    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs-old/template.hbs\' @ L4:C6) "],null],"Getting started"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L5:C6) "],null],"Overview","docs.getting-started.index"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L6:C6) "],null],"Installation","docs.getting-started.installation"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L7:C6) "],null],"Quickstart","docs.getting-started.quickstart"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L8:C6) "],null],"Upgrading","docs.getting-started.upgrading"],null],false],[0,"\\n\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs-old/template.hbs\' @ L10:C6) "],null],"Writing your server"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L11:C6) "],null],"Defining routes","docs.writing-your-server.defining-routes"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L12:C6) "],null],"Seeding your database","docs.writing-your-server.seeding-your-database"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L13:C6) "],null],"Acceptance testing","docs.writing-your-server.acceptance-testing"],null],false],[0,"\\n\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs-old/template.hbs\' @ L15:C6) "],null],"Advanced"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L16:C6) "],null],"Route handlers","docs.advanced.route-handlers"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L17:C6) "],null],"Shorthands","docs.advanced.shorthands"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L18:C6) "],null],"Defining relationships","docs.advanced.defining-relationships"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L19:C6) "],null],"Factories","docs.advanced.factories"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L20:C6) "],null],"Fixtures","docs.advanced.fixtures"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L21:C6) "],null],"Environment configuration","docs.advanced.environment-options"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L22:C6) "],null],"Identity managers","docs.advanced.identity-managers"],null],false],[0,"\\n\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs-old/template.hbs\' @ L24:C6) "],null],"Cookbook"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L25:C6) "],null],"Manually starting Mirage","docs.cookbook.manually-starting-mirage"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L26:C6) "],null],"Simulating cookie responses","docs.cookbook.simulating-cookie-responses"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs-old/template.hbs\' @ L27:C6) "],null],"Overriding dependencies","docs.cookbook.overriding-dependencies"],null],false],[0,"\\n\\n"]],"parameters":[2]},null],[0,"\\n"],[4,"component",[[29,"-assert-implicit-component-helper-argument",[[24,1,["main"]],"expected `viewer.main` to be a contextual component but found a string. Did you mean `(component viewer.main)`? (\'dummy/pods/docs-old/template.hbs\' @ L34:C5) "],null]],null,{"statements":[[0,"    "],[1,[23,"outlet"],false],[0,"\\n"]],"parameters":[]},null],[0,"\\n"]],"parameters":[1]},null]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/writing-your-server/acceptance-testing/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"9T3koUPW",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","acceptance-testing"],[11,"class","docs-md__h1"],[9],[0,"Acceptance testing"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Acceptance testing your Ember app typically involves verifying some user behavior. For example, you may want to test that the user can view the photos on your app\'s index route."],[10],[0,"\\n"],[7,"p"],[9],[0,"Many of these tests rely on a given server state. In other words, you want to test that the user can view ten photos, "],[7,"em"],[9],[0,"given that ten photo resources exist on the server"],[10],[0," at the time the user boots up the app."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you\'re using Application Tests (introduced in "],[7,"a"],[11,"href","https://emberjs.com/blog/2018/02/14/ember-3-0-released.html#toc_updates-to-the-testing-defaults"],[11,"class","docs-md__a"],[9],[0,"Ember 3.0"],[10],[0,"), add the "],[7,"code"],[9],[0,"setupMirage"],[10],[0," hook to the top of your test file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  import { setupApplicationTest } from \'ember-qunit\';\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ import setupMirage from \'ember-cli-mirage/test-support/setup-mirage\';"],[10],[0,"\\n\\n  module(\'Acceptance | Homepage test\', function(hooks) {\\n    setupApplicationTest(hooks);\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   setupMirage(hooks);"],[10],[0,"\\n\\n    test(\'my first test\', async function(assert) {\\n      // test code\\n    });\\n  });"],[10],[10],[0,""],[7,"p"],[9],[0,"Once you\'ve defined your routes, use the "],[7,"code"],[9],[0,"server"],[10],[0," variable to define the initial server state directly in your tests:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can view the photos\'"],[10],[0,", assert => {\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'photo\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    assert.equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'img\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"server.createList"],[10],[0," uses the "],[7,"code"],[9],[0,"photo"],[10],[0," factory to generate 10 database records. This way, Mirage\'s database is populated when the Ember app boots and makes an AJAX request to fetch the photos data."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage\'s server will be reset after each test, so each test starts out with a clean database state."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","keeping-your-tests-focused"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#keeping-your-tests-focused"],[11,"class","heading-anchor"],[9],[0,"Keeping your tests focused"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The purpose of factories is to put code that\'s relevant to a test as close to that test as possible. In the example above, we wanted to verify that the user would see ten photos, given those photos existed on the server. So, the "],[7,"code"],[9],[0,"server.createList(\'photo\', 10)"],[10],[0," call was directly in the test."],[10],[0,"\\n"],[7,"p"],[9],[0,"Say we wanted to test that when the user visits a details route for a photo titled \\"Sunset over Hyrule,\\" they would see that title in an "],[7,"code"],[9],[0,"<h1>"],[10],[0," tag. One way to accomplish this would be to update the photo factory itself:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/photo.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," Mirage "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Mirage.Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sunset over Hyrule\'"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The problem with this approach is that the desired change is very specific to this test. Suppose another test wanted to verify photos with different titles were displayed. Changing the factory to suit that case would break this test."],[10],[0,"\\n"],[7,"p"],[9],[0,"For this reason, "],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0," allow you to override specific attributes that your factory has defined. This lets us keep relevant code near our tests, without making them brittle."],[10],[0,"\\n"],[7,"p"],[9],[0,"To override attributes, simply pass in an object as the last argument to "],[7,"code"],[9],[0,"create"],[10],[0," or "],[7,"code"],[9],[0,"createList"],[10],[0," with the attributes you want to override. Here\'s what this may look like for the photos example."],[10],[0,"\\n"],[7,"p"],[9],[0,"First, let\'s make our factory more generic:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/photo.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," Mirage "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Mirage.Factory.extend({\\n  title(i) {\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Photo 1, Photo 2 etc."],[10],[0,"\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Photo "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now, we can write our tests, overriding the factory-generated attributes where appropriate:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the photos\\""],[10],[0,", assert => {\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'photo\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    assert.equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'img\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0," );\\n  });\\n});\\n\\ntest("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I see the photo\'s title on a detail route\\""],[10],[0,", assert => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," photo = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'photo\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sunset over Hyrule\'"],[10],[0,"});\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0," + photo.id);\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    assert.equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1:contains(Sunset over Hyrule)\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"We override "],[7,"code"],[9],[0,"title"],[10],[0," in the second test since it\'s relevant there, but we stick with the factory-generated defaults for the first test."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","asserting-a-server-call-was-made-in-a-test"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#asserting-a-server-call-was-made-in-a-test"],[11,"class","heading-anchor"],[9],[0,"Asserting a server call was made in a test"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Often you\'ll write tests against your application\'s UI, which will verify that the proper data from Mirage was returned. However, because Mirage gives you a full client-side server, you can gain more confidence from your tests by asserting against Mirage\'s server state, in addition to testing your Ember app\'s UI."],[10],[0,"\\n"],[7,"p"],[9],[0,"There are two general approaches to this. First, you can assert directly against Mirage\'s database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can change the lesson\'s title\\""],[10],[0,", assert => {\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'lesson\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My First Lesson\'"],[10],[0,"})\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n  click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.Edit\'"],[10],[0,")\\n  fillIn("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'input\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Updated lesson\'"],[10],[0,");\\n  click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.Save\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Assert against our app\'s UI"],[10],[0,"\\n    assert.equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1:contains(Updated lesson)\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," );\\n\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Also check that the data was \\"persisted\\" to our backend"],[10],[0,"\\n    assert.equal( server.db.lessons["],[7,"span"],[11,"class","hljs-number"],[9],[0,"0"],[10],[0,"].title, "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Updated lesson\'"],[10],[0,");\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The next strategy is to temporarily override the server route that\'s relevant to your test, and assert against the actual request that your Ember app sent:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can change the lesson\'s title\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  assert.expect("],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," done = assert.async();\\n\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'lesson\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My First Lesson\'"],[10],[0,"})\\n\\n  server.put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/lessons/:id\'"],[10],[0,", (schema, request) => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," params = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody);\\n\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Here, we\'re asserting the params Mirage received are in the format you expect"],[10],[0,"\\n    assert.deepEqual(params, {...});\\n    done();\\n  });\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n  click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.Edit\'"],[10],[0,")\\n  fillIn("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'input\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Updated lesson\'"],[10],[0,");\\n  click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.Save\'"],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that here, we\'re overwriting any route handler you may defined for PUT to "],[7,"code"],[9],[0,"/lessons/:id"],[10],[0," in your "],[7,"code"],[9],[0,"config.js"],[10],[0," file, but only for this test. After this test, your Mirage server will be reset, and all the routes from "],[7,"code"],[9],[0,"config.js"],[10],[0," will be used."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","testing-errors"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#testing-errors"],[11,"class","heading-anchor"],[9],[0,"Testing errors"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To test how your Ember app responds to a server error, overwrite a route handler within a test:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'the user sees an error if the save attempt fails\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n   server.post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/questions\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"errors"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'There was an error\'"],[10],[0,"]}, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"500"],[10],[0,");\\n\\n   visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n   click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.new\'"],[10],[0,");\\n   fillIn("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'input\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'New question\'"],[10],[0,");\\n   click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.save\'"],[10],[0,");\\n\\n   andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"()"],[10],[0," =>"],[10],[0," {\\n     assert.equals(find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'p:contains(There was an error)\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");\\n   });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This route handler definition is only in effect for the duration of this test, so as soon as it\'s over any handler you have defined for POST to "],[7,"code"],[9],[0,"/questions"],[10],[0," in your "],[7,"code"],[9],[0,"config.js"],[10],[0," file will be used again."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"You should now know enough to fake your production API and test your app using Mirage!"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/writing-your-server/acceptance-testing/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/writing-your-server/defining-routes/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"l1RCOn72",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","defining-routes"],[11,"class","docs-md__h1"],[9],[0,"Defining routes"],[10],[0,"\\n    "],[7,"p"],[9],[0,"To define routes for your server, use the "],[7,"code"],[9],[0,"get"],[10],[0,", "],[7,"code"],[9],[0,"post"],[10],[0,", "],[7,"code"],[9],[0,"put"],[10],[0," (or "],[7,"code"],[9],[0,"patch"],[10],[0,") and "],[7,"code"],[9],[0,"del"],[10],[0," methods. Here\'s an example:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Epona\'"],[10],[0,"];\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now when your Ember app makes a GET request to "],[7,"code"],[9],[0,"/authors"],[10],[0,", it will receive this data."],[10],[0,"\\n"],[7,"p"],[9],[0,"Each verb method has the same signature. The first argument is the path (URL) and the second is the actual function handler that returns the response:"],[10],[0,"\\n"],[7,"p"],[11,"class","u-callout"],[9],[0,"this."],[7,"strong"],[9],[0,"verb"],[10],[0,"( "],[7,"em"],[9],[0,"path"],[10],[0,", "],[7,"em"],[9],[0,"handler"],[10],[0," )"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Here are some more examples:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users/current\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"email"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'z@hyrule.org\'"],[10],[0,"\\n  };\\n});\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/events\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," events = [];\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"for"],[10],[0," ("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," i = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,"; i < "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1000"],[10],[0,"; i++) {\\n    events.push({"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": i, "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"value"],[10],[0,": "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".random()});\\n  };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," events;\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","working-with-models"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#working-with-models"],[11,"class","heading-anchor"],[9],[0,"Working with Models"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"In the examples above, we wrote the response data directly in the route. Instead of doing this, Mirage provides a simple in-memory database you can use to make your routes more versatile."],[10],[0,"\\n"],[7,"p"],[9],[0,"In previous versions of Mirage, you interacted with the database directly in your route handlers. Models were introduced as a wrapper around the database to provide better means for dealing with associations and formatting responses, which we\'ll get to shortly. For now, it\'s enough to know that models are the primary way you interact with Mirage\'s database."],[10],[0,"\\n"],[7,"p"],[9],[0,"So, let\'s first define an "],[7,"code"],[9],[0,"author"],[10],[0," model. We can do this from the command line:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"ember g mirage-model author"],[10],[10],[0,""],[7,"p"],[9],[0,"This gives us the file"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model;"],[10],[10],[0,""],[7,"p"],[9],[0,"which sets up our database (at run-time) with an "],[7,"code"],[9],[0,"authors"],[10],[0," table. Now we can rewrite our route handler to use the model."],[10],[0,"\\n"],[7,"p"],[9],[0,"A "],[7,"code"],[9],[0,"schema"],[10],[0," object is injected into each route handler as the first parameter, which is how we access our models. Let\'s use it to make this route dynamic:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.all();\\n});"],[10],[10],[0,""],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"You\'ll learn how to seed your database with initial data in the next section."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Now, Mirage will respond to this route with all the "],[7,"code"],[9],[0,"author"],[10],[0," models in its database."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also create, update and delete models from your route handlers. A "],[7,"code"],[9],[0,"request"],[10],[0," object is injected as the second parameter, which contains any data that was sent along with the request."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s say your Ember app creates an author by sending a POST request with the following payload:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"{\\n  author: {\\n    name: \'Link\',\\n    age: 123\\n  }\\n}"],[10],[10],[7,"p"],[9],[0,"We can use this data to create a new "],[7,"code"],[9],[0,"author"],[10],[0," model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"const"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).author;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This handler creates a new author, inserts it into the database (which assigns it an "],[7,"code"],[9],[0,"id"],[10],[0,"), and responds with that record."],[10],[0,"\\n"],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"View the "],[7,"a"],[11,"href","../models"],[9],[0,"full Model API"],[10],[0," to see how your routes can interact with your data."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"As long as all your Mirage routes read from and write to the database, user interactions will persist during a single session. This lets users interact with your app as if it were wired up to a real server."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","dynamic-paths-and-query-params"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#dynamic-paths-and-query-params"],[11,"class","heading-anchor"],[9],[0,"Dynamic paths and query params"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The request object that\'s injected into your route handlers contains any dynamic route segments and query params."],[10],[0,"\\n"],[7,"p"],[9],[0,"To define a route that has a dynamic segment, use colon syntax ("],[7,"code"],[9],[0,":segment"],[10],[0,") in your path. The dynamic piece will be available via "],[7,"code"],[9],[0,"request.params.[segment]"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"var"],[10],[0," id = request.params.id;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.find(id);\\n})"],[10],[10],[0,""],[7,"p"],[9],[0,"Query params from the request can also be accessed via "],[7,"code"],[9],[0,"request.queryParams.[param]"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage uses Pretender.js to intercept HTTP requests, so check out "],[7,"a"],[11,"href","https://github.com/trek/pretender"],[11,"class","docs-md__a"],[9],[0,"its docs"],[10],[0," to see the full API for the request object."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","using-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-shorthands"],[11,"class","heading-anchor"],[9],[0,"Using shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"APIs have become more standardized, so Mirage has the concept of "],[7,"em"],[9],[0,"shorthands"],[10],[0," to deal with common scenarios. These shorthands can replace many of your custom route handlers, dramatically simplifying your server definition."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, the route handler we wrote above to handle a GET request to "],[7,"code"],[9],[0,"/authors"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"is pretty standard: it responds with a named collection. The shorthand form of this is"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"which infers the collection name from the last part of the URL. Returning a single author by id is just as easy:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Similarly, we wrote a route handler by hand to deal with creating an author"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"const"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).author;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"which is also pretty standard: it creates a new model using the attributes from the request payload. The equivalent shorthand is"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"View the "],[7,"a"],[11,"href","../shorthands"],[11,"class","docs-md__a"],[9],[0,"full reference"],[10],[0," to see all available shorthands."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","formatting-your-response-with-serializers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#formatting-your-response-with-serializers"],[11,"class","heading-anchor"],[9],[0,"Formatting your response with Serializers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"When you return a model or a collection from a route handler, Mirage "],[7,"em"],[9],[0,"serializes"],[10],[0," it into a JSON payload, and then responds to your Ember app with that payload. It uses an object called a Serializer to do this, which you can customize. Having a single object that\'s responsible for this formatting logic helps keep your route handlers simple. In particular, a bit of customization in the serializer layer often lets you use shorthands when you otherwise wouldn\'t be able to."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage ships with three named serializers, JsonApiSerializer (used to implement "],[7,"a"],[11,"href","http://jsonapi.org/"],[11,"class","docs-md__a"],[9],[0,"JSON:API"],[10],[0,"), ActiveModelSerializer (used to simulate Rails servers using ActiveModel::Serializers) and RestSerializer (use to match Ember Data’s RestSerializer expected response format). You should use these if your app\'s backend will be built to conform to either standard."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, there\'s a basic Serializer class that you can use and customize. By default, it takes all the attributes of your model, and returns them under a root key of the model type. Suppose you had the following author in your database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"{\\n  id: 1,\\n  firstName: \'Keyser\',\\n  lastName: \'Soze\'\\n  age: 145\\n}"],[10],[10],[7,"p"],[9],[0,"and you had this route"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"The response would look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"GET /authors/1\\n\\n{\\n  author: {\\n    id: 1,\\n    firstName: \'Keyser\',\\n    lastName: \'Soze\',\\n    age: 145\\n  }\\n}"],[10],[10],[7,"p"],[9],[0,"Remember, your Mirage server should mimic your backend server. Let\'s say your backend server returns dasherized object keys instead of camel cased. You can customize the response by extending the base Serializer and overwriting "],[7,"code"],[9],[0,"keyForAttribute"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," Ember "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"const"],[10],[0," { dasherize } = Ember.String;\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n\\n  keyForAttribute(key) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," dasherize(key);\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now, without having to edit your route handler, the response would look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"GET /authors/1\\n\\n{\\n  author: {\\n    id: 1,\\n    \'first-name\': \'Keyser\',\\n    \'last-name\': \'Soze\',\\n    age: 145\\n  }\\n}"],[10],[10],[7,"p"],[9],[0,"Just like in Ember, the "],[7,"code"],[9],[0,"serializers/application.js"],[10],[0," file will apply to all your responses. You can also create per-model serializers, for example to include only some attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," ApplicationSerializer "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./application\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," ApplicationSerializer.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'firstName\'"],[10],[0,"]\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"View the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"full Serializer API"],[10],[0," to learn more about customizing your responses."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","associations"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#associations"],[11,"class","heading-anchor"],[9],[0,"Associations"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can define associations between your models, which makes dealing with related data easier. For example, let\'s say an author has many posts, and when you delete an author your server also deletes all the related posts."],[10],[0,"\\n"],[7,"p"],[9],[0,"We can define the relationship on our author model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"posts"],[10],[0,": hasMany()\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"hasMany"],[10],[0," tells Mirage to manage a "],[7,"code"],[9],[0,"postIds: []"],[10],[0," array on our author model. Now, our route handler for deleting an author looks like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = schema.authors.find(request.params.id);\\n\\n  author.posts.delete();\\n  author.delete();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"A response with DELETE\'s default status code of 200 would then be returned."],[10],[0,"\\n"],[7,"p"],[9],[0,"Associations are also useful in combination with serializers. With the relationship defined above on our "],[7,"code"],[9],[0,"author"],[10],[0," model, we can use a shorthand and a custom serializer to sideload an author\'s related posts:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"include"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'posts\'"],[10],[0,"]\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now a request for an author responds with the following:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"GET /authors/1\\n\\n{\\n  author: {\\n    id: 1,\\n    name: \'Link\'\\n  },\\n  posts: [\\n    {id: 1, authorId: 1, title: \\"The Beauty of Hyrule\\"},\\n    {id: 2, authorId: 1, title: \\"Really, I\'m an Elf!\\"},\\n    {id: 3, authorId: 1, title: \\"Ganondorf is my Father\\"}\\n  ]\\n}"],[10],[10],[7,"aside"],[11,"class","Docs-page__aside"],[9],[0,"\\n  "],[7,"p"],[9],[0,"camelCased attributes let you stick to conventional JavaScript when working with models in your route handler and scenario code."],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Mirage\'s database uses camelCase for all model attributes, including foreign keys (e.g. "],[7,"code"],[9],[0,"authorId"],[10],[0," in the example above), but you can customize the format that gets sent in the response by overwriting your serializer\'s "],[7,"code"],[9],[0,"keyForRelatedCollection"],[10],[0,". See "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"the serializer guide"],[10],[0," for more details."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","dynamic-status-codes-and-http-headers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#dynamic-status-codes-and-http-headers"],[11,"class","heading-anchor"],[9],[0,"Dynamic status codes and HTTP headers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"By default, Mirage sets the HTTP code of a response based on the verb being used:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"code"],[9],[0,"get"],[10],[0,", "],[7,"code"],[9],[0,"put"],[10],[0," and "],[7,"code"],[9],[0,"del"],[10],[0," are 200"],[10],[0,"\\n"],[7,"li"],[9],[7,"code"],[9],[0,"post"],[10],[0," is 201"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, a header for "],[7,"code"],[9],[0,"Content-Type"],[10],[0," is set to "],[7,"code"],[9],[0,"application/json"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can customize both the response code and headers by returning a "],[7,"code"],[9],[0,"Response"],[10],[0," in your route handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Response } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).author;\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (attrs.name) {\\n      "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.create(attrs);\\n    } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"else"],[10],[0," {\\n      "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," Response("],[7,"span"],[11,"class","hljs-number"],[9],[0,"400"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"some"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'header\'"],[10],[0,"}, {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"errors"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'name cannot be blank\'"],[10],[0,"]});\\n    }\\n  });\\n}"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","fully-qualified-urls"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#fully-qualified-urls"],[11,"class","heading-anchor"],[9],[0,"Fully qualified URLs"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Route handlers for paths without a domain (e.g. "],[7,"code"],[9],[0,"this.get(\'/authors\')"],[10],[0,") work for requests that target the current domain. To simulate other-origin requests, specify the fully qualified URL for your route handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'https://api.github.com/users/samselikoff/events\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," [];\\n});"],[10],[10],[0,""],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"That\'s the essentials of defining your routes. Next, you\'ll learn how to seed your database with some starting data, both in development and within tests."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/writing-your-server/defining-routes/template.hbs"}})
e.default=s}),define("dummy/pods/docs-old/writing-your-server/seeding-your-database/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"dM71pAEN",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","seeding-your-database"],[11,"class","docs-md__h1"],[9],[0,"Seeding your database"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Once you\'ve defined your server\'s routes, you\'ll probably want to seed your database with some initial data. You can use factories or fixtures, or both."],[10],[0,"\\n"],[7,"p"],[9],[0,"In general Mirage recommends that you use factories, for a few reasons:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"they\'re versatile and give you more control over data creation"],[10],[0,"\\n"],[7,"li"],[9],[0,"they make your tests more intention-revealing"],[10],[0,"\\n"],[7,"li"],[9],[0,"they\'re easier to maintain and change"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"First, we\'ll look at using factories."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","defining-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#defining-factories"],[11,"class","heading-anchor"],[9],[0,"Defining factories"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"If you\'ve never used factories before, think of them as a way to make database records for your models. You define factories by creating files under the "],[7,"code"],[9],[0,"/mirage/factories"],[10],[0," directory. The name of the factory, which you reference in your tests, is determined by the filename."],[10],[0,"\\n"],[7,"p"],[9],[0,"Factories have attributes which can be strings, numbers, booleans or functions. Let\'s define a factory for our "],[7,"code"],[9],[0,"author"],[10],[0," model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"ember g mirage-factory author"],[10],[10],[0,""],[7,"p"],[9],[0,"This creates a factory file for us. Let\'s add some attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  name(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Author "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  },\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"20"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Functions take one parameter, the sequence number of the object being created. This lets you create records with dynamic attributes."],[10],[0,"\\n"],[7,"p"],[9],[0,"Each time this factory is used to create an object, it will have an autogenerated "],[7,"code"],[9],[0,"id"],[10],[0," assigned to it, since it will be inserted into the database. So, the objects created from the example factory above will look like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"{id: 0, name: \\"Author 0\\", age: 20, admin: false}\\n{id: 1, name: \\"Author 1\\", age: 20, admin: false}\\n{id: 2, name: \\"Author 2\\", age: 20, admin: false}"],[10],[10],[7,"p"],[9],[0,"and so on."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage also pairs great with the Faker.js library, which makes it easy to create more realistic looking data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," faker "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'faker\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  firstName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n\\n  lastName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.lastName();\\n  },\\n\\n  age() {\\n    "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// list method added by Mirage"],[10],[0,"\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.random.number({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"min"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"18"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"max"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"65"],[10],[0," });\\n  },\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Once you\'ve defined your factories, you can use them to seed your database via the "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0," methods."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","using-factories-in-development"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-factories-in-development"],[11,"class","heading-anchor"],[9],[0,"Using factories in development"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To seed your database in development, use the "],[7,"code"],[9],[0,"mirage/scenarios/default.js"],[10],[0," file that was created for you when you installed Mirage. A simple scenario may look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,"});\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"20"],[10],[0,", { author });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that this scenario will be ignored during testing. This is so you can change your development data without affecting your tests."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","using-factories-in-testing"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-factories-in-testing"],[11,"class","heading-anchor"],[9],[0,"Using factories in testing"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"During acceptance testing, Mirage\'s initializer is run when your Ember app starts up, and you\'ll have access to a "],[7,"code"],[9],[0,"server"],[10],[0," variable within each test. Each test will start with a clean database, so you can use "],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0," to define your data on a per-test basis:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can view the authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'p\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0," );\\n  });\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","using-scenarios-in-testing"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-scenarios-in-testing"],[11,"class","heading-anchor"],[9],[0,"Using scenarios in testing"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"If you want to run the same scenario in your tests that runs in development, you can import a scenario and run your server through it:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," defaultScenario "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'../../mirage/scenarios/default\'"],[10],[0,";\\n\\ntest("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can view the authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  defaultScenario(server);\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'p\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Learn more about acceptance testing in the "],[7,"a"],[11,"href","../acceptance-testing"],[11,"class","docs-md__a"],[9],[0,"next section"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","overriding-factory-attributes"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#overriding-factory-attributes"],[11,"class","heading-anchor"],[9],[0,"Overriding factory attributes"],[10],[10],[0,"\\n    "],[7,"p"],[9],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0," use the attributes you\'ve defined on your factory to create the model; however, it\'s often convenient to override these attributes at the time of creation."],[10],[0,"\\n"],[7,"p"],[9],[0,"To override attributes, pass in an object as the last argument to "],[7,"code"],[9],[0,"create"],[10],[0," or "],[7,"code"],[9],[0,"createList"],[10],[0," with the attributes you want to override. For instance, if we had the following factory definition"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"20"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"false"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"then by default authors created from this factory would have an "],[7,"code"],[9],[0,"admin"],[10],[0," attribute of "],[7,"code"],[9],[0,"false"],[10],[0," and an "],[7,"code"],[9],[0,"age"],[10],[0," of 20:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,");\\nauthor.admin "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// false"],[10],[0,"\\nauthor.age   "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// 20"],[10],[10],[10],[0,""],[7,"p"],[9],[0,"If we wanted to make an admin, we could do the following:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\nauthor.admin "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// true"],[10],[0,"\\nauthor.age   "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// 20"],[10],[10],[10],[0,""],[7,"p"],[9],[0,"We can also override multiple attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"admin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"age"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"30"],[10],[0," });\\nauthor.admin "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// true"],[10],[0,"\\nauthor.age   "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// 30"],[10],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","relationships-with-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#relationships-with-factories"],[11,"class","heading-anchor"],[9],[0,"Relationships with factories"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can also create related data with factories. Assuming you have the relationships defined on your models, you can pass in related data as an override:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," author = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'author\'"],[10],[0,");\\nserver.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", { author });"],[10],[10],[0,""],[7,"p"],[9],[0,"Now that the foreign keys are set up, your models, shorthand routes and serializers should work as expected."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[0,"\\n      "],[7,"h2"],[11,"id","fixtures"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#fixtures"],[11,"class","heading-anchor"],[9],[0,"Fixtures"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can also choose to use fixtures instead of (or in addition to) factories. If you\'ve never used fixtures before, think of a fixture file as a database table. To add data to your "],[7,"code"],[9],[0,"authors"],[10],[0," table, for instance, create the file "],[7,"code"],[9],[0,"/mirage/fixtures/authors.js"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// /mirage/fixtures/authors.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," [\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Epona\'"],[10],[0,"}\\n];"],[10],[10],[0,""],[7,"p"],[9],[0,"Fixture filenames are always plural, and export arrays of POJOs. During development, this data will be added to Mirage\'s database and will be available in route handlers via "],[7,"code"],[9],[0,"db.authors"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Use the "],[7,"code"],[9],[0,"server.loadFixtures()"],[10],[0," API to load some or all of your fixture files in development (by calling it from "],[7,"code"],[9],[0,"scenario/default.js"],[10],[0,") or from within a test. "],[7,"a"],[11,"href","../configuration/#loadFixtures"],[11,"class","docs-md__a"],[9],[0,"See the guide"],[10],[0," for more info."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","relationships-with-fixtures"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#relationships-with-fixtures"],[11,"class","heading-anchor"],[9],[0,"Relationships with fixtures"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To create related data, you\'ll need to manage the foreign keys yourself. Let\'s look at an example."],[10],[0,"\\n"],[7,"p"],[9],[0,"Suppose an "],[7,"code"],[9],[0,"author"],[10],[0," has many "],[7,"code"],[9],[0,"blogPosts"],[10],[0,", and each "],[7,"code"],[9],[0,"blogPost"],[10],[0," belongs to an "],[7,"code"],[9],[0,"author"],[10],[0,". Your fixture data may look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// /mirage/fixtures/authors.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," [\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Link\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"blogPostIds"],[10],[0,": [ "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0," ] },\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"firstName"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Zelda\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"blogPostIds"],[10],[0,": [ "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0," ] }\\n];\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// /mirage/fixtures/blog-posts.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," [\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"authorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," },\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Ipsum\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"authorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," },\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dolor\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"authorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0," }\\n];"],[10],[10],[0,""],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"You should now know how to seed your database with data, both during development and testing! Let\'s wrap up with a look at how to use your shiny new client-side server to write some acceptance tests for your Ember app."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs-old/writing-your-server/seeding-your-database/template.hbs"}})
e.default=s}),define("dummy/pods/docs/data-layer/database/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"f5KFCrxA",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","the-database"],[11,"class","docs-md__h1"],[9],[0,"The Database"],[10],[0,"\\n    "],[7,"p"],[9],[0,"At the core of Mirage\'s data layer is a simple in-memory database. This database stores all of Mirage\'s initial state, and then your route handlers access and modify that state as you use your application."],[10],[0,"\\n"],[7,"p"],[9],[0,"The database is what allows Mirage to mimic a production server, giving you the ability to write complete dynamic features in your Ember app."],[10],[0,"\\n"],[7,"p"],[9],[0,"Most of your Mirage code will not access the database directly, but rather will interact with it through Mirage\'s ORM. We\'ll cover the ORM in the next section of these guides."],[10],[0,"\\n"],[7,"p"],[9],[0,"However, it\'s good to know that whether or not you use the ORM, you can always interact with the database directly."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, you could seed it with some data in "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.db.loadData({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n      { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0," },\\n      { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0," },\\n      { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," },\\n    ]\\n  });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"and then can access it in your route handlers using the "],[7,"code"],[9],[0,"schema"],[10],[0," argument:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.db.movies;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This route handler would then respond with the data you loaded:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"[\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0," },\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0," },\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," }\\n]"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that each record has an "],[7,"code"],[9],[0,"id"],[10],[0," field, since the database assigns all new records an auto-incrementing ID."],[10],[0,"\\n"],[7,"p"],[9],[0,"The most common place you\'ll use the database directly is in your tests, where you can access it via "],[7,"code"],[9],[0,"this.server.db"],[10],[0,". It can be useful to assert against the state of Mirage\'s database to verify that your Ember app\'s network requests are sending over the correct data."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// tests/movie-test.js"],[10],[0,"\\ntest("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can create a movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/new\'"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," fillIn("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.title\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'The Dark Knight\'"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," click("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'.submit\'"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h2\'"],[10],[0,").includesText("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'New movie saved!\'"],[10],[0,");\\n  assert.equal("],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server.db.movies["],[7,"span"],[11,"class","hljs-number"],[9],[0,"0"],[10],[0,"].title, "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'The Dark Knight\'"],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can view the rest of the Database APIs in the "],[1,[29,"docs-link",["Db","docs.api.item","modules/ember-cli-mirage/db-collection~DbCollection"],null],false],[0," and "],[1,[29,"docs-link",["DbCollection","docs.api.item","modules/ember-cli-mirage/db~Db"],null],false],[0," API reference."],[10],[0,"\\n"],[7,"p"],[9],[0,"Next, we\'ll learn about Mirage\'s ORM."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/data-layer/database/template.hbs"}})
e.default=s}),define("dummy/pods/docs/data-layer/factories/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"Q2QlN1Ta",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","factories"],[11,"class","docs-md__h1"],[9],[0,"Factories"],[10],[0,"\\n    "],[7,"p"],[9],[0,"One of the main benefits of using Mirage is the ability to quickly put your server into different states."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, you might be developing a feature and want to see how the UI renders for both a logged-in user and an anonymous user. This is the kind of thing that\'s a pain when using a real backend server, but with Mirage it\'s as simple as flipping a JavaScript variable and live-reloading your Ember app."],[10],[0,"\\n"],[7,"p"],[9],[7,"strong"],[9],[0,"Factories"],[10],[0," are classes that help you organize your data-creation logic, making it easier to define different server states during development or within tests."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s see how they work."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","defining-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#defining-factories"],[11,"class","heading-anchor"],[9],[0,"Defining factories"],[10],[10],[0,"\\n    \\n      "],[7,"h3"],[11,"id","your-first-factory"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#your-first-factory"],[11,"class","heading-anchor"],[9],[0,"Your first factory"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Say we have a "],[7,"code"],[9],[0,"Movie"],[10],[0," model defined in Mirage. (Remember, if you\'re using Ember Data you won\'t have this file on disk. The Model definition will be automatically generated for you.)"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"To seed Mirage\'s database with some movies so you can start developing your app, use the "],[7,"code"],[9],[0,"server.create"],[10],[0," method in the "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,");\\n\\n}"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"server.create"],[10],[0," takes the singular hyphenated form of your model\'s class name as its first argument."],[10],[0,"\\n"],[7,"p"],[9],[0,"Because we have no Factory defined for a "],[7,"code"],[9],[0,"Movie"],[10],[0,", "],[7,"code"],[9],[0,"server.create(\'movie\')"],[10],[0," will just create an empty record and insert it into the database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// server.db.dump();"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0," }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Not a very interesting record."],[10],[0,"\\n"],[7,"p"],[9],[0,"However, we can pass attributes of our own as the second argument to "],[7,"code"],[9],[0,"server.create"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'10/26/2014\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n  });\\n\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Now our database looks like this"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'10/26/2014\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n    }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"and we\'ll actually be able to develop our UI against realistic data."],[10],[0,"\\n"],[7,"p"],[9],[0,"This is a great way to start, but it can be cumbersome to manually define every attribute (and relationship) when working on data-driven applications. It would be nice if we had a way to dynamically generate some of these attributes."],[10],[0,"\\n"],[7,"p"],[9],[0,"Fortunately, that\'s exactly what Factories let us do!"],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s generate a Factory for our movie using"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"ember g mirage-factory movie"],[10],[10],[7,"p"],[9],[0,"which creates this file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Right now the Factory is empty. Let\'s define a property on it:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie title\'"],[10],[0,"\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now "],[7,"code"],[9],[0,"server.create(\'movie\')"],[10],[0," will use the properties from this factory. The inserted record will look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie title\'"],[10],[0," }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"We can also make this property a function."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  title(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Movie "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"i"],[10],[0," is an incrementing index that lets us make our factory attributes more dynamic."],[10],[0,"\\n"],[7,"p"],[9],[0,"If we use the "],[7,"code"],[9],[0,"server.createList"],[10],[0," method, we can quickly generate five movies"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"and with the above factory definition, our database will look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 1\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 2\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 3\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'4\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 4\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'5\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 5\'"],[10],[0," }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Let\'s add some more properties to our factory:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," faker "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'faker\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  title(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Movie "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,";\\n  },\\n\\n  releaseDate() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.date.past().toLocaleDateString();\\n  },\\n\\n  genre(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," genres = [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Drama\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Comedy\'"],[10],[0," ];\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," genres[i % genres.length];\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Here we\'ve installed the "],[7,"a"],[11,"href","https://github.com/marak/Faker.js/"],[11,"class","docs-md__a"],[9],[0,"Faker.js"],[10],[0," library to help us generate random dates."],[10],[0,"\\n"],[7,"p"],[9],[0,"Now "],[7,"code"],[9],[0,"server.createList(\'movie\', 5)"],[10],[0," gives us this data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'5/14/2018\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2/22/2019\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Drama\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'6/2/2018\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Comedy\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'4\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 4\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'7/29/2018\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'5\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 5\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'6/30/2018\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Drama\'"],[10],[0," },\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"As you can see, Factories let us rapidly generate different scenarios for our dynamic server data."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","attribute-overrides"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#attribute-overrides"],[11,"class","heading-anchor"],[9],[0,"Attribute overrides"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Factories are great for defining the \\"base case\\" of your models, but there\'s plenty of times where you\'ll want to override attributes from your factory with specific values."],[10],[0,"\\n"],[7,"p"],[9],[0,"The last argument to "],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0," accepts a POJO of attributes that will override anything from your factory."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Using only the base factory"],[10],[0,"\\nserver.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// gives us this object:"],[10],[0,"\\n{ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'01/01/2000\'"],[10],[0," }\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Passing in specific values to override certain attributes"],[10],[0,"\\nserver.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0," });\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// gives us this object:"],[10],[0,"\\n{ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'01/01/2000\'"],[10],[0," }"],[10],[10],[0,""],[7,"p"],[9],[0,"Think of your factory attributes as a reasonable \\"base case\\" for your models, and then override them in development and testing scenarios as you have need for specific values."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","dependent-attributes"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#dependent-attributes"],[11,"class","heading-anchor"],[9],[0,"Dependent attributes"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Attributes can depend on other attributes via "],[7,"code"],[9],[0,"this"],[10],[0," from within a function. This can be useful for quickly generating things like usernames from names:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," faker "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'faker\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  name() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.findName();\\n  },\\n\\n  username() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".name.replace("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\' \'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'\'"],[10],[0,").toLowerCase();\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Calling "],[7,"code"],[9],[0,"server.createList(\'user\', 3)"],[10],[0," with this factory would generate this data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"[\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Retha Donnelly\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"username"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'rethadonnelly\'"],[10],[0," }\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Crystal Schaefer\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"username"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'crystalschaefer\'"],[10],[0," }\\n  { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Jerome Schoen\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"username"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'jeromeschoen\'"],[10],[0," }\\n]"],[10],[10],[0,"\\n      "],[7,"h3"],[11,"id","relationships"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#relationships"],[11,"class","heading-anchor"],[9],[0,"Relationships"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"In the same way that you use the ORM to create relational data, as this example from the "],[7,"em"],[9],[0,"Creating and editing related data"],[10],[0," section of the "],[1,[29,"docs-link",["ORM guide","docs.data-layer.orm"],null],false],[0," illustrates"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," nolan = schema.people.create({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Christopher Nolan\'"],[10],[0," });\\n\\nschema.movies.create({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": nolan,\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"you can also create relational data with your factories:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," nolan = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'director\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Christopher Nolan\'"],[10],[0," });\\n\\nserver.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", {\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": nolan,\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"nolan"],[10],[0," is a model instance, which is why we can just pass it in as an attribute override when creating the Interstellar movie."],[10],[0,"\\n"],[7,"p"],[9],[0,"This also works when using "],[7,"code"],[9],[0,"createList"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'actor\'"],[10],[0,", {\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,")\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"In this way you use factories to help you quickly create graphs of relational data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,").forEach("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"user"],[10],[0," =>"],[10],[0," {\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", { user }).forEach("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"post"],[10],[0," =>"],[10],[0," {\\n    server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'comment\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,", { post });\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This code generates 5 users, each of which has 10 posts with each post having 5 comments. Assuming these relationships are defined in your models, all the foreign keys would be set correctly in Mirage\'s database."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","the-aftercreate-hook"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#the-aftercreate-hook"],[11,"class","heading-anchor"],[9],[0,"The afterCreate hook"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"In many cases, setting up relationships manually (as shown in the previous section) is perfectly fine. However there are times where it makes more sense to have base case relationships set up for you automatically."],[10],[0,"\\n"],[7,"p"],[9],[0,"Enter "],[7,"code"],[9],[0,"afterCreate"],[10],[0,". It\'s a hook that\'s called after a model has been created using the factory\'s base attributes. This hook lets you perform additional logic on your newly-created models before they\'re returned from "],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s see how it works."],[10],[0,"\\n"],[7,"p"],[9],[0,"Say you have these two models in your app:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"post"],[10],[0,": belongsTo()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Let\'s further suppose that in your app, it is never valid to create a post without an associated user."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can use "],[7,"code"],[9],[0,"afterCreate"],[10],[0," to enforce this behavior:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    post.update({\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,")\\n    });\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The first argument to "],[7,"code"],[9],[0,"afterCreate"],[10],[0," is the object that was just created (in this case the "],[7,"code"],[9],[0,"post"],[10],[0,"), and the second is a reference to the Mirage server instance, so that you can invoke other factories or inspect any other server state needed to customize your newly-created object."],[10],[0,"\\n"],[7,"p"],[9],[0,"In this example we\'re immediately creating a user for this post. That way elsewhere in your app (say a test), you could just create a post"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"and you\'d be working with a valid record, since that post would have an associated user."],[10],[0,"\\n"],[7,"p"],[9],[0,"Now, there\'s one problem with the way we\'ve implemented this so far. Our "],[7,"code"],[9],[0,"afterCreate"],[10],[0," hook updates the post\'s user "],[7,"em"],[9],[0,"regardless if that post already had a user associated with it"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"That means that this code"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," tomster = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Tomster\'"],[10],[0,");\\nserver.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": tomster });"],[10],[10],[0,""],[7,"p"],[9],[0,"would not work as we expect, since the attribute overrides while the object is being created, but the logic in "],[7,"code"],[9],[0,"afterCreate"],[10],[0," runs "],[7,"em"],[9],[0,"after"],[10],[0," the post has been created. Thus, this post would be associated with the newly created post from the hook, rather than Tomster."],[10],[0,"\\n"],[7,"p"],[9],[0,"To fix this, we can update our "],[7,"code"],[9],[0,"afterCreate"],[10],[0," hook to first check if the newly created post already has a user associated with it. Only if it doesn\'t will we create a new one and update the relationship."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (!post.user) {\\n      post.update({\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,")\\n      });\\n    }\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now callers can pass in specific users"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": tomster });"],[10],[10],[0,""],[7,"p"],[9],[0,"or omit specifying a user if the details of that user aren\'t important"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"and in both cases they\'ll end up with a valid record."],[10],[0,"\\n"],[7,"p"],[9],[7,"code"],[9],[0,"afterCreate"],[10],[0," can also be used to create "],[7,"code"],[9],[0,"hasMany"],[10],[0," associations, as well as apply any other relevant creation logic."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","traits"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#traits"],[11,"class","heading-anchor"],[9],[0,"Traits"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Traits are an important feature of factories that make it easy to group related attributes. Define them by importing "],[7,"code"],[9],[0,"trait"],[10],[0," and adding a new key to your factory."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, here we define a trait named "],[7,"code"],[9],[0,"published"],[10],[0," on our post factory:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"published"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isPublished"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"publishedAt"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2010-01-01 10:00:00\'"],[10],[0,"\\n  })\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can pass anything into "],[7,"code"],[9],[0,"trait"],[10],[0," that you can into the base factory."],[10],[0,"\\n"],[7,"p"],[9],[0,"We can use our new trait by passing in the name of the trait as a string argument to "],[7,"code"],[9],[0,"create"],[10],[0," or "],[7,"code"],[9],[0,"createList"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,");\\nserver.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"The created posts will have all the base attributes, as well as everything under the "],[7,"code"],[9],[0,"published"],[10],[0," trait."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also compose multiple traits together:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"published"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isPublished"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"publishedAt"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2010-01-01 10:00:00\'"],[10],[0,"\\n  }),\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"official"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isOfficial"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n  })\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"We can pass our new traits into "],[7,"code"],[9],[0,"create"],[10],[0," or "],[7,"code"],[9],[0,"createList"],[10],[0," in any order:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," officialPost = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'official\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," officialPublishedPost = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'official\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"If multiple traits set the same attribute, the last trait wins."],[10],[0,"\\n"],[7,"p"],[9],[0,"As always, you can pass in an object of attribute overrides as the last argument:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'published\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0," });"],[10],[10],[0,""],[7,"p"],[9],[0,"When combined with the "],[7,"code"],[9],[0,"afterCreate()"],[10],[0," hook, traits simplify the process of setting up related object graphs."],[10],[0,"\\n"],[7,"p"],[9],[0,"Here we define a "],[7,"code"],[9],[0,"withComments"],[10],[0," trait that creates 3 comments for a newly created post:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/user.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Lorem ipsum\'"],[10],[0,",\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"withComments"],[10],[0,": trait({\\n    afterCreate(post, server) {\\n      server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'comment\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", { post });\\n    }\\n  })\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"We can use this trait to quickly make 10 posts with 3 comments each:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'withComments\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Combining traits with the "],[7,"code"],[9],[0,"afterCreate"],[10],[0," hook is one of the most powerful features of Mirage factories. Effective use of this technique will dramatically simplify the process of creating different graphs of relational data for your app."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","the-association-helper"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#the-association-helper"],[11,"class","heading-anchor"],[9],[0,"The association helper"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"association()"],[10],[0," helper provides some sugar for creating "],[7,"code"],[9],[0,"belongsTo"],[10],[0," relationships."],[10],[0,"\\n"],[7,"p"],[9],[0,"As we saw earlier, given a "],[7,"code"],[9],[0,"Post"],[10],[0," that "],[7,"code"],[9],[0,"belongsTo"],[10],[0," a "],[7,"code"],[9],[0,"User"],[10],[0,", we were able to use the "],[7,"code"],[9],[0,"afterCreate"],[10],[0," hook to pre-wire that relationship:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  afterCreate(post, server) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (!post.user) {\\n      post.update({\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": server("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,")\\n      });\\n    }\\n  }\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"association()"],[10],[0," helper effectively replaces this code:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, association } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": association()\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This should help reduce some of the boilerplate in your factory definitions."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also use "],[7,"code"],[9],[0,"association()"],[10],[0," within traits"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, association, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"withUser"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": association()\\n  })\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"and it also accepts additional traits and overrides for the related model\'s factory:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory, association, trait } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"withUser"],[10],[0,": trait({\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"user"],[10],[0,": association("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'admin\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"role"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'editor\'"],[10],[0," })\\n  })\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"There is no equivalent helper for "],[7,"code"],[9],[0,"hasMany"],[10],[0," relationships, so you can continue to use the "],[7,"code"],[9],[0,"afterCreate"],[10],[0," hook to seed those relationships."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","using-factories"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#using-factories"],[11,"class","heading-anchor"],[9],[0,"Using factories"],[10],[10],[0,"\\n    \\n      "],[7,"h3"],[11,"id","in-development"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#in-development"],[11,"class","heading-anchor"],[9],[0,"In development"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To use your factories to seed your development database, call "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0," in your "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"There\'s no explicit API for switching scenarios in development, but you can just use JavaScript modules to split things up."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, you could create a new file for each scenario that contains some seeding logic"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/admin.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"isAdmin"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"...export all scenarios as an object from an "],[7,"code"],[9],[0,"index.js"],[10],[0," file"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/index.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," anonymous "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./anonymous\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," subscriber "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./subscriber\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," admin "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./admin\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," scenarios = {\\n  anonymous,\\n  subscriber,\\n  admin\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"...and then import that object into "],[7,"code"],[9],[0,"default.js"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Now you can quickly switch your development state by changing a single variable:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," scenarios "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'./index\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Choose one"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"const"],[10],[0," state =\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// \'anonymous\'"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// \'subscriber\'"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'admin\'"],[10],[0,"\\n;\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  scenarios[state](server);\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"This can be handy while developing your app or sharing the different states of a new feature with your team."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","in-testing"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#in-testing"],[11,"class","heading-anchor"],[9],[0,"In testing"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"When running your app in the "],[7,"code"],[9],[0,"test"],[10],[0," environment, your entire Mirage server is loaded, "],[7,"em"],[9],[0,"except"],[10],[0," for your "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file."],[10],[0,"\\n"],[7,"p"],[9],[0,"That means each test starts out with a clean database, giving you the opportunity to set up only the state needed for that test. It also keeps your development scenarios isolated from your tests, so that you don\'t inadvertently break your test suite while tweaking your development scenario."],[10],[0,"\\n"],[7,"p"],[9],[0,"To seed Mirage\'s database within a test, use "],[7,"code"],[9],[0,"this.server"],[10],[0," to access the "],[7,"code"],[9],[0,"create"],[10],[0," and "],[7,"code"],[9],[0,"createList"],[10],[0," methods:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the movies on the homepage\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,");\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'li.movie\'"],[10],[0,").exists({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"length"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0," });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"In this test, we start our Mirage server out with 5 movies. Then we boot up the Ember app and visit the "],[7,"code"],[9],[0,"/"],[10],[0," route, and finally assert that those movies show up in our UI."],[10],[0,"\\n"],[7,"p"],[9],[0,"When we write another test, the database will start out empty so that none of Mirage\'s state leaks across tests."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can read more about testing with Mirage in the "],[7,"a"],[11,"href",""],[11,"class","docs-md__a"],[9],[0,"Testing"],[10],[0," section of these guides."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","factory-best-practices"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#factory-best-practices"],[11,"class","heading-anchor"],[9],[0,"Factory best practices"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"In general, it\'s best to define a model\'s base factory using only the attributes and relationships that comprise the minimal valid state for that model. You can then use "],[7,"code"],[9],[0,"afterCreate"],[10],[0," and traits to define other common states that contain valid, related changes on top of the base case."],[10],[0,"\\n"],[7,"p"],[9],[0,"This advice goes a long way towards keeping your test suite maintainable."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you don\'t use traits and "],[7,"code"],[9],[0,"afterCreate"],[10],[0,", your tests will become bogged down in irrelevant details related to setting up the data needed for that test."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the title of a post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," session = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'session\'"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," user = server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,", { session });\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", {\\n    user,\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"slug"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'my-first-post\'"],[10],[0,"\\n  });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/post/my-first-post\'"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1\'"],[10],[0,").hasText("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This test is only concerned with asserting the title of a post gets rendered to the screen, but it has lots of boilerplate code that\'s only there to get the post in a valid state."],[10],[0,"\\n"],[7,"p"],[9],[0,"If we used "],[7,"code"],[9],[0,"afterCreate"],[10],[0," instead, the developer writing this test could simply create a post with a specified "],[7,"code"],[9],[0,"title"],[10],[0," and "],[7,"code"],[9],[0,"slug"],[10],[0,", since those are the only details relevant to the test:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the title of a post\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'post\'"],[10],[0,", {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"slug"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'my-first-post\'"],[10],[0,"\\n  });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/post/my-first-post\'"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1\'"],[10],[0,").hasText("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'My first post\'"],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[7,"code"],[9],[0,"afterCreate"],[10],[0," could take care of setting up the session and user in valid states, and associating the user with the post, so that the test can stay concise and focused on what it\'s actually testing."],[10],[0,"\\n"],[7,"p"],[9],[0,"Effective use of traits and "],[7,"code"],[9],[0,"afterCreate"],[10],[0," keeps your test suite less brittle and more robust to changes in your data layer, since tests only declare the bare minimum setup logic needed to verify their assertions."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"Up next, we\'ll take a look at how to use Fixtures as an alternative way to seed your database."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/data-layer/factories/template.hbs"}})
e.default=s}),define("dummy/pods/docs/data-layer/fixtures/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"5JO+i/+A",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","fixtures"],[11,"class","docs-md__h1"],[9],[0,"Fixtures"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Fixtures are data files that can be used to seed your database, either during development or within tests. In general Mirage recommends using factories over fixtures, though there are times where fixtures are suitable."],[10],[0,"\\n"],[7,"p"],[9],[0,"To add data to a database table "],[7,"code"],[9],[0,"countries"],[10],[0,", for instance, first create the file "],[7,"code"],[9],[0,"mirage/fixtures/countries.js"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/fixtures/countries.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," [\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'United States\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Canada\'"],[10],[0,"},\\n  {"],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Mexido\'"],[10],[0,"},\\n  ...\\n];"],[10],[10],[0,""],[7,"p"],[9],[0,"Fixture filenames are always plural, and export arrays of POJOs."],[10],[0,"\\n"],[7,"p"],[9],[0,"To load this fixture file into our database during development, we can use the "],[7,"code"],[9],[0,"loadFixtures"],[10],[0," API in our "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n  server.loadFixtures("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'countries\'"],[10],[0,");\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"We can also call "],[7,"code"],[9],[0,"server.loadFixtures()"],[10],[0," (with no arguments) to have all defined fixture files loaded into the database."],[10],[0,"\\n"],[7,"p"],[9],[0,"Similarly, we can call "],[7,"code"],[9],[0,"loadFixtures"],[10],[0," from within a test to load this data into our database:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'I can see the countries\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.loadFixtures("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'countries\'"],[10],[0,");\\n\\n  visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  andThen("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n    equal( find("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'select.countries option\'"],[10],[0,").length, "],[7,"span"],[11,"class","hljs-number"],[9],[0,"100"],[10],[0," );\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"See the "],[7,"code"],[9],[0,"server.loadFixtures"],[10],[0," API docs for more information."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/data-layer/fixtures/template.hbs"}})
e.default=s}),define("dummy/pods/docs/data-layer/orm/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"V5PbhGfv",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","the-orm"],[11,"class","docs-md__h1"],[9],[0,"The ORM"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage originally shipped with just a database as its data layer. While helpful, users still had to write a lot of code to reproduce their modern, complex backends. In particular, dealing with relationships was a big pain point."],[10],[0,"\\n"],[7,"p"],[9],[0,"The solution was to add an Object Relational Mapper, or ORM, to Mirage."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s see how an ORM allows Mirage to do more of the heavy lifting for you."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","motivation"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#motivation"],[11,"class","heading-anchor"],[9],[0,"Motivation"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Consider a database that looks like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"db.dump();\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Result"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0," },\\n    { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"The first problem you\'ll encounter when writing a route handler is how to transform this raw data into the format your Ember app expects – that is, how to match the format of your production API."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s say your backend is using the "],[7,"a"],[11,"href","https://jsonapi.org/"],[11,"class","docs-md__a"],[9],[0,"JSON:API"],[10],[0," format. Your response to a GET request for "],[7,"code"],[9],[0,"/api/movies/1"],[10],[0," should look something like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /api/movies/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Not a huge deal – we could just write this formatting logic directly in our route handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movie = schema.db.movies.find(request.params.id);\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": movie.id,\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": movie.title\\n      }\\n    }\\n  };\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This works. But let\'s say our "],[7,"code"],[9],[0,"Movie"],[10],[0," model had a few more attributes:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Now our route handler needs to be more clever, and make sure all properties other than "],[7,"code"],[9],[0,"id"],[10],[0," end up in the "],[7,"code"],[9],[0,"attributes"],[10],[0," hash:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movie = schema.db.movies.find(request.params.id);\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movieJSON = {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": movie.id,\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { }\\n    }\\n  };\\n  "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Object"],[10],[0,".keys(movie)\\n    .filter("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"key"],[10],[0," =>"],[10],[0," key !=== "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'id\'"],[10],[0,")\\n    .forEach("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"key"],[10],[0," =>"],[10],[0," {\\n      movieJSON[key] = movie[key];\\n    });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," movieJSON;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"As you can see, things get complicated pretty fast."],[10],[0,"\\n"],[7,"p"],[9],[0,"What if we add relationships to the mix? Let\'s say a "],[7,"code"],[9],[0,"Movie"],[10],[0," has a relationship to a "],[7,"code"],[9],[0,"director"],[10],[0,", and it stores that relationship using a "],[7,"code"],[9],[0,"directorId"],[10],[0," foreign key:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'23\'"],[10],[0,"\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"The expected HTTP response for this model now looks like this"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n    },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directors"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'people\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'23\'"],[10],[0," }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"meaning our route handlers need to get even more complex. In particular, they need a robust way to differentiate between a model\'s attributes (like "],[7,"code"],[9],[0,"title"],[10],[0,") and its relationship keys (like "],[7,"code"],[9],[0,"directorId"],[10],[0,")."],[10],[0,"\\n"],[7,"p"],[9],[0,"These sorts of problems turn out to be common enough that we can solve them generally, provided Mirage is aware of your application\'s models and their relationships."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","problems-solved-by-the-orm"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#problems-solved-by-the-orm"],[11,"class","heading-anchor"],[9],[0,"Problems solved by the ORM"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"When Mirage knows about your application\'s domain, it can shoulder the responsibility for the low-level bookkeeping work needed to properly implement your mock server."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s take a look at some examples of how it does this."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","separation-of-formatting-logic"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#separation-of-formatting-logic"],[11,"class","heading-anchor"],[9],[0,"Separation of formatting logic"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"To start, we can tell Mirage about our application\'s schema by defining Mirage models. These models get registered with the ORM and tell Mirage about the shape of your data."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s define a "],[7,"code"],[9],[0,"Movie"],[10],[0," model."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage models are "],[7,"em"],[9],[0,"schemaless in attributes"],[10],[0,", in that they don\'t require you to define plain attributes like "],[7,"code"],[9],[0,"title"],[10],[0," and "],[7,"code"],[9],[0,"releaseDate"],[10],[0,". So, the above model definition works regardless of what attributes your "],[7,"code"],[9],[0,"Movie"],[10],[0," model has."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you\'re using Ember Data, Mirage\'s ORM will automatically register your Ember Data models for you at run time, so you don\'t have to duplicate your domain information in two places."],[10],[0,"\\n"],[7,"p"],[9],[0,"With the "],[7,"code"],[9],[0,"Movie"],[10],[0," model defined, we can update our route handler to use the ORM to respond with a Mirage model instance:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.find(id);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"schema"],[10],[0," argument is how you interact with the ORM."],[10],[0,"\\n"],[7,"p"],[9],[0,"By returning an instance of a Mirage model from a route handler instead of a plain JavaScript object, we can now take advantage of Mirage\'s Serializer layer. Serializers work by turning Models and Collections into formatted JSON responses."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage ships with a JSONAPISerializer out of the box, so assuming it\'s defined as your Application serializer"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { JSONAPISerializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," JSONAPISerializer.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"this route handler will now respond with the payload we expect:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"The ORM is already helping us keep our route handlers tidy by delegating the work of transforming our models into JSON to the Serializer layer."],[10],[0,"\\n"],[7,"p"],[9],[0,"But it gets even more powerful when we add relationships to the mix."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","fetching-related-data"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#fetching-related-data"],[11,"class","heading-anchor"],[9],[0,"Fetching related data"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Let\'s say our "],[7,"code"],[9],[0,"Movie"],[10],[0," has a belongs-to relationship with a "],[7,"code"],[9],[0,"director"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": belongsTo("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'person\'"],[10],[0,")\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"director"],[10],[0," is an instance of a "],[7,"code"],[9],[0,"Person"],[10],[0," model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/person.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Again, if you\'re using Ember Data, both the models and relationships will be automatically generated for you. No need to create this file."],[10],[0,"\\n"],[7,"p"],[9],[0,"Without changing anything about our route handler or serializer, we can now fetch a graph of data by using JSON:API includes."],[10],[0,"\\n"],[7,"p"],[9],[0,"The following request"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"GET /api/movies/1?include=director"],[10],[10],[7,"p"],[9],[0,"will now generate this response:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n    },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'people\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0," }\\n      }\\n    }\\n  },\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"included"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'people\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Christopher Nolan\'"],[10],[0,"\\n      }\\n    }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"The JSONAPISerializer is able to inspect the ORM so that it can put all models, attributes and relationships in the right place. Our route handler doesn\'t need to change at all."],[10],[0,"\\n"],[7,"p"],[9],[0,"In fact, the route handler we wrote is the same as the default behavior of the Shorthand, meaning we can just switch to using that:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"- this.get(\'/movies/:id\', (schema, request) => {"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   let id = request.params.id;"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return schema.movies.find(id);"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"- });"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ this.get(\'/movies/:id\');"],[10],[10],[10],[0,""],[7,"p"],[9],[0,"This is another example of how the ORM helps various parts of Mirage, like Shorthands and Serializers, simplify your server definition."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","creating-and-editing-related-data"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#creating-and-editing-related-data"],[11,"class","heading-anchor"],[9],[0,"Creating and editing related data"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The ORM also makes creating and editing related data easier than if you only used the raw database records."],[10],[0,"\\n"],[7,"p"],[9],[0,"For instance, to create a "],[7,"code"],[9],[0,"Movie"],[10],[0," and "],[7,"code"],[9],[0,"Person"],[10],[0," with a relationship using only the database, you\'d need to do something like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"server.db.loadData({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"people"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Christopher Nolan\'"],[10],[0,"\\n    }\\n  ],\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,"\\n    }\\n  ]\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Note the "],[7,"code"],[9],[0,"directorId"],[10],[0," foreign key on the "],[7,"code"],[9],[0,"Movies"],[10],[0," record must match the "],[7,"code"],[9],[0,"id"],[10],[0," on the associated "],[7,"code"],[9],[0,"People"],[10],[0," record."],[10],[0,"\\n"],[7,"p"],[9],[0,"Managing raw database data like this quickly gets unwieldy, especially as relationships change over time."],[10],[0,"\\n"],[7,"p"],[9],[0,"Using the ORM via "],[7,"code"],[9],[0,"server.schema"],[10],[0,", we can create this graph without managing any IDs:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," nolan = schema.people.create({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Christopher Nolan\'"],[10],[0," });\\n\\nschema.movies.create({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": nolan,\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"releaseDate"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'October 26, 2014\'"],[10],[0,",\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"genre"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Sci-Fi\'"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Passing in the model instance "],[7,"code"],[9],[0,"nolan"],[10],[0," as the "],[7,"code"],[9],[0,"director"],[10],[0," attribute when creating the movie is enough for all the keys to be properly set up."],[10],[0,"\\n"],[7,"p"],[9],[0,"The ORM also keeps foreign keys in sync as relationships are edited. Given the database"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Star Wars: The Rise of Skywalker\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,"\\n    }\\n  ],\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"people"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Rian Johnson\'"],[10],[0,"\\n    },\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'J.J. Abrams\'"],[10],[0,"\\n    }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"we could write update the movie\'s director like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," episode9 = schema.movies.findBy({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Star Wars: The Rise of Skywalker\'"],[10],[0,"\\n});\\n\\nepisode9.update({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"director"],[10],[0,": schema.people.findBy({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'J.J. Abrams\'"],[10],[0," });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The new database would look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Star Wars: The Rise of Skywalker\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"directorId"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,"\\n    }\\n  ],\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"people"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'2\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Rian Johnson\'"],[10],[0,"\\n    },\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'3\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'J.J. Abrams\'"],[10],[0,"\\n    }\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Note how the "],[7,"code"],[9],[0,"directorId"],[10],[0," was changed in the database, even though we only ever worked with model instances."],[10],[0,"\\n"],[7,"p"],[9],[0,"Importantly, this also holds true for more complex relationships, like one-to-many or many-to-many relationships that have an inverse."],[10],[0,"\\n"],[7,"p"],[9],[0,"The ORM allows Mirage to abstract all this bookkeeping away from your code, and even gives Shorthands enough power to respect arbitrary updates to complex relationship graphs."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"These are some of the main problems addressed by Mirage\'s ORM. Generally, when Mirage knows about your application\'s models and their relationships, it can take on more of the responsibility of configuring your mock server."],[10],[0,"\\n"],[7,"p"],[9],[0,"Be sure to check out the "],[1,[29,"docs-link",["Schema","docs.api.item","modules/ember-cli-mirage/orm/schema~Schema"],null],false],[0,", "],[1,[29,"docs-link",["Model","docs.api.item","modules/ember-cli-mirage/orm/model~Model"],null],false],[0," and "],[1,[29,"docs-link",["Collection","docs.api.item","modules/ember-cli-mirage/orm/collection~Collection"],null],false],[0," API docs to learn about all the available ORM methods. We\'ll also cover Serializers in these guides, where you\'ll learn how to customize the serialized forms of your models and collections to match your production API."],[10],[0,"\\n"],[7,"p"],[9],[0,"Next, let\'s take a look at Factories, which also leverage the ORM to make it easy to create the relational data needed to put your server in a variety of states."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/data-layer/orm/template.hbs"}})
e.default=s}),define("dummy/pods/docs/getting-started/installation/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"sZcEkfM9",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","installation"],[11,"class","docs-md__h1"],[9],[0,"Installation"],[10],[0,"\\n    "],[7,"p"],[9],[0,"To install Mirage, run"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"ember install ember-cli-mirage"],[10],[10],[7,"p"],[9],[0,"Ember should install the addon and add a "],[7,"code"],[9],[0,"/mirage"],[10],[0," directory to the root of your project."],[10],[0,"\\n"],[7,"p"],[9],[0,"Check out the "],[1,[29,"docs-link",["upgrade guide","docs.getting-started.upgrade-guide"],null],false],[0," if you\'re coming from a previous version of Mirage."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","note-for-prettier-users"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#note-for-prettier-users"],[11,"class","heading-anchor"],[9],[0,"Note for Prettier users"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"There\'s an Ember CLI bug that exposes itself when using Prettier + Mirage. A longer-term fix is in the works, but for now, if you\'re using Prettier and install Mirage, you can either"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"pin "],[7,"code"],[9],[0,"eslint-plugin-prettier"],[10],[0," to 2.6.0, or"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"add the following to "],[7,"code"],[9],[0,".eslintignore"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/mirage"],[10],[10],[0,""],[10],[0,"\\n"],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","note-for-fastboot-users"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#note-for-fastboot-users"],[11,"class","heading-anchor"],[9],[0,"Note for FastBoot users"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You might expect Mirage to serve network requests made by your FastBoot app, but because Mirage runs only in the browser, it currently disables itself if your app is being served by FastBoot."],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/issues/1411"],[11,"class","docs-md__a"],[9],[0,"FastBoot support"],[10],[0," is a highly requested feature we are working on. In the meantime, you\'ll need to develop your FastBoot pages against a local server."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can always bypass FastBoot page generation locally by running"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"FASTBOOT_DISABLED=true ember serve"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage will then run in the browser as expected, and you can develop your client app as normal."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/getting-started/installation/template.hbs"}})
e.default=s}),define("dummy/pods/docs/getting-started/overview/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"xvj8LmEA",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","overview"],[11,"class","docs-md__h1"],[9],[0,"Overview"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage lets you simulate API responses by writing "],[7,"strong"],[9],[0,"route handlers"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"The simplest example of a route handler is a function that returns an object:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".namespace = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'api\'"],[10],[0,";\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": [\\n        { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0," } },\\n        { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0," } },\\n        { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," } },\\n      ]\\n    };\\n  });\\n\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Now whenever your Ember app makes a GET request to "],[7,"code"],[9],[0,"/api/movies"],[10],[0,", Mirage will respond with this data."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","dynamic-data"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#dynamic-data"],[11,"class","heading-anchor"],[9],[0,"Dynamic data"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"This works, and is a common way to simulate HTTP responses - but hard-coded responses like this have a few problems:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They\'re inflexible"],[10],[0,". What if you want to change the data for this route in your tests?"],[10],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They contain formatting logic"],[10],[0,". Logic that\'s concerned with the shape of your JSON payload (e.g. the "],[7,"code"],[9],[0,"data"],[10],[0," and "],[7,"code"],[9],[0,"attributes"],[10],[0," keys) is now duplicated across all your route handlers."],[10],[0,"\\n"],[7,"li"],[9],[7,"em"],[9],[0,"They\'re too basic."],[10],[0," Inevitably, when your Mirage server needs to deal with more complex things like relationships, these simple ad hoc responses start to break down."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage provides a "],[7,"strong"],[9],[0,"data layer"],[10],[0," that lets you write more powerful server implementations. Let\'s see how it works by replacing our basic stub data above."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","creating-a-model"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#creating-a-model"],[11,"class","heading-anchor"],[9],[0,"Creating a model"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"First, we\'ll need to tell Mirage that we have a dynamic "],[7,"code"],[9],[0,"Movie"],[10],[0," model."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you\'re using Ember Data and you already have a "],[7,"code"],[9],[0,"Movie"],[10],[0," model defined, you can skip this step! Mirage will automatically generate its models from your Ember Data definitions, so you won\'t have any files in the "],[7,"code"],[9],[0,"mirage/models"],[10],[0," directory."],[10],[0,"\\n"],[7,"p"],[9],[0,"If you\'re not using Ember Data, you can use the "],[7,"code"],[9],[0,"mirage-model"],[10],[0," generator to create a model from the command line:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedbash"],[9],[0,"$ ember g mirage-model movie"],[10],[10],[0,""],[7,"p"],[9],[0,"This generates the following file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n});"],[10],[10],[0,"\\n      "],[7,"h3"],[11,"id","writing-a-dynamic-route-handler"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#writing-a-dynamic-route-handler"],[11,"class","heading-anchor"],[9],[0,"Writing a dynamic route handler"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Models let our route handlers take advantage of Mirage\'s "],[7,"em"],[9],[0,"in-memory database"],[10],[0,". The database makes our route handlers dynamic, so we can change the data that\'s returned without having to rewrite the handler."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s update our route handler to be dynamic:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"schema"],[10],[0," argument lets us access our new "],[7,"code"],[9],[0,"Movie"],[10],[0," model. This route will now respond with all the authors in Mirage\'s database at the time of the request. We can therefore change the data this route responds with by only changing what records are in Mirage\'s database, instead of having to write a different version of the handler for each scenario we want to simulate."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","seeding-the-database"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#seeding-the-database"],[11,"class","heading-anchor"],[9],[0,"Seeding the database"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Right now, if we sent a request to our new handler above, the response would look something like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /api/movies"],[10],[0,"\\ndata: [\\n]"],[10],[10],[0,""],[7,"p"],[9],[0,"That\'s because Mirage\'s database is empty."],[10],[0,"\\n"],[7,"p"],[9],[0,"To actually seed our database with fake data, we\'ll use "],[7,"em"],[9],[0,"factories"],[10],[0,". Factories are objects that make it easy to generate realistic-looking data for your Mirage server. Think of them as blueprints for your models."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s create a factory for our author with"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[7,"span"],[11,"class","hljs-meta"],[9],[0,"$"],[10],[0," ember g mirage-factory movie"],[10],[10],[0,""],[7,"p"],[9],[0,"We can then define some properties on our Factory. They can be simple types like Booleans, Strings or Numbers, or functions that return dynamic data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/factories/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Factory } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n\\n  title(i) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"`Movie "],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${i}"],[10],[0,"`"],[10],[0,"; "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Movie 1, Movie 2, etc."],[10],[0,"\\n  },\\n\\n  year() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," min = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1950"],[10],[0,";\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," max = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2019"],[10],[0,";\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".floor("],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"Math"],[10],[0,".random() * (max - min + "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,")) + min;\\n  },\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"rating"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"PG-13\\""],[10],[0,"\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This factory creates objects like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"[\\n  {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"year"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1992"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"rating"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"PG-13\\""],[10],[0,"\\n  },\\n  {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Movie 2\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"year"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2008"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"rating"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"PG-13\\""],[10],[0,"\\n  },\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n]"],[10],[10],[0,""],[7,"p"],[9],[0,"and so on, which will automatically be inserted into the "],[7,"code"],[9],[0,"movies"],[10],[0," database table. The database will assign each record an "],[7,"code"],[9],[0,"id"],[10],[0,", and now we can interact with this data in our route handlers."],[10],[0,"\\n"],[7,"p"],[9],[0,"To actually use our new factory definition, we can call the "],[7,"code"],[9],[0,"server.create"],[10],[0," and "],[7,"code"],[9],[0,"server.createList"],[10],[0," methods."],[10],[0,"\\n"],[7,"p"],[9],[0,"To seed our development database, use the function in the "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," file:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/scenarios/default.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"server"],[10],[0,") "],[10],[0,"{\\n\\n  server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10"],[10],[0,");\\n\\n};"],[10],[10],[0,""],[7,"p"],[9],[0,"Now when our Ember app makes a GET request to "],[7,"code"],[9],[0,"/api/movies"],[10],[0," using the route handler above, we\'ll see something that looks like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /api/movies"],[10],[0,"\\ndata: [\\n  {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"movies\\""],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"Movie 1\\""],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"year"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1992"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"rating"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"PG-13\\""],[10],[0,"\\n    }\\n  },\\n  {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"movies\\""],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"Movie 2\\""],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"year"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2008"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"rating"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"PG-13\\""],[10],[0,"\\n    }\\n  },\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n]"],[10],[10],[0,""],[7,"p"],[9],[0,"As we can see, this response is now influenced by the run-time state of our database."],[10],[0,"\\n"],[7,"p"],[9],[0,"In acceptance tests, "],[7,"code"],[9],[0,"scenarios/default.js"],[10],[0," is ignored, and instead you can use "],[7,"code"],[9],[0,"this.server"],[10],[0," to setup your database in the state needed for the test:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// tests/acceptance/movies-test.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { setupApplicationTest } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-qunit\'"],[10],[0,";\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { setupMirage } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage/test-support\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"module"],[10],[0,"("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Acceptance | Homepage test\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"hooks"],[10],[0,") "],[10],[0,"{\\n  setupApplicationTest(hooks);\\n  setupMirage(hooks);\\n\\n  test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the movies\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server.createList("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"movie\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,");\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"/home\\""],[10],[0,");\\n\\n    assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"[data-test-id=\'movie-row\']\\""],[10],[0,").exists({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"count"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0," });\\n  });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also pass attribute overrides directly to "],[7,"code"],[9],[0,"create"],[10],[0," or "],[7,"code"],[9],[0,"createList"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can view the movie title\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movie = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"Interstellar\\""],[10],[0," });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"`/movies/"],[7,"span"],[11,"class","hljs-subst"],[9],[0,"${movie.id}"],[10],[0,"`"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'h1\'"],[10],[0,").includesText("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"Interstellar\\""],[10],[0,");\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You now have a simple way to set up your Mirage server\'s initial data, both during development and on a per-test basis."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","associations"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#associations"],[11,"class","heading-anchor"],[9],[0,"Associations"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Dealing with associations is always tricky, and faking endpoints that deal with associations is no exception. Fortunately, Mirage ships with an ORM to help keep your route handlers clean."],[10],[0,"\\n"],[7,"p"],[9],[0,"Let\'s say your movie has many cast-members. You can declare this relationship in your model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"castMembers"],[10],[0,": hasMany()\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/cast-member.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movie"],[10],[0,": belongsTo()\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now Mirage knows about the relationship between these two models, which can be useful when writing route handlers:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id/cast-members\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movie = schema.movies.find(request.params.id);\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," movie.castMembers;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"and when creating graphs of related data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\\"I can see a movie\'s cast members\\""],[10],[0,", "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"async"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"assert"],[10],[0,") "],[10],[0,"{\\n  server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie\'"],[10],[0,", {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"castMembers"],[10],[0,": [\\n      server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'cast-member\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Matthew McConaughey\'"],[10],[0," }),\\n      server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'cast-member\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Anne Hathaway\'"],[10],[0," }),\\n      server.create("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'cast-member\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Jessica Chastain\'"],[10],[0," })\\n    ]\\n  });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"await"],[10],[0," visit("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/\'"],[10],[0,");\\n\\n  assert.dom("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'li.cast-member\'"],[10],[0,").exists({ "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"count"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0," });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage uses foreign keys to keep track of these related models for you, so you don\'t have to worry about any messy bookkeeping details while your Ember app reads and writes new relationships to Mirage\'s database."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","serializers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#serializers"],[11,"class","heading-anchor"],[9],[0,"Serializers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage is designed for you to be able to completely replicate your production server."],[10],[0,"\\n"],[7,"p"],[9],[0,"So far, we\'ve seen that Mirage\'s default payloads are formatted using the "],[7,"a"],[11,"href","https://jsonapi.org"],[11,"class","docs-md__a"],[9],[0,"JSON:API"],[10],[0," spec. This spec produces payloads that look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /movies/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movies\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"New Ember apps using Ember Data work well with the JSON:API format, but of course, not every backend uses JSON:API."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, your API responses might look more like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /movies/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movies"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"This is why Mirage "],[7,"em"],[9],[0,"serializers"],[10],[0," exist. Serializers let you customize the formatting logic of your responses, without having to change your route handlers, models, relationships, or any other part of your Mirage setup."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage ships with a few named serializers that match popular backend formats. You can also extend from the base class and use formatting hooks to match your own backend:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n  keyForAttribute(attr) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," dasherize(attr);\\n  },\\n\\n  keyForRelationship(attr) {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," dasherize(attr);\\n  }\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage\'s serializer layer is also aware of your relationships, which helps when faking endpoints that sideload or embed related data:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/movie.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Serializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Serializer.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"include"],[10],[0,": [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'crewMembers\'"],[10],[0," ]\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", (schema, request) => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.find(request.params.id);\\n  });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"With the above config, a GET to "],[7,"code"],[9],[0,"/movies/1"],[10],[0," would return automatically include related crew members:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"movie"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"title"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,"\\n  },\\n  "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'crew-members\'"],[10],[0,": [\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie-id\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Matthew McConaughey\'"],[10],[0,"\\n    },\\n    {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'movie-id\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"name"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Anne Hathaway\'"],[10],[0,"\\n    },\\n    ...\\n  ]\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Mirage ships with two named serializers, JSONAPISerializer and ActiveModelSerializer, to save you the trouble of writing this custom code yourself. See the "],[7,"a"],[11,"href","../api/modules/ember-cli-mirage/serializer~Serializer"],[11,"class","docs-md__a"],[9],[0,"serializer guide"],[10],[0," to learn more."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#shorthands"],[11,"class","heading-anchor"],[9],[0,"Shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage has "],[7,"em"],[9],[0,"shorthands"],[10],[0," to reduce the code needed for conventional API routes. For example, the route handler"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"can be written as"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"There are also shorthands for "],[7,"code"],[9],[0,"post"],[10],[0,", "],[7,"code"],[9],[0,"patch"],[10],[0," (or "],[7,"code"],[9],[0,"put"],[10],[0,"), and "],[7,"code"],[9],[0,"del"],[10],[0," methods. Here\'s a full set of resourceful routes for an "],[7,"code"],[9],[0,"author"],[10],[0," resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Shorthands make writing your server definition concise, so use them whenever possible. When mocking a new route, you should always start with a Shorthand, and then drop down to a function route handler when you need more control."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","passthrough"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#passthrough"],[11,"class","heading-anchor"],[9],[0,"Passthrough"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage is a great tool to use even if you\'re working on an existing app, or if you don\'t want to fake your entire API. By default, Mirage throws an error if your Ember app makes a request that doesn\'t have a corresponding route handler defined. To avoid this, tell Mirage to let unhandled requests pass through:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".passthrough();"],[10],[10],[0,""],[7,"p"],[9],[0,"Now you can develop as you normally would, for example against an existing API."],[10],[0,"\\n"],[7,"p"],[9],[0,"When it comes time to build a new feature, you don\'t have to wait for the API to be updated. Just define the new route that you need"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/comments\'"],[10],[0,");\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".passthrough();"],[10],[10],[0,""],[7,"p"],[9],[0,"and you can fully develop and test the feature. In this way you can build up your fake server piece by piece - adding some solid acceptance tests along the way."],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"That should be enough to get you started!"],[10],[0,"\\n"],[7,"p"],[9],[0,"The rest of the docs are organized by Mirage\'s higher-level concepts:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"Route handlers"],[10],[0," contain the logic around what run-time data Mirage uses to respond to requests."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"The "],[7,"strong"],[9],[0,"Data layer"],[10],[0," is how Mirage stores and tracks changes to your data over time."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"Keep reading to learn more!"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/getting-started/overview/template.hbs"}})
e.default=s}),define("dummy/pods/docs/getting-started/upgrade-guide/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"C1X9spqy",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","upgrade-guide"],[11,"class","docs-md__h1"],[9],[0,"Upgrade guide"],[10],[0,"\\n    "],[7,"p"],[9],[0,"If you\'re upgrading from an existing version of Mirage, you can run the following:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[7,"span"],[11,"class","hljs-meta"],[9],[0,"#"],[10],[0," Using npm\\nnpm install -D ember-cli-mirage@X.X.X\\n"],[7,"span"],[11,"class","hljs-meta"],[9],[0,"\\n#"],[10],[0," Using yarn\\nyarn install -D ember-cli-mirage@X.X.X"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","full-changelog"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#full-changelog"],[11,"class","heading-anchor"],[9],[0,"Full Changelog"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can view all of Mirage\'s release notes on "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/releases"],[11,"class","docs-md__a"],[9],[0,"our Releases page"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-4-x-1-0-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-4-x-1-0-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.4.x → 1.0 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"A few breaking changes were made in the 1.0 release."],[10],[0,"\\n"],[7,"p"],[9],[7,"strong"],[9],[0,"Faker.js"],[10],[10],[0,"\\n"],[7,"p"],[9],[0,"When Mirage was first released, including npm libraries into Ember CLI apps was difficult. You needed to generate a vendor shim and call "],[7,"code"],[9],[0,"app.import"],[10],[0," in order to use the library in your application code."],[10],[0,"\\n"],[7,"p"],[9],[0,"Because of all this ceremony, it was common for addons to do that work for you, and bundle related packages. This is exactly what Mirage did for "],[7,"a"],[11,"href","https://github.com/Marak/faker.js"],[11,"class","docs-md__a"],[9],[0,"Faker.js"],[10],[0,", a useful library to have alongside your Mirage factory definitions."],[10],[0,"\\n"],[7,"p"],[9],[0,"There\'s a few problems with this, most notably that users "],[7,"em"],[9],[0,"had"],[10],[0," to use the version of Faker that was bundled with Mirage. It was frustrating not being able to take advantage of new Faker features until Mirage upgraded its bundled version."],[10],[0,"\\n"],[7,"p"],[9],[0,"Now, thanks to "],[7,"a"],[11,"href","https://github.com/ef4/ember-auto-import"],[11,"class","docs-md__a"],[9],[0,"Ember Auto Import"],[10],[0,", this is no longer the case. Using dependencies directly from npm is painless – just "],[7,"code"],[9],[0,"yarn/npm install"],[10],[0," them and "],[7,"code"],[9],[0,"import"],[10],[0," them directly from your ES6 classes. Thanks to Auto Import, all that ceremony is taken care of for you."],[10],[0,"\\n"],[7,"p"],[9],[0,"This also means that users can easily manage their project\'s version of Faker (and other similar dependencies) independently of the version of Mirage they\'re using."],[10],[0,"\\n"],[7,"p"],[9],[0,"For this reason, in 1.0 we are no longer bundling Faker.js with Mirage. This is a breaking change."],[10],[0,"\\n"],[7,"p"],[9],[0,"Here are the steps you\'ll need to take to fix this:"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Install Ember Auto Import (if it\'s not already installed)"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"ember install ember-auto-import"],[10],[10],[0,""],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Install Faker.js directly from npm:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"yarn add -D faker\\n"],[7,"span"],[11,"class","hljs-meta"],[9],[0,"\\n#"],[10],[0," or npm install --save-dev faker"],[10],[10],[0,""],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[0,"Change all imports of "],[7,"code"],[9],[0,"faker"],[10],[0," from the "],[7,"code"],[9],[0,"ember-cli-packge"],[10],[0," to import directly from "],[7,"code"],[9],[0,"faker"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"- import { Factory, faker } from \'ember-cli-mirage\';"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ import { Factory } from \'ember-cli-mirage\';"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+ import faker from \'faker\';"],[10],[10],[10],[0,""],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage-faker-codemod/tree/update-transform"],[11,"class","docs-md__a"],[9],[0,"There is a codemod"],[10],[0," that will do this for you, thanks to the gracious work of "],[7,"a"],[11,"href","https://github.com/caseywatts"],[11,"class","docs-md__a"],[9],[0,"Casey Watts"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, when I originally bundled Faker, I monkey-patched it with some methods that I thought would be \\"useful\\" additions. I thought this was a good idea at the time... it wasn\'t. 🙈"],[10],[0,"\\n"],[7,"p"],[9],[0,"You can look at "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/blob/v0.4.15/addon/faker.js"],[11,"class","docs-md__a"],[9],[0,"the module from v0.4.15"],[10],[0," to see that we added the "],[7,"code"],[9],[0,"faker.list.random"],[10],[0,", "],[7,"code"],[9],[0,"faker.list.cycle"],[10],[0," and "],[7,"code"],[9],[0,"faker.random.number.range"],[10],[0," methods, so if you use these methods too, you\'ll need to refactor them."],[10],[0,"\\n"],[7,"p"],[9],[0,"Fortunately, two of them have been added to recent versions of Faker, and one can be replaced with some simple JS:"],[10],[0,"\\n"],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.list.random"],[10],[0,", use "],[7,"code"],[9],[0,"faker.random.arrayElement"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  countries() {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.list.random([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return faker.random.arrayElement([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.list.cycle"],[10],[0,", use the remainder (modulo) operator:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  countries(i) {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.list.cycle([ \'United States of America\', \'Canada\', \'Mexico\' ]);"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   let countries = [ \'United States of America\', \'Canada\', \'Mexico\' ];"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   "],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return countries[i % countries.length];"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"For "],[7,"code"],[9],[0,"faker.random.number.range"],[10],[0,", use "],[7,"code"],[9],[0,"faker.random.number"],[10],[0," with min and max options:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefineddiff"],[9],[0,"  age() {\\n"],[7,"span"],[11,"class","hljs-deletion"],[9],[0,"-   return faker.random.number.range(18, 65);"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-addition"],[9],[0,"+   return faker.random.number({ min: 18, max: 65 });"],[10],[0,"\\n  }"],[10],[10],[0,""],[7,"p"],[9],[0,"After that, you should be on your own with respect to Faker! Thanks to Auto Import, you can change versions, or even try out other libraries like "],[7,"a"],[11,"href","https://chancejs.com/"],[11,"class","docs-md__a"],[9],[0,"Chance.js"],[10],[0,", and rest easy knowing Mirage is a bit slimmer and one less thing is beyond your control."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-3-x-0-4-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-3-x-0-4-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.3.x → 0.4 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"There is one primary change in 0.4 that could break your 0.3 app."],[10],[0,"\\n"],[7,"p"],[9],[0,"In 0.3.x, Mirage\'s JSONAPISerializer included all related foreign keys whenever serializing a model or collection, even if those relationships were not being "],[7,"code"],[9],[0,"included"],[10],[0," in the payload."],[10],[0,"\\n"],[7,"p"],[9],[0,"This actually goes against JSON:API\'s design. Foreign keys in the payload are known as "],[7,"a"],[11,"href","http://jsonapi.org/format/#document-resource-object-linkage"],[11,"class","docs-md__a"],[9],[0,"Resource Linkage"],[10],[0," and are intended to be used by API clients to link together all resources in a JSON:API compound document. In fact, most server-side JSON:API libraries do not automatically serialize all related foreign keys, and only return linkage data for related resources when they are being included in the current document."],[10],[0,"\\n"],[7,"p"],[9],[0,"By including linkage data for every relationship in 0.3, it was easy to develop Ember apps that would work with Mirage but would behave differently when hooked up to a standard JSON:API server. Since Mirage always included linkage data, an Ember app might automatically be able to fetch related resources using the ids from that linkage data plus its knowledge about the API. For example, if a "],[7,"code"],[9],[0,"post"],[10],[0," came back like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /posts/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'posts\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { ... },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,",\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,"\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"and you forgot to "],[7,"code"],[9],[0,"?include=author"],[10],[0," in your GET request, Ember Data would potentially use the "],[7,"code"],[9],[0,"user:1"],[10],[0," foreign key and lazily fetch the "],[7,"code"],[9],[0,"author"],[10],[0," by making a request to "],[7,"code"],[9],[0,"GET /authors/1"],[10],[0,". This is problematic because"],[10],[0,"\\n"],[7,"ol"],[9],[0,"\\n"],[7,"li"],[9],[0,"This is not how foreign keys are intended to be used"],[10],[0,"\\n"],[7,"li"],[9],[0,"It\'d be better to see no data and fix the problem by going back up to your data-loading code and add "],[7,"code"],[9],[0,"?include=author"],[10],[0," to your GET request, or"],[10],[0,"\\n"],[7,"li"],[9],[0,"If you do want your interface to lazily load the author, use resource "],[7,"code"],[9],[0,"links"],[10],[0," instead of the resource linkage "],[7,"code"],[9],[0,"data"],[10],[0,":"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// GET /posts/1"],[10],[0,"\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'posts\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'1\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": { ... },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"links"],[10],[0,": {\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"related"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/api/users/1\'"],[10],[0,"\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"Resource links can be defined on Mirage serializers using the "],[7,"a"],[11,"href","http://www.ember-cli-mirage.com/docs/v0.3.x/serializers/#linksmodel"],[11,"class","docs-md__a"],[9],[0,"links"],[10],[0," method (though "],[7,"code"],[9],[0,"including"],[10],[0," is likely the far more simpler and common approach to fetching related data)."],[10],[0,"\\n"],[7,"p"],[9],[0,"So, Mirage 0.4 changed this behavior and by default, the JSONAPISerializer only includes linkage data for relationships that are being included in the current payload (i.e. within the same compound document)."],[10],[0,"\\n"],[7,"p"],[9],[0,"This behavior is configurable via the "],[7,"code"],[9],[0,"alwaysIncludeLinkageData"],[10],[0," key on your JSONAPISerializers. It is set to "],[7,"code"],[9],[0,"false"],[10],[0," by default, but if you want to opt-in to 0.3 behavior and always include linkage data, set it to "],[7,"code"],[9],[0,"true"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/serializers/application.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { JSONAPISerializer } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," JSONAPISerializer.extend({\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"alwaysIncludeLinkageData"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"If you do this, I would recommend looking closely at how your real server behaves when serializing resources\' relationships and whether it uses resource "],[7,"code"],[9],[0,"links"],[10],[0," or resource linkage "],[7,"code"],[9],[0,"data"],[10],[0,", and to update your Mirage code accordingly to give you the most faithful representation of your server."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-2-x-0-3-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-2-x-0-3-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.2.x → 0.3 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The main change from 0.2.x to 0.3.x is that relationships are now one-way. This better matches the semantics of both Ember Data and common HTTP transfer protocols like JSON:API."],[10],[0,"\\n"],[7,"p"],[9],[0,"In 0.2, the following model definitions"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"would have generated a \\"schema\\" with a one-to-many relationship between authors and posts: an author has many posts, and a post belongs to an author. Now, this just generates a one-way relationship from "],[7,"code"],[9],[0,"post"],[10],[0," to "],[7,"code"],[9],[0,"author"],[10],[0,". To have a two-way sync\'d relationship, known as an inverse, you\'d need to define both sides of the relationship:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/author.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, hasMany } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"posts"],[10],[0,": hasMany()\\n\\n});\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/models/post.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model, belongsTo } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"author"],[10],[0,": belongsTo()\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Practically speaking, to upgrade you\'ll need to go through your code and update relationships that implicitly had inverses (from 0.2.x\'s hasMany and belongsTo behavior) and update them to define both sides."],[10],[0,"\\n"],[7,"p"],[9],[0,"This could also affect your fixture files, if you are using those to seed your database. Instead of just having an authorId on the post above, for example, you\'d also need the author to have a "],[7,"code"],[9],[0,"postIds: []"],[10],[0," array. (In general Factories are better for seeding your database, as they save you from having to manage ids at all.)"],[10],[0,"\\n"],[7,"p"],[9],[0,"Conceptually this change should be straightforward, as its making existing implicit relationships explicit, but if you find yourself having trouble with the upgrade it\'s probably because of something I haven\'t thought of. Please reach out to the community on the #ec-mirage channel on Slack and ask for help!"],[10],[0,"\\n"],[7,"p"],[9],[0,"For more information on the motivation behind change, please read the "],[7,"a"],[11,"href","http://www.ember-cli-mirage.com/blog/2017/01/09/0-3-0-beta-series/"],[11,"class","docs-md__a"],[9],[0,"0-3 beta series release blog post"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","0-1-x-0-2-upgrade-guide"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#0-1-x-0-2-upgrade-guide"],[11,"class","heading-anchor"],[9],[0,"0.1.x → 0.2 Upgrade guide"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"If you\'re upgrading your Mirage server from v0.1.x to v0.2.x, here\'s what you need to know:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"The default Mirage directory has changed."],[10],[0," The default Mirage directory has moved from "],[7,"code"],[9],[0,"/app/mirage"],[10],[0," to "],[7,"code"],[9],[0,"/mirage"],[10],[0,". When you install 0.2.0, the default blueprint will add the "],[7,"code"],[9],[0,"/mirage"],[10],[0," directory to your project. You can delete it and move your current Mirage files to the new location with something like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"rm -rf mirage\\nmv app/mirage mirage"],[10],[10],[0,""],[7,"p"],[9],[0,"from the root of your project. Mirage\'s directory is also "],[7,"a"],[11,"href","../configuration/#directory"],[11,"class","docs-md__a"],[9],[0,"customizable"],[10],[0," (Although you should move it from the "],[7,"code"],[9],[0,"/app"],[10],[0," directory or else it will not be removed from the build in production mode)."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"All multiword filenames are dasherized."],[10],[0," In Mirage 0.1.x, database collection names were taken from filenames. The idea was, if your API returned snake_case collection keys (e.g. "],[7,"code"],[9],[0,"blog_posts: []"],[10],[0,"), just name your file "],[7,"code"],[9],[0,"fixtures/blog_posts.js"],[10],[0,". This approach turned out to be insufficiently flexib-- what am I saying, it was just a bad idea :P."],[10],[0,"\\n"],[7,"p"],[9],[0,"In Mirage 0.2.x, we follow Ember CLI\'s conventions of dasherized filenames. So, you\'ll just need to go through and change"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/factories/blog_post.js\\n/mirage/fixtures/blog_post.js\\n"],[7,"span"],[11,"class","hljs-meta"],[9],[0,"#"],[10],[0," etc."],[10],[10],[0,""],[7,"p"],[9],[0,"to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedsh"],[9],[0,"/mirage/factories/blog-post.js\\n/mirage/fixtures/blog-post.js"],[10],[10],[0,""],[7,"p"],[9],[0,"You will then use the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"new Serializer layer"],[10],[0," to do things like format keys in your json payloads."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"All JavaScript properties are camelCased."],[10],[0," Similar to the previous change, factory properties and database collection names followed the format of your API in Mirage 0.1.x. If you were faking an ActiveModelSerializer backend, multiword keys used snake_case throughout your Mirage code. So, your database table might be "],[7,"code"],[9],[0,"db.blog_posts"],[10],[0,", and your factory keys might be "],[7,"code"],[9],[0,"first_name() {..}"],[10],[0,". Looks pretty cool right?"],[10],[0,"\\n"],[7,"p"],[9],[0,"Wrong. We\'re JavaScript developers here, people. It\'s time to start using camelCase. (Also, the idea of tying these keys to your serialization format was bad, as it left us without any conventions. We need to stick to a single format, so the ORM knows how to find foreign keys.)"],[10],[0,"\\n"],[7,"p"],[9],[0,"You\'ll need to update your route handlers, which may look like this:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," posts = db.blog_posts.filter("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"p"],[10],[0," =>"],[10],[0," p.author_id === "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," posts = db.blogPosts.filter("],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-params"],[9],[0,"p"],[10],[0," =>"],[10],[0," p.authorId === "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that everything is camelCased, including foreign keys."],[10],[0,"\\n"],[7,"p"],[9],[0,"Similarly, factories that look like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  first_name() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n\\n  last_name() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"should be changed to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Factory.extend({\\n  firstName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n\\n  lastName() {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," faker.name.firstName();\\n  },\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"This goes for all attrs that "],[7,"code"],[9],[0,"server.create"],[10],[0," takes (and returns), etc. For many this will be the most painful part of the upgrade. Please find it in your heart to forgive me."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"Mirage now has its own Model layer (an ORM)."],[10],[0," In Mirage 0.1.x, you had to define either a factory or a fixture file (or both) in order for a database collection to be created, which let you take advantage of the db in your route handlers. In 0.2, we\'ve introduced Mirage Models, which serve as the new canonical source of truth about your database."],[10],[0,"\\n"],[7,"p"],[9],[0,"To create a model, use"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"ember g mirage-model blog-post"],[10],[10],[7,"p"],[9],[0,"This will create a file like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Model } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," Model.extend({\\n\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Having that file sets up the "],[7,"code"],[9],[0,"db.blogPosts"],[10],[0," collection, allows you to use the JSON:API serializer, and more. You can still define factories and fixtures - but only if you need them. "],[2," not yet! in 0.6.0 For instance, given the model above, `server.create(\'blog-post\')` would create a blank `blog-post` model. You could then make a factory for models that need more customization. "],[0," Models, factories and fixtures all work together, but now you won\'t be making blank factory or fixture files just to set up your database. The models themselves serve as the source of truth."],[10],[0,"\\n"],[7,"p"],[9],[0,"We needed to add models for "],[7,"a"],[11,"href","../models/#associations"],[11,"class","docs-md__a"],[9],[0,"association support"],[10],[0," (which currently exists) and factory relationships (the first feature to come after the 0.2 release). Read through the "],[7,"a"],[11,"href","../models"],[11,"class","docs-md__a"],[9],[0,"models guide"],[10],[0," and "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"serializers guide"],[10],[0," to see how having models can simplify your Mirage server."],[10],[0,"\\n"],[7,"p"],[9],[0,"We also have a plan to make a separate addon that could ascertain your model definitions and their relationships from your Ember Data models. Adding the ORM paves the way for this important future addition."],[10],[0,"\\n"],[7,"p"],[9],[0,"Currently, Mirage will still work if a factory/fixture file is defined for a particular db collection without a corresponding model. Eventually, we may require all setups to have model definitions for each collection. But for now, to make for an easier upgrade path, you can start generating models and opt-in to the ORM layer in piecemeal."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"The ORM object "],[7,"code"],[9],[0,"schema"],[10],[0," is now injected into route handlers."],[10],[0," In Mirage 0.1.x, the "],[7,"code"],[9],[0,"db"],[10],[0," was the first parameter injected into route handlers:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"db, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// work with db"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now, the "],[7,"code"],[9],[0,"schema"],[10],[0," object is, so you can take advantage of the Model layer. Fortunately, the "],[7,"code"],[9],[0,"db"],[10],[0," hangs directly off of the "],[7,"code"],[9],[0,"schema"],[10],[0,", so you can leave all your old route handler code intact (with the exception of making the change to camelCase), and just use destructuring to change the function signature to"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"{ db }, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// work with db"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"and then start opting-in to the ORM (and using "],[7,"code"],[9],[0,"schema"],[10],[0,") one route handler at a time."],[10],[0,"\\n"],[10],[0,"\\n"],[7,"li"],[9],[7,"p"],[9],[7,"strong"],[9],[0,"Specify a Serializer."],[10],[0," If you\'re using shorthands, you\'ll need to pick a serializer in "],[7,"code"],[9],[0,"/mirage/serializers/application.js"],[10],[0,". See the "],[7,"a"],[11,"href","../serializers"],[11,"class","docs-md__a"],[9],[0,"serializers guide"],[10],[0," for details."],[10],[0,"\\n"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"You can always view the "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/blob/master/CHANGELOG.md"],[11,"class","docs-md__a"],[9],[0,"full changelog"],[10],[0," to see everything that\'s changed. If you think this guide missed a critical part of the upgrade path, please "],[7,"a"],[11,"href","https://github.com/samselikoff/ember-cli-mirage/issues/new"],[11,"class","docs-md__a"],[9],[0,"open an issue"],[10],[0,"!"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/getting-started/upgrade-guide/template.hbs"}})
e.default=s})
define("dummy/pods/docs/getting-started/what-is-mirage/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"Wvxvholx",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","what-is-mirage-"],[11,"class","docs-md__h1"],[9],[0,"What is Mirage?"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage is a JavaScript library that lets frontend developers mock out backend APIs."],[10],[0,"\\n"],[7,"p"],[9],[0,"Unlike other mocking libraries, Mirage makes it easy to reproduce dynamic scenarios that are typically only possible when using a true production server."],[10],[0,"\\n"],[7,"p"],[9],[0,"Equipped with a Mirage server, a frontend developer can build, test, and even share a complete working Ember application without having to use or configure any backend services."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","why-"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#why-"],[11,"class","heading-anchor"],[9],[0,"Why?"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage was originally built to bring conventions to some home-grown HTTP mocking code that was getting unwieldy. It ended up proving most useful when it enabled frontend developers to work on their apps without having to rely on any local or staging backend services as part of their normal development workflow."],[10],[0,"\\n"],[7,"p"],[9],[0,"Since then, Mirage has focused on making it as easy as possible for Ember developers to maintain a mock server alongside their codebase."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","how-it-works"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#how-it-works"],[11,"class","heading-anchor"],[9],[0,"How it works"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Mirage runs in the browser. It uses "],[7,"a"],[11,"href","https://github.com/pretenderjs/pretender"],[11,"class","docs-md__a"],[9],[0,"Pretender.js"],[10],[0," to intercept and respond to any network requests your Ember app makes, letting you build your app as if it were talking to a real server."],[10],[0,"\\n"],[7,"p"],[9],[0,"In this way, you can develop and test your app against various server states without having to modify any application code."],[10],[0,"\\n"],[7,"p"],[9],[0,"In addition to intercepting HTTP requests, Mirage provides a mock database and helper functions that make it easy to simulate dynamic backend services."],[10],[0,"\\n"],[7,"p"],[9],[0,"Mirage borrows concepts from server-side frameworks like"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"routes"],[10],[0," to handle HTTP requests"],[10],[0,"\\n"],[7,"li"],[9],[0,"a "],[7,"strong"],[9],[0,"database"],[10],[0," and "],[7,"strong"],[9],[0,"models"],[10],[0," for storing data and defining relationships"],[10],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"factories"],[10],[0," and "],[7,"strong"],[9],[0,"fixtures"],[10],[0," for stubbing data, and"],[10],[0,"\\n"],[7,"li"],[9],[7,"strong"],[9],[0,"serializers"],[10],[0," for formatting HTTP responses"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"to make it easy to simulate production server behavior."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","alternatives"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#alternatives"],[11,"class","heading-anchor"],[9],[0,"Alternatives"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"These other libraries solve similar problems to Mirage and might be a better fit for your needs:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[7,"a"],[11,"href","https://netflix.github.io/pollyjs/#/"],[11,"class","docs-md__a"],[9],[0,"Polly.js"],[10],[0,", a library for recording and replaying HTTP interactions"],[10],[0,"\\n"],[7,"li"],[9],[7,"a"],[11,"href","https://github.com/pretenderjs/pretender"],[11,"class","docs-md__a"],[9],[0,"Pretender.js"],[10],[0,", the low-level HTTP interceptor powering Mirage"],[10],[0,"\\n"],[7,"li"],[9],[7,"a"],[11,"href","https://github.com/danielspaniel/ember-data-factory-guy"],[11,"class","docs-md__a"],[9],[0,"Ember Data Factory Guy"],[10],[0,", factories for Ember apps powered by Ember Data"],[10],[0,"\\n"],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/getting-started/what-is-mirage/template.hbs"}})
e.default=s}),define("dummy/pods/docs/index/route",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Route.extend({beforeModel:function(){this.transitionTo("docs.getting-started.what-is-mirage")}})
e.default=s}),define("dummy/pods/docs/route-handlers/functions/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"v2OgLlGM",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","functions"],[11,"class","docs-md__h1"],[9],[0,"Functions"],[10],[0,"\\n    "],[7,"p"],[9],[0,"Function handlers are the most flexible way to write route handlers in Mirage."],[10],[0,"\\n"],[7,"p"],[9],[0,"To define new function handlers, use the "],[7,"code"],[9],[0,"get"],[10],[0,", "],[7,"code"],[9],[0,"post"],[10],[0,", "],[7,"code"],[9],[0,"patch"],[10],[0," (or "],[7,"code"],[9],[0,"put"],[10],[0,") and "],[7,"code"],[9],[0,"del"],[10],[0," methods. Here\'s an example:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," ];\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Now when your Ember app makes a GET request to "],[7,"code"],[9],[0,"/movies"],[10],[0,", it will receive this data."],[10],[0,"\\n"],[7,"p"],[9],[0,"Each verb method has the same signature. The first argument is the path (URL) and the second is the actual function handler that returns the response."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => { ... });\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => { ... });\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", () => { ... });\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", () => { ... });"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","timing"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#timing"],[11,"class","heading-anchor"],[9],[0,"Timing"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The last argument to a route handler is an options object you can use to adjust the timing. Use this to delay the response of a particular route and see how your Ember app behaves when communicating with a slow network."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," ];\\n}, { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"timing"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"4000"],[10],[0," });"],[10],[10],[0,""],[7,"p"],[9],[0,"The default delay is 50ms during development, and 0 during testing (so your tests run fast)."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can also set a global timing parameter for all routes. Individual timing parameters override the global setting."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".namespace = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'api\'"],[10],[0,";\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".timing = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2000"],[10],[0,";\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", () => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Interstellar\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Inception\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Dunkirk\'"],[10],[0," ];\\n  });\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/complex-query\'"],[10],[0,", () => {\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," ["],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"2"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"4"],[10],[0,", "],[7,"span"],[11,"class","hljs-number"],[9],[0,"5"],[10],[0,"];\\n  }, { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"timing"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"3000"],[10],[0," });\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"If you want to add delays to a test, you can override the timing for individual tests by putting the timing parameter in your test"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[0,"test("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'this route works with a delay\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  server.timing = "],[7,"span"],[11,"class","hljs-number"],[9],[0,"10000"],[10],[0,";\\n\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Because the server is reset after each test, this option won\'t leak into the rest of your suite."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","accessing-the-data-layer"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#accessing-the-data-layer"],[11,"class","heading-anchor"],[9],[0,"Accessing the data layer"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Route handlers receive "],[7,"code"],[9],[0,"schema"],[10],[0," as their first parameter, which lets them access Mirage\'s data layer:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Most of your route handlers will interact with the data layer in some way."],[10],[0,"\\n"],[7,"p"],[9],[0,"The second parameter is the "],[7,"code"],[9],[0,"request"],[10],[0," object, which contains information about the request your Ember app made. For example, you can access dynamic URL segments from it:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.find(id);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also access the request body, for example to handle a POST or PATCH request that contains data sent over by the Ember app:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," title = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).title;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.create({ title });\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"The "],[7,"code"],[9],[0,"normalizedRequestAttrs"],[10],[0," helper (documented below) provides some sugar for working with the request data."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","dynamic-paths-and-query-params"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#dynamic-paths-and-query-params"],[11,"class","heading-anchor"],[9],[0,"Dynamic paths and query params"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The request object that\'s injected into your route handlers contains any dynamic route segments and query params."],[10],[0,"\\n"],[7,"p"],[9],[0,"To define a route that has a dynamic segment, use colon syntax ("],[7,"code"],[9],[0,":segment"],[10],[0,") in your path. The dynamic piece will be available via "],[7,"code"],[9],[0,"request.params.[segment]"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.find(id);\\n})"],[10],[10],[0,""],[7,"p"],[9],[0,"Query params from the request can also be accessed via "],[7,"code"],[9],[0,"request.queryParams.[param]"],[10],[0,"."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","helpers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#helpers"],[11,"class","heading-anchor"],[9],[0,"Helpers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"There are several helpers available when writing function route handlers."],[10],[0,"\\n\\n      "],[7,"h3"],[11,"id","serialize"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#serialize"],[11,"class","heading-anchor"],[9],[0,"serialize"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"This helper returns the JSON for the given Model or Collection after passing it through the Serializer layer. It\'s useful if you want to do some final munging on the serialized JSON before returning it."],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movies = schema.movies.all();\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," json = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".serialize(movies);\\n\\n  json.meta = { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"page"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," json;\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"By default this method uses the named serializer for the given Model or Collection. You can pass in a specific serializer name as the second argument:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," movies = schema.movies.all();\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," json = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".serialize(movies, "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'sparse-movie\'"],[10],[0,");\\n\\n  json.meta = { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"page"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0," };\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," json;\\n});"],[10],[10],[0,"\\n      "],[7,"h3"],[11,"id","normalizedrequestattrs"],[11,"class","docs-md__h3"],[9],[7,"a"],[11,"href","#normalizedrequestattrs"],[11,"class","heading-anchor"],[9],[0,"normalizedRequestAttrs"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"This helper returns the body of a request in a normalized form, suitable for working with and creating records."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, if your Ember app makes a POST request with this data"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// POST /users"],[10],[0,"\\n\\n{\\n  "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,",\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"attributes"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'first-name\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Conan\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'middle-name\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'the\'"],[10],[0,",\\n      "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'last-name\'"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'Barbarian\'"],[10],[0,"\\n    },\\n    "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"relationships"],[10],[0,": {\\n      "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"team"],[10],[0,": {\\n        "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"data"],[10],[0,": {\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"type"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'teams\'"],[10],[0,",\\n          "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"id"],[10],[0,": "],[7,"span"],[11,"class","hljs-number"],[9],[0,"1"],[10],[0,"\\n        }\\n      }\\n    }\\n  }\\n}"],[10],[10],[0,""],[7,"p"],[9],[0,"then "],[7,"code"],[9],[0,"normalizedRequestAttrs()"],[10],[0," could be used like this"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"/*\\n    attrs = {\\n      firstName: \'Conan\',\\n      middleName: \'the\',\\n      lastName: \'Barbarian\',\\n      teamId: \'1\'\\n    }\\n  */"],[10],[0,"\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.users.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Note that attribute keys were camelCased, and the "],[7,"code"],[9],[0,"team"],[10],[0," foreign key was extracted. This is because a "],[7,"code"],[9],[0,"user"],[10],[0," owns the "],[7,"code"],[9],[0,"team"],[10],[0," foreign key; if another relationship were included in the request but the "],[7,"code"],[9],[0,"user"],[10],[0," did not own its foreign key, it would not have been extracted."],[10],[0,"\\n"],[7,"p"],[9],[0,"This helper method leverages your serializer\'s "],[7,"code"],[9],[0,"normalize"],[10],[0," method. In the example above, it\'s assumed that the app was using the "],[7,"code"],[9],[0,"JSONAPISerializer"],[10],[0,", which comes with the "],[7,"code"],[9],[0,"#normalize"],[10],[0," method already written. If you\'re not using one of the bundled serializers, you\'ll need to implement "],[7,"code"],[9],[0,"#normalize"],[10],[0," and have it return a JSON:API document to take advantage of this method."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, you\'ll need to use a full "],[7,"code"],[9],[0,"function"],[10],[0," here, as opposed to an ES6 arrow function (e.g "],[7,"code"],[9],[0,"() => { ... }"],[10],[0,"). This is because "],[7,"code"],[9],[0,"normalizedRequestAttrs"],[10],[0," requires the "],[7,"code"],[9],[0,"this"],[10],[0," context from the function handler, and an arrow function would bind this from the outer scope."],[10],[0,"\\n"],[7,"p"],[9],[7,"code"],[9],[0,"normalizedRequestAttrs()"],[10],[0," relies on a "],[7,"code"],[9],[0,"modelName"],[10],[0," to work and attempts to automatically detect it based on the URL of the request. If you use conventional URLs – for example, PATCH /users/1 – the helper should work. If you are using something custom – for example, PATCH /users/edit/1 – you’ll need to provide the "],[7,"code"],[9],[0,"modelName"],[10],[0," to the helper as the first argument:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/users/edit/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");\\n  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// ..."],[10],[0,"\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","status-codes-and-headers"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#status-codes-and-headers"],[11,"class","heading-anchor"],[9],[0,"Status codes and headers"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"By default, Mirage sets the HTTP status code of a response based on the verb being used for the route:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"GET is 200"],[10],[0,"\\n"],[7,"li"],[9],[0,"PATCH/PUT is 204"],[10],[0,"\\n"],[7,"li"],[9],[0,"POST is 201"],[10],[0,"\\n"],[7,"li"],[9],[0,"DEL is 204"],[10],[0,"\\n"],[10],[0,"\\n"],[7,"p"],[9],[0,"PATCH/PUT and POST change to 200 if there is a response body."],[10],[0,"\\n"],[7,"p"],[9],[0,"Additionally, a header for "],[7,"code"],[9],[0,"Content-Type"],[10],[0," is set to "],[7,"code"],[9],[0,"application/json"],[10],[0,"."],[10],[0,"\\n"],[7,"p"],[9],[0,"You can customize both the response code and headers by returning an instance of the "],[7,"code"],[9],[0,"Response"],[10],[0," class in your route handler:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"import"],[10],[0," { Response } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"from"],[10],[0," "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'ember-cli-mirage\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"export"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"default"],[10],[0," "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/authors\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).author;\\n\\n    "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"if"],[10],[0," (attrs.name) {\\n      "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.authors.create(attrs);\\n    } "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"else"],[10],[0," {\\n      "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"new"],[10],[0," Response("],[7,"span"],[11,"class","hljs-number"],[9],[0,"400"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"some"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'header\'"],[10],[0," }, { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"errors"],[10],[0,": ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'name cannot be blank\'"],[10],[0,"] });\\n    }\\n  });\\n}"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","external-origins"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#external-origins"],[11,"class","heading-anchor"],[9],[0,"External origins"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"You can use Mirage to simulate other-origin requests. By default, a route like"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ...)"],[10],[10],[0,""],[7,"p"],[9],[0,"will hit the same origin that\'s serving your Ember app. To handle a different origin, use a fully qualified domain name:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'http://api.twitter.com/v1\'"],[10],[0,", ...)"],[10],[10],[0,""],[7,"p"],[9],[0,"If your entire Ember app uses an external (other-origin) API, you can globally configure the domain via "],[7,"code"],[9],[0,"urlPrefix"],[10],[0,":"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// mirage/config.js"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".urlPrefix = "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'https://my.api.com\'"],[10],[0,";\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// This route will handle requests to https://my.api.com/contacts"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ...)"],[10],[10],[0,""],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"That\'s it on writing low-level function route handlers!"],[10],[0,"\\n"],[7,"p"],[9],[0,"Function route handlers are flexible, but also cumbersome to write out for every endpoint. If you\'re working with an API that\'s conventional enough, hopefully you\'ll be writing fewer function route handlers and more Shorthands, which we\'ll discuss in the next section."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/route-handlers/functions/template.hbs"}})
e.default=s}),define("dummy/pods/docs/route-handlers/shorthands/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"VscMFgt/",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-md"],[9],[7,"h1"],[11,"id","shorthands"],[11,"class","docs-md__h1"],[9],[0,"Shorthands"],[10],[0,"\\n    "],[7,"p"],[9],[0,"APIs have become more standardized, so Mirage has the concept of "],[7,"em"],[9],[0,"Shorthands"],[10],[0," to deal with common scenarios. Shorthands can replace many of your custom route handlers, dramatically simplifying your server definition."],[10],[0,"\\n"],[7,"p"],[9],[0,"For example, this function route handler"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.all();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"is pretty standard: it responds to a URL path with a collection of the same name."],[10],[0,"\\n"],[7,"p"],[9],[0,"The Shorthand form of this is"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"This is a complete route handler. It infers the model name from the last part of the URL, and returns the corresponding collection."],[10],[0,"\\n"],[7,"p"],[9],[0,"Returning a single movie by ID is just as easy:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"There are also Shorthands for creating and editing data. For example, this function route handler creates a new movie:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-built_in"],[9],[0,"JSON"],[10],[0,".parse(request.requestBody).movie;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.movies.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"It\'s also pretty standard: it creates a new model using the attributes from the request payload. The equivalent Shorthand is"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/movies\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"See the full list of available Shorthands below. Shorthands use default status codes based on the HTTP verb:"],[10],[0,"\\n"],[7,"ul"],[9],[0,"\\n"],[7,"li"],[9],[0,"GET, PATCH/PUT and DEL are 200"],[10],[0,"\\n"],[7,"li"],[9],[0,"POST is 201"],[10],[0,"\\n"],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","get-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#get-shorthands"],[11,"class","heading-anchor"],[9],[0,"GET Shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Fetching a collection:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the collection as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", (schema) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.contacts.all(); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// users in the second case"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Fetching a model:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");         "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.contacts.find(id); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// users in the second case"],[10],[0,"\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Fetching multiple models by ID (for example, "],[7,"code"],[9],[0,"GET /contacts?ids=1,3"],[10],[0,"):"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"coalesce"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'users\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"coalesce"],[10],[0,": "],[7,"span"],[11,"class","hljs-literal"],[9],[0,"true"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", ({ contacts }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," ids = request.queryParams.ids;\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," contacts.find(ids); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// users in the second case"],[10],[0,"\\n});"],[10],[10],[0,"\\n      "],[7,"h2"],[11,"id","post-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#post-shorthands"],[11,"class","heading-anchor"],[9],[0,"POST Shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Creating a resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.contacts.create(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"For this POST shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See "],[7,"a"],[11,"href","../serializers/#normalizejson"],[11,"class","docs-md__a"],[9],[0,"the note on normalize"],[10],[0," in the Serializer docs for more information."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","patch-put-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#patch-put-shorthands"],[11,"class","heading-anchor"],[9],[0,"PATCH/PUT Shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Updating a resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand (these also work with this.put)"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-function"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"function"],[10],[0,"("],[7,"span"],[11,"class","hljs-params"],[9],[0,"schema, request"],[10],[0,") "],[10],[0,"{\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," attrs = "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".normalizedRequestAttrs();\\n\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"return"],[10],[0," schema.contacts.find(id).update(attrs);\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"For this PATCH shorthand to work, Mirage needs to know the format of the JSON payload your Ember app sends along with the request, so that it can insert the appropriate data into the database. See the note on normalize in the Serializer docs for more information."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","delete-shorthands"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#delete-shorthands"],[11,"class","heading-anchor"],[9],[0,"DELETE Shorthands"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"Destroying a resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");          "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// finds type by singularizing url"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'user\'"],[10],[0,");  "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// optionally specify the type as second param"],[10],[0,"\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", (schema, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n\\n  schema.contacts.find(id).destroy();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"Destroying a resource and related models:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthand"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", ["],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contact\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'addresses\'"],[10],[0,"]);\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// equivalent"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,", ({ contacts }, request) => {\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," id = request.params.id;\\n  "],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"let"],[10],[0," contact = contacts.find(id);\\n\\n  contact.addresses.destroy();\\n  contact.destroy();\\n});"],[10],[10],[0,""],[7,"p"],[9],[0,"To use this Shorthand, you must have the appropriate "],[7,"code"],[9],[0,"hasMany"],[10],[0,"/"],[7,"code"],[9],[0,"belongsTo"],[10],[0," relationships defined in your data layer."],[10],[0,"\\n\\n      "],[7,"h2"],[11,"id","resource-helper"],[11,"class","docs-md__h2"],[9],[7,"a"],[11,"href","#resource-helper"],[11,"class","heading-anchor"],[9],[0,"Resource helper"],[10],[10],[0,"\\n    "],[7,"p"],[9],[0,"The "],[7,"em"],[9],[0,"resource"],[10],[0," helper lets you define multiple Shorthands for a given resource:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Resource helper usage"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,");\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthands defined"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,"); "],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// and this.put(\'/contacts/:id\')"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"You can also whitelist which Shorthands will be defined using the "],[7,"em"],[9],[0,"only"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"only"],[10],[0,": [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'index\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'show\'"],[10],[0," ] });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthands defined"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"or which route handlers shouldn\'t be defined using "],[7,"em"],[9],[0,"except"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'contacts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"except"],[10],[0,": [ "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'update\'"],[10],[0," ] });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthands defined"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/contacts/:id\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"If your route path and collection names do not match, you can define a relative or absolute path using the "],[7,"em"],[9],[0,"path"],[10],[0," option:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[11,"class","undefinedjs"],[9],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".resource("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,", { "],[7,"span"],[11,"class","hljs-attr"],[9],[0,"path"],[10],[0,": "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0," });\\n\\n"],[7,"span"],[11,"class","hljs-comment"],[9],[0,"// Shorthands defined"],[10],[0,"\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".get("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".post("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".put("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".patch("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");\\n"],[7,"span"],[11,"class","hljs-keyword"],[9],[0,"this"],[10],[0,".del("],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'/posts/:id\'"],[10],[0,", "],[7,"span"],[11,"class","hljs-string"],[9],[0,"\'blog-posts\'"],[10],[0,");"],[10],[10],[0,""],[7,"p"],[9],[0,"Here is the full reference of the actions\' names you can pass to the "],[7,"em"],[9],[0,"only"],[10],[0," / "],[7,"em"],[9],[0,"except"],[10],[0," options and the Shorthands they stand for:"],[10],[0,"\\n"],[7,"pre"],[11,"class","docs-md__code"],[9],[7,"code"],[9],[0,"Action   |  Shorthand\\n------------------------------\\nindex    | this.get(\'/contacts\')\\nshow     | this.get(\'/contacts/:id\')\\ncreate   | this.post(\'/contacts\')\\nupdate   | this.patch(\'contacts/:id\') (or this.put)\\ndelete   | this.del(\'/contacts/:id\')"],[10],[10],[7,"hr"],[11,"class","docs-md__hr"],[9],[10],[7,"p"],[9],[0,"Shorthands are a key part of staying productive in your frontend codebase, but they only work so well because Mirage has a Data Layer that\'s aware of your application\'s domain model."],[10],[0,"\\n"],[7,"p"],[9],[0,"We\'ll cover how it works in the next few sections of the docs."],[10],[10]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/route-handlers/shorthands/template.hbs"}})
e.default=s}),define("dummy/pods/docs/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"s0mAMQbv",block:'{"symbols":["viewer","nav"],"statements":[[4,"docs-viewer",null,null,{"statements":[[0,"\\n"],[4,"component",[[29,"-assert-implicit-component-helper-argument",[[24,1,["nav"]],"expected `viewer.nav` to be a contextual component but found a string. Did you mean `(component viewer.nav)`? (\'dummy/pods/docs/template.hbs\' @ L3:C5) "],null]],null,{"statements":[[0,"    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs/template.hbs\' @ L4:C6) "],null],"Getting started"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L5:C6) "],null],"What is Mirage?","docs.getting-started.what-is-mirage"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L6:C6) "],null],"Installation","docs.getting-started.installation"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L7:C6) "],null],"Upgrade guide","docs.getting-started.upgrade-guide"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L8:C6) "],null],"Overview","docs.getting-started.overview"],null],false],[0,"\\n\\n\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs/template.hbs\' @ L11:C6) "],null],"Route handlers"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L12:C6) "],null],"Functions","docs.route-handlers.functions"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L13:C6) "],null],"Shorthands","docs.route-handlers.shorthands"],null],false],[0,"\\n\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["section"]],"expected `nav.section` to be a contextual component but found a string. Did you mean `(component nav.section)`? (\'dummy/pods/docs/template.hbs\' @ L15:C6) "],null],"Data layer"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L16:C6) "],null],"The Database","docs.data-layer.database"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L17:C6) "],null],"The ORM","docs.data-layer.orm"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L18:C6) "],null],"Factories","docs.data-layer.factories"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L19:C6) "],null],"Fixtures","docs.data-layer.fixtures"],null],false],[0,"\\n    "],[1,[29,"component",[[29,"-assert-implicit-component-helper-argument",[[24,2,["item"]],"expected `nav.item` to be a contextual component but found a string. Did you mean `(component nav.item)`? (\'dummy/pods/docs/template.hbs\' @ L20:C6) "],null],"[ coming soon ]","index"],null],false],[0,"\\n\\n"],[0,"\\n"]],"parameters":[2]},null],[0,"\\n"],[4,"component",[[29,"-assert-implicit-component-helper-argument",[[24,1,["main"]],"expected `viewer.main` to be a contextual component but found a string. Did you mean `(component viewer.main)`? (\'dummy/pods/docs/template.hbs\' @ L36:C5) "],null]],null,{"statements":[[0,"    "],[1,[23,"outlet"],false],[0,"\\n"]],"parameters":[]},null],[0,"\\n"]],"parameters":[1]},null]],"hasEval":false}',meta:{moduleName:"dummy/pods/docs/template.hbs"}})
e.default=s}),define("dummy/pods/index/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"kt8Q9gSk",block:'{"symbols":[],"statements":[[1,[23,"docs-hero"],false],[0,"\\n\\n"],[7,"div"],[11,"class","home"],[9],[0,"\\n  "],[7,"div"],[11,"class","home__section"],[9],[0,"\\n    "],[7,"h2"],[9],[0,"Productive"],[10],[0,"\\n    "],[7,"p"],[11,"class","home__lead"],[9],[0,"\\n      Spend less time wiring up HTTP stubs, and get back to developing your app.\\n    "],[10],[0,"\\n  "],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","home__section"],[9],[0,"\\n    "],[7,"h2"],[9],[0,"Test-worthy"],[10],[0,"\\n    "],[7,"p"],[11,"class","home__lead"],[9],[0,"\\n      Use factories to define your server\'s state per test. Acceptance testing just got a whole lot easier.\\n    "],[10],[0,"\\n  "],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","home__section"],[9],[0,"\\n    "],[7,"h2"],[9],[0,"Shareable"],[10],[0,"\\n    "],[7,"p"],[11,"class","home__lead"],[9],[0,"\\n      Share a functional prototype of your app that runs entirely in the client – before writing a single line of your API.\\n    "],[10],[0,"\\n  "],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","home__cta"],[9],[0,"\\n"],[4,"link-to",["docs"],[["class"],["home__cta-link"]],{"statements":[[0,"      Read the docs\\n"]],"parameters":[]},null],[0,"  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/index/template.hbs"}})
e.default=s}),define("dummy/pods/not-found/route",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Route.extend({beforeModel:function(){var e=this,s=this.paramsFor("not-found").path
this.redirects.forEach(function(a){a.from.forEach(function(t){s!==t&&s!=="".concat(t,"/")||e.transitionTo("blog.detail",a.to.replace("blog/",""))})})},redirects:[{from:["blog/2018/02/01/changing-mirages-default-linkage-data-behavior","blog/2018-02-01-changing-mirages-default-linkage-data-behavior"],to:"blog/changing-mirages-default-linkage-data-behavior-1475"},{from:["blog/2017/06/05/polymorphic-associations-and-auto-discovery-of-ember-data-models","blog/2017-06-05-polymorphic-associations-and-auto-discovery-of-ember-data-models"],to:"blog/polymorphic-associations-and-auto-discovery-of-ember-data-models-1483"},{from:["blog/2017/01/09/0-3-0-beta-series","blog/2017-01-09-0-3-0-beta-series"],to:"blog/0-3-0-beta-series-1484"},{from:["blog/2016/05/31/0-2-0-released","blog/2016-05-31-0-2-0-released"],to:"blog/0-2-0-released-1485"},{from:["blog/2016/01/03/0-2-0-beta.9-released","blog/2016-01-03-0-2-0-beta-9-released"],to:"blog/0-2-0-beta-9-released-1486"},{from:["blog/2016/01/03/0-2-update-only-inject-schema","blog/2016-01-03-0-2-update-only-inject-schema"],to:"blog/0-2-update-only-inject-schema-1487"},{from:["blog/2015/11/03/inside-ember-cli-mirage","blog/2015-11-03-inside-ember-cli-mirage"],to:"blog/inside-ember-cli-mirage-1488"},{from:["blog/2015/10/19/serializers-ready","blog/2015-10-19-serializers-ready"],to:"blog/serializers-ready-1489"},{from:["blog/2015/09/15/router-handler","blog/2015-09-15-router-handler"],to:"blog/router-handler-1490"},{from:["blog/2015/09/10/orm-not-ready-yet","blog/2015-09-10-orm-not-ready-yet"],to:"blog/orm-not-ready-yet-1491"},{from:["blog/2015/09/06/thoughts-on-model-attribute-formatting","blog/2015-09-06-thoughts-on-model-attribute-formatting"],to:"blog/thoughts-on-model-attribute-formatting-1492"}]})
e.default=s}),define("dummy/pods/not-found/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"4+CMq/+M",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","docs-container"],[9],[0,"\\n  "],[7,"h1"],[9],[0,"Not found"],[10],[0,"\\n  "],[7,"p"],[9],[0,"This page doesn\'t exist. "],[4,"link-to",["index"],null,{"statements":[[0,"Head home?"]],"parameters":[]},null],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/pods/not-found/template.hbs"}})
e.default=s}),define("dummy/resolver",["exports","ember-resolver"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/router",["exports","ember-cli-addon-docs/router","dummy/config/environment"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=s.default.extend({location:a.default.locationType,rootURL:a.default.rootURL})
t.map(function(){(0,s.docsRoute)(this,function(){this.route("getting-started",function(){this.route("what-is-mirage"),this.route("installation"),this.route("upgrade-guide"),this.route("overview")}),this.route("route-handlers",function(){this.route("functions"),this.route("shorthands")}),this.route("data-layer",function(){this.route("database"),this.route("orm"),this.route("factories"),this.route("fixtures")}),this.route("api",function(){this.route("class",{path:"/:class_id"})})}),this.route("blog",function(){this.route("detail",{path:"/:post_slug_and_id"})}),this.route("not-found",{path:"/*path"})})
var n=t
e.default=n}),define("dummy/routes/docs",["exports","ember-cli-addon-docs/routes/docs"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/routes/docs/api/item",["exports","ember-cli-addon-docs/routes/docs/api/item"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/serializers/-addon-docs",["exports","ember-cli-addon-docs/serializers/-addon-docs"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/serializers/post",["exports","ember-data"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default.JSONAPISerializer.extend({})
e.default=a}),define("dummy/services/adapter",["exports","ember-fetch-adapter"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/ajax",["exports","ember-ajax/services/ajax"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/docs-fetch",["exports","ember-cli-addon-docs/services/docs-fetch"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/docs-routes",["exports","ember-cli-addon-docs/services/docs-routes"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/docs-search",["exports","ember-cli-addon-docs/services/docs-search"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/etw-tailwind-styleguide",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.Service.extend({})
e.default=s}),define("dummy/services/fastboot",["exports","ember-cli-fastboot/services/fastboot"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/keyboard",["exports","ember-keyboard/services/keyboard"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/liquid-fire-transitions",["exports","liquid-fire/transition-map"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/services/media",["exports","ember-responsive/services/media"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=s.default
e.default=a}),define("dummy/services/modal-dialog",["exports","dummy/config/environment"],function(e,s){function a(e){return Ember.computed(function(){return s.default["ember-modal-dialog"]&&s.default["ember-modal-dialog"][e]})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Service.extend({hasEmberTether:a("hasEmberTether"),hasLiquidWormhole:a("hasLiquidWormhole"),hasLiquidTether:a("hasLiquidTether"),destinationElementId:null})
e.default=t}),define("dummy/services/moment",["exports","ember-moment/services/moment","dummy/config/environment"],function(e,s,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.get,n=s.default.extend({defaultFormat:t(a.default,"moment.outputFormat")})
e.default=n}),define("dummy/services/project-version",["exports","ember-cli-addon-docs/services/project-version"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/services/router-scroll",["exports","ember-router-scroll/services/router-scroll"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/snippets",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default={"1-belongs-to":"    let author = server.create('author', {\n      name: 'Neal Stephenson'\n    });\n\n    server.create('book', {\n      author,\n      title: 'Cryptonomicon'\n    });","1-belongs-to-schema":"        author: Model.extend(),\n\n        book: Model.extend({\n          author: belongsTo()\n        })","2-has-many":"    let book = server.create('book', {\n      title: 'Cryptonomicon'\n    });\n\n    server.create('author', {\n      name: 'Neal Stephenson',\n      books: [ book ]\n    });","2-has-many-schema":"        author: Model.extend({\n          books: hasMany()\n        }),\n\n        book: Model.extend()"}}),define("dummy/templates/application-tailwind",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"R4PZXYKm",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","etw-px-4 etw-my-8 etw-max-w-3xl etw-mx-auto etw-font-sans"],[9],[0,"\\n  "],[7,"div"],[11,"class","etw-flex etw-mt-6"],[9],[0,"\\n    "],[7,"div"],[11,"class","etw-w-3/4 etw-pr-6"],[9],[0,"\\n      "],[7,"h1"],[11,"class","etw-pt-8 etw-text-3xl etw-font-bold"],[9],[0,"Your Tailwind styles"],[10],[0,"\\n      "],[7,"p"],[11,"class","etw-mt-3 etw-mb-4 etw-text-lg"],[9],[0,"A reference for every generated class in your app."],[10],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Border radius",[29,"array",[".rounded{-side?}{-size?}"],null],[25,["moduleStyles","borderRadius"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Borders",[29,"array",[".border{-side?}{-width?}"],null],[25,["moduleStyles","borderWidths"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Colors",[29,"array",[".text-{color}",".bg-{color}",".border-{color}"],null],[25,["moduleStyles","colors"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Font weights",[29,"array",[".font-{weight}"],null],[25,["moduleStyles","fontWeights"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Height",[29,"array",[".h-{size}"],null],[25,["moduleStyles","height"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Letter spacing",[29,"array",[".tracking-{size}"],null],[25,["moduleStyles","letterSpacing"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Line height",[29,"array",[".leading-{size}"],null],[25,["moduleStyles","lineHeight"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Margin",[29,"array",[".m{side?}-{size}"],null],[25,["moduleStyles","margin"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Max height",[29,"array",[".max-h-{size}"],null],[25,["moduleStyles","maxHeight"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Max width",[29,"array",[".max-w-{size}"],null],[25,["moduleStyles","maxWidth"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Min height",[29,"array",[".min-h-{size}"],null],[25,["moduleStyles","minHeight"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Min width",[29,"array",[".min-w-{size}"],null],[25,["moduleStyles","minWidth"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Negative margin",[29,"array",[".-m{side?}-{size}"],null],[25,["moduleStyles","negativeMargin"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Opacity",[29,"array",[".opacity-{name}"],null],[25,["moduleStyles","opacity"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Padding",[29,"array",[".p{side?}-{size}"],null],[25,["moduleStyles","padding"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Shadows",[29,"array",[".shadow-{size?}"],null],[25,["moduleStyles","shadows"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["SVG fill",[29,"array",[".fill-{name}"],null],[25,["moduleStyles","svgFill"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["SVG stroke",[29,"array",[".stroke-{name}"],null],[25,["moduleStyles","svgStroke"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Text sizes",[29,"array",[".text-{size}"],null],[25,["moduleStyles","textSizes"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Width",[29,"array",[".w-{size}"],null],[25,["moduleStyles","width"]]]]],false],[0,"\\n\\n      "],[1,[29,"etw/module-section",null,[["title","codeSnippets","moduleStyles"],["Z index",[29,"array",[".z-{index}"],null],[25,["moduleStyles","zIndex"]]]]],false],[0,"\\n\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","etw-w-1/4 etw-relative"],[9],[0,"\\n      "],[1,[23,"etw/module-style-detail"],false],[0,"\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/application-tailwind.hbs"}})
e.default=s})
define("dummy/templates/components/code-snippet",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"Cz0R1/XF",block:'{"symbols":[],"statements":[[1,[23,"source"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/code-snippet.hbs"}})
e.default=s}),define("dummy/templates/components/etw/module-section",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"cChSi6ov",block:'{"symbols":["moduleStyle","snippet"],"statements":[[7,"section"],[9],[0,"\\n  "],[7,"h2"],[11,"class","etw-pt-8 etw-mb-6 etw-text-lg etw-font-bold"],[9],[1,[23,"title"],false],[10],[0,"\\n\\n  "],[7,"ul"],[11,"class","etw-list-reset etw-leading-normal"],[9],[0,"\\n"],[4,"each",[[25,["codeSnippets"]]],null,{"statements":[[0,"      "],[7,"li"],[9],[7,"code"],[9],[1,[24,2,[]],false],[10],[10],[0,"\\n"]],"parameters":[2]},null],[0,"  "],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","etw-mt-8 etw-flex etw-flex-wrap"],[9],[0,"\\n"],[4,"each",[[25,["moduleStyles"]]],null,{"statements":[[0,"      "],[1,[29,"etw/module-style-example",null,[["moduleStyle"],[[24,1,[]]]]],false],[0,"\\n"]],"parameters":[1]},null],[0,"  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/etw/module-section.hbs"}})
e.default=s}),define("dummy/templates/components/etw/module-style-detail",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"U7PWQgF7",block:'{"symbols":["style","state","breakpoint"],"statements":[[7,"div"],[11,"class","etw-shadow-lg etw-fixed etw-mr-4 etw-px-4 etw-pt-4 etw-pb-14 etw-bg-white etw-w-64 etw-mt-8 overflow-y-auto etw-h-screen"],[9],[0,"\\n  "],[7,"h3"],[9],[0,"Detail"],[10],[0,"\\n\\n"],[4,"if",[[25,["moduleStyle"]]],null,{"statements":[[0,"\\n    "],[7,"div"],[11,"class","etw-my-8"],[9],[0,"\\n      "],[1,[29,"etw/module-style-example",null,[["moduleStyle"],[[25,["moduleStyle"]]]]],false],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","etw-mt-4"],[9],[0,"\\n      "],[7,"h4"],[11,"class","etw-inline-block etw-pr-2"],[9],[0,"Responsive: "],[10],[0,"\\n      "],[7,"div"],[11,"class","etw-mt-2 etw-text-sm etw-inline-block"],[9],[0,"\\n"],[4,"each",[[29,"array",["all","sm","md","lg","xl"],null]],null,{"statements":[[0,"          "],[7,"a"],[11,"href","#"],[12,"class",[30,["\\n              etw-no-underline\\n              etw-text-black\\n              etw-pr-2\\n              ",[29,"if",[[29,"eq",[[25,["activeResponsiveClass"]],[24,3,[]]],null],"etw-opacity-100","etw-opacity-25"],null],"\\n            "]]],[9],[0,"\\n            "],[1,[24,3,[]],false],[0,"\\n          "],[3,"action",[[24,0,[]],[29,"mut",[[25,["activeResponsiveClass"]]],null],[24,3,[]]]],[10],[0,"\\n"]],"parameters":[3]},null],[0,"      "],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","etw-mt-4"],[9],[0,"\\n      "],[7,"h4"],[11,"class","etw-inline-block etw-pr-2"],[9],[0,"State: "],[10],[0,"\\n      "],[7,"div"],[11,"class","etw-mt-2 etw-text-sm etw-inline-block"],[9],[0,"\\n"],[4,"each",[[29,"array",["none","hover","focus"],null]],null,{"statements":[[0,"          "],[7,"a"],[11,"href","#"],[12,"class",[30,["\\n              etw-no-underline\\n              etw-text-black\\n              etw-pr-2\\n              ",[29,"if",[[29,"eq",[[25,["activeState"]],[24,2,[]]],null],"etw-opacity-100","etw-opacity-25"],null],"\\n            "]]],[9],[0,"\\n            "],[1,[24,2,[]],false],[0,"\\n          "],[3,"action",[[24,0,[]],[29,"mut",[[25,["activeState"]]],null],[24,2,[]]]],[10],[0,"\\n"]],"parameters":[2]},null],[0,"      "],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","etw-mt-8 etw-mb-4"],[9],[0,"\\n      "],[7,"p"],[11,"class","etw-text-right etw-text-xs etw-opacity-50"],[9],[0,"\\n"],[4,"if",[[25,["highlightedStyle"]]],null,{"statements":[[0,"          Copied!\\n"]],"parameters":[]},{"statements":[[0,"          Click to copy\\n"]],"parameters":[]}],[0,"      "],[10],[0,"\\n\\n      "],[7,"ul"],[11,"class","etw-mt-3 etw-list-reset"],[9],[0,"\\n"],[4,"each",[[25,["detailStyles"]]],null,{"statements":[[0,"          "],[7,"li"],[11,"class","etw-mt-4"],[9],[0,"\\n"],[4,"copy-button",null,[["class","clipboardText","title","success"],[[29,"concat",["etw-bg-grey-light etw-opacity-75 hover:etw-opacity-100 ","etw-px-1 etw-py-2 etw-w-full etw-text-left etw-transition ",[29,"if",[[29,"eq",[[25,["highlightedStyle"]],[24,1,[]]],null],"etw-bg-green etw-text-white"],null]],null],[24,1,[]],"Copy",[29,"action",[[24,0,[]],"highlightStyle",[24,1,[]]],null]]],{"statements":[[0,"              "],[7,"code"],[9],[0,"."],[1,[24,1,[]],false],[10],[0,"\\n"]],"parameters":[]},null],[0,"          "],[10],[0,"\\n"]],"parameters":[1]},null],[0,"      "],[10],[0,"\\n    "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[0,"\\n    "],[7,"p"],[11,"class","etw-mt-4 etw-text-grey etw-italic"],[9],[0,"Select a module for more detail."],[10],[0,"\\n\\n"]],"parameters":[]}],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/etw/module-style-detail.hbs"}})
e.default=s}),define("dummy/templates/components/etw/module-style-example",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"pqVCMyzn",block:'{"symbols":[],"statements":[[7,"a"],[11,"class","etw-mb-8 etw-w-1/5 etw-p-2"],[9],[0,"\\n  "],[7,"div"],[11,"class","etw-text-center etw-m-4 etw-text-sm "],[9],[0,"\\n    "],[7,"div"],[11,"class","etw-text-center etw-m-4 etw-text-sm "],[9],[0,"\\n\\n"],[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"border-radius"],null]],null,{"statements":[[0,"\\n        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-border\\n          etw-border-solid etw-border-grey\\n          etw-bg-grey-lighter\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"border-widths"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24\\n          etw-border-red etw-bg-grey-lighter etw-border-solid\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"colors"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["etw-marginx-auto etw-w-full etw-h-24 bg-",[25,["moduleStyle","name"]]]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"font-weights"],null]],null,{"statements":[[0,"        "],[7,"p"],[12,"class",[30,["font-",[25,["moduleStyle","name"]]]]],[9],[0,"\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit.\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"height"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24\\n          etw-border etw-border-solid etw-border-grey\\n          etw-bg-grey-lighter\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"letter-spacing"],null]],null,{"statements":[[0,"        "],[7,"p"],[12,"class",[30,["text-left tracking-",[25,["moduleStyle","name"]]]]],[9],[0,"\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"line-height"],null]],null,{"statements":[[0,"        "],[7,"p"],[12,"class",[30,["text-left leading-",[25,["moduleStyle","name"]]]]],[9],[0,"\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"margin"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["etw-bg-red etw-w-24 etw-mx-auto etw-border-t etw-border-solid ",[29,"if",[[29,"eq",[[25,["moduleStyle","name"]],"auto"],null],"","etw-border-transparent"],null]]]],[9],[0,"\\n          "],[7,"div"],[12,"class",[30,["\\n            etw-mx-auto etw-w-24 etw-h-24 etw-border\\n             etw-bg-grey-lighter\\n            mt-",[25,["moduleStyle","name"]],"\\n          "]]],[9],[10],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"max-height"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-bg-grey-lighter\\n          etw-border etw-border-solid etw-border-grey\\n          max-h-",[25,["moduleStyle","name"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"max-width"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-bg-grey-lighter\\n          etw-border etw-border-solid etw-border-grey\\n          max-w-",[25,["moduleStyle","name"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"min-height"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-bg-grey-lighter\\n          etw-border etw-border-solid etw-border-grey\\n          min-h-",[25,["moduleStyle","name"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"min-width"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-bg-grey-lighter\\n          etw-border etw-border-solid etw-border-grey\\n          min-w-",[25,["moduleStyle","name"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"negative-margin"],null]],null,{"statements":[[0,"        "],[7,"div"],[11,"class","etw-mb-8 etw-bg-red etw-px-4 etw-pb-4 etw-mx-auto etw-h-32 etw-relative"],[9],[0,"\\n          "],[7,"div"],[11,"class","etw-absolute etw-pin-x"],[9],[0,"\\n            "],[7,"div"],[12,"class",[30,["\\n            etw-mx-auto etw-w-24 etw-h-24 etw-border\\n            etw-bg-grey-lighter etw-shadow-lg\\n            -mt-",[25,["moduleStyle","name"]],"\\n            "]]],[9],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"opacity"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-border\\n          etw-border-grey etw-bg-grey-lighter\\n          opacity-",[25,["moduleStyle","name"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"padding"],null]],null,{"statements":[[0,"        "],[7,"div"],[11,"class","etw-bg-red etw-w-24 etw-mx-auto"],[9],[0,"\\n          "],[7,"div"],[12,"class",[30,["\\n            etw-mx-auto etw-w-24 etw-h-24 etw-border\\n             etw-bg-grey-lighter\\n            pt-",[25,["moduleStyle","name"]],"\\n          "]]],[9],[0,"\\n            "],[7,"p"],[11,"class","etw-text-grey-darker"],[9],[0,"Lorem"],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"shadows"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-bg-white\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"svg-fill"],null]],null,{"statements":[[0,"        "],[7,"div"],[11,"class","etw-bg-grey-lighter etw-text-red etw-py-4"],[9],[0,"\\n          "],[7,"svg"],[11,"class","fill-current inline-block h-12 w-12"],[11,"xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],[11,"viewBox","0 0 20 20"],[9],[0,"\\n            "],[7,"path"],[11,"d","M18 9.87V20H2V9.87a4.25 4.25 0 0 0 3-.38V14h10V9.5a4.26 4.26 0 0 0 3 .37zM3 0h4l-.67 6.03A3.43 3.43 0 0 1 3 9C1.34 9 .42 7.73.95 6.15L3 0zm5 0h4l.7 6.3c.17 1.5-.91 2.7-2.42 2.7h-.56A2.38 2.38 0 0 1 7.3 6.3L8 0zm5 0h4l2.05 6.15C19.58 7.73 18.65 9 17 9a3.42 3.42 0 0 1-3.33-2.97L13 0z"],[9],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"svg-stroke"],null]],null,{"statements":[[0,"        "],[7,"div"],[11,"class","etw-bg-grey-lighter etw-text-red etw-py-4"],[9],[0,"\\n          "],[7,"svg"],[11,"class","stroke-current inline-block h-12 w-12"],[11,"viewBox","0 0 24 24"],[11,"xmlns","http://www.w3.org/2000/svg","http://www.w3.org/2000/xmlns/"],[11,"fill","none"],[11,"stroke-width","2"],[11,"stroke-linecap","round"],[11,"stroke-linejoin","round"],[9],[0,"\\n              "],[7,"circle"],[11,"cx","8"],[11,"cy","21"],[11,"r","2"],[9],[10],[0,"\\n              "],[7,"circle"],[11,"cx","20"],[11,"cy","21"],[11,"r","2"],[9],[10],[0,"\\n              "],[7,"path"],[11,"d","M5.67 6H23l-1.68 8.39a2 2 0 0 1-2 1.61H8.75a2 2 0 0 1-2-1.74L5.23 2.74A2 2 0 0 0 3.25 1H1"],[9],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"text-sizes"],null]],null,{"statements":[[0,"        "],[7,"p"],[12,"class",[30,["text-left text-",[25,["moduleStyle","name"]]]]],[9],[0,"\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit.\\n        "],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"width"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-border\\n          etw-border-grey etw-bg-grey-lighter\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[10],[0,"\\n\\n"]],"parameters":[]},{"statements":[[4,"if",[[29,"eq",[[25,["moduleStyle","module"]],"z-index"],null]],null,{"statements":[[0,"        "],[7,"div"],[12,"class",[30,["\\n          etw-mx-auto etw-w-24 etw-h-24 etw-border\\n          etw-border-grey etw-bg-grey-lighter\\n          ",[25,["classesForModuleStyle","0"]],"\\n        "]]],[9],[10],[0,"\\n\\n      "]],"parameters":[]},null]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}]],"parameters":[]}],[0,"\\n      "],[7,"div"],[11,"class","etw-mt-3 etw-leading-normal"],[9],[0,"\\n        "],[7,"p"],[9],[1,[25,["moduleStyle","name"]],false],[10],[0,"\\n        "],[7,"p"],[11,"class","etw-opacity-50"],[9],[1,[25,["moduleStyle","value"]],false],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[3,"action",[[24,0,[]],"selectModuleStyle"]],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/etw/module-style-example.hbs"}})
e.default=s}),define("dummy/templates/contact",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"FdYcMa6A",block:'{"symbols":[],"statements":[[4,"link-to",["contacts"],null,{"statements":[[0,"Back home"]],"parameters":[]},null],[0,"\\n\\n"],[7,"p"],[9],[0,"The contact is "],[1,[25,["model","name"]],false],[10],[0,"\\n\\n"],[7,"div"],[9],[0,"\\n"],[4,"link-to",["edit",[25,["model"]]],null,{"statements":[[0,"    "],[7,"button"],[9],[0,"Edit this contact"],[10],[0,"\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[7,"div"],[9],[0,"\\n  "],[7,"button"],[9],[0,"Delete this contact"],[3,"action",[[24,0,[]],"deleteContact",[25,["model"]]]],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/contact.hbs"}})
e.default=s}),define("dummy/templates/contacts",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"7nvzzkaH",block:'{"symbols":["contact"],"statements":[[4,"if",[[25,["error"]]],null,{"statements":[[0,"  "],[7,"p"],[11,"class","error"],[9],[0,"There was an error: "],[7,"span"],[9],[1,[23,"error"],false],[10],[10],[0,"\\n"]],"parameters":[]},{"statements":[[4,"each",[[25,["model"]]],null,{"statements":[[0,"    "],[7,"p"],[9],[4,"link-to",["contact",[24,1,[]]],null,{"statements":[[1,[24,1,["name"]],false]],"parameters":[]},null],[10],[0,"\\n"]],"parameters":[1]},null]],"parameters":[]}],[0,"\\n"],[7,"hr"],[9],[10],[0,"\\n\\n"],[7,"div"],[9],[0,"\\n  "],[7,"div"],[9],[1,[29,"input",null,[["value","placeholder"],[[25,["newName"]],"Name"]]],false],[10],[0,"\\n\\n  "],[7,"div"],[9],[0,"\\n    "],[7,"button"],[9],[0,"Create a new contact"],[3,"action",[[24,0,[]],"createContact"]],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/contacts.hbs"}})
e.default=s}),define("dummy/templates/docs/api/item",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"RYZUp2/U",block:'{"symbols":[],"statements":[[4,"if",[[25,["model","isComponent"]]],null,{"statements":[[0,"  "],[1,[29,"api/x-component",null,[["component"],[[25,["model"]]]]],false],[0,"\\n"]],"parameters":[]},{"statements":[[4,"if",[[25,["model","isClass"]]],null,{"statements":[[0,"  "],[1,[29,"api/x-class",null,[["class"],[[25,["model"]]]]],false],[0,"\\n"]],"parameters":[]},{"statements":[[0,"  "],[1,[29,"api/x-module",null,[["module"],[[25,["model"]]]]],false],[0,"\\n"]],"parameters":[]}]],"parameters":[]}]],"hasEval":false}',meta:{moduleName:"dummy/templates/docs/api/item.hbs"}})
e.default=s}),define("dummy/templates/edit",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"BVycxupR",block:'{"symbols":[],"statements":[[7,"div"],[9],[0,"\\n  "],[1,[29,"input",null,[["value"],[[25,["model","name"]]]]],false],[0,"\\n"],[10],[0,"\\n\\n"],[4,"link-to",["contact",[25,["model"]]],null,{"statements":[[0,"Cancel"]],"parameters":[]},null],[0,"\\n"],[7,"button"],[9],[0,"Save"],[3,"action",[[24,0,[]],"saveContact",[25,["model"]]]],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/edit.hbs"}})
e.default=s}),define("dummy/templates/pets",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var s=Ember.HTMLBars.template({id:"oD4OJ9pg",block:'{"symbols":["pet"],"statements":[[4,"if",[[25,["error"]]],null,{"statements":[[0,"  "],[7,"p"],[11,"class","error"],[9],[0,"There was an error: "],[7,"span"],[9],[1,[23,"error"],false],[10],[10],[0,"\\n"]],"parameters":[]},{"statements":[[0,"  "],[7,"ul"],[9],[0,"\\n"],[4,"each",[[25,["model"]]],null,{"statements":[[0,"      "],[7,"li"],[9],[7,"span"],[11,"class","name"],[9],[1,[24,1,["name"]],false],[10],[0," / alive: "],[7,"span"],[11,"class","alive"],[9],[1,[24,1,["alive"]],false],[10],[10],[0,"\\n"]],"parameters":[1]},null],[0,"    "],[1,[29,"input",null,[["value"],[[25,["petName"]]]]],false],[0,"\\n    "],[7,"button"],[9],[0,"create"],[3,"action",[[24,0,[]],"createPet"]],[10],[0,"\\n  "],[10],[0,"\\n"]],"parameters":[]}]],"hasEval":false}',meta:{moduleName:"dummy/templates/pets.hbs"}})
e.default=s}),define("dummy/transitions",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){this.transition(this.hasClass("modal-fade-and-drop"),this.use("fadeAndDrop")),this.transition(this.hasClass("modal-fade"),this.use("fade",{duration:150}))}}),define("dummy/transitions/cross-fade",["exports","liquid-fire/transitions/cross-fade"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/default",["exports","liquid-fire/transitions/default"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/explode",["exports","liquid-fire/transitions/explode"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/fade-and-drop",["exports","ember-cli-addon-docs/transitions/fade-and-drop"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/fade",["exports","liquid-fire/transitions/fade"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/flex-grow",["exports","liquid-fire/transitions/flex-grow"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/fly-to",["exports","liquid-fire/transitions/fly-to"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/move-over",["exports","liquid-fire/transitions/move-over"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/scale",["exports","liquid-fire/transitions/scale"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/scroll-then",["exports","liquid-fire/transitions/scroll-then"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/to-down",["exports","liquid-fire/transitions/to-down"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/to-left",["exports","liquid-fire/transitions/to-left"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/to-right",["exports","liquid-fire/transitions/to-right"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/to-up",["exports","liquid-fire/transitions/to-up"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/transitions/wait",["exports","liquid-fire/transitions/wait"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/utils/get-cmd-key",["exports","ember-keyboard/utils/get-cmd-key"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/utils/listener-name",["exports","ember-keyboard/utils/listener-name"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/utils/titleize",["exports","ember-cli-string-helpers/utils/titleize"],function(e,s){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.default}})}),define("dummy/config/environment",[],function(){if("undefined"!=typeof FastBoot)return FastBoot.config("dummy")
try{var e="dummy/config/environment",s=document.querySelector('meta[name="'+e+'"]').getAttribute("content"),a={default:JSON.parse(unescape(s))}
return Object.defineProperty(a,"__esModule",{value:!0}),a}catch(t){throw new Error('Could not read config from meta tag with name "'+e+'".')}}),"undefined"==typeof FastBoot&&(runningTests||require("dummy/app").default.create({name:"ember-cli-mirage",version:"1.0.0-beta.1+7a6f334b"}))
define("~fastboot/app-factory",["dummy/app","dummy/config/environment"],function(e,s){return e=e.default,s=s.default,{default:function(){return e.create(s.APP)}}})
